
LoRa_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d7c  08004d7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  2000005c  08004de0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08004de0  000063d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa43  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad2  00000000  00000000  00025ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  000285a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017b7  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c789  00000000  00000000  0002bc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a942  00000000  00000000  000483b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af8a7  00000000  00000000  00062cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b70  00000000  00000000  001125dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0011b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000005c 	.word	0x2000005c
 800015c:	00000000 	.word	0x00000000
 8000160:	08004b44 	.word	0x08004b44

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000060 	.word	0x20000060
 800017c:	08004b44 	.word	0x08004b44

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <M20071_GPS_Init>:
#include "M20071_GPS.h"

void M20071_GPS_Init(M20071_GPS_HandleTypeDef *gps, UART_HandleTypeDef *huart) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
    gps->huart = huart;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	601a      	str	r2, [r3, #0]
    memset(gps->txBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fbb9 	bl	800419c <memset>
    memset(gps->rxBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3384      	adds	r3, #132	@ 0x84
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fbb2 	bl	800419c <memset>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <M20071_GPS_SendCommand>:
 * @brief Sends a GPS command over UART
 * @param gps: Pointer to the GPS handle
 * @param cmd: Command string (e.g., "$PAIR690,1,21,39,48,72*28\r\n")
 * @return HAL_StatusTypeDef: HAL_OK if successful, otherwise error status
 */
HAL_StatusTypeDef M20071_GPS_SendCommand(M20071_GPS_HandleTypeDef *gps, const char *cmd) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
    uint16_t len = strlen(cmd);
 8000a4a:	6838      	ldr	r0, [r7, #0]
 8000a4c:	f7ff fb98 	bl	8000180 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	81fb      	strh	r3, [r7, #14]
    
    if (len >= GPS_UART_BUFFER_SIZE) {
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a58:	d901      	bls.n	8000a5e <M20071_GPS_SendCommand+0x1e>
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e026      	b.n	8000aac <M20071_GPS_SendCommand+0x6c>
    }

    // Clear the TX buffer and copy the command
    memset(gps->txBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fb98 	bl	800419c <memset>
    strncpy((char *)gps->txBuffer, cmd, len);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	89fa      	ldrh	r2, [r7, #14]
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fba6 	bl	80041c6 <strncpy>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // RTS low
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <M20071_GPS_SendCommand+0x74>)
 8000a80:	f001 f87a 	bl	8001b78 <HAL_GPIO_WritePin>
    HAL_Delay(20);  // 20ms delay, madatory delay, see logbook
 8000a84:	2014      	movs	r0, #20
 8000a86:	f000 fde7 	bl	8001658 <HAL_Delay>

    // Send the command using UART polling
    HAL_StatusTypeDef transmit_result;
    transmit_result = HAL_UART_Transmit(gps->huart, gps->txBuffer, len, GPS_CMD_TIMEOUT);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	1d19      	adds	r1, r3, #4
 8000a92:	89fa      	ldrh	r2, [r7, #14]
 8000a94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a98:	f003 fa0a 	bl	8003eb0 <HAL_UART_Transmit>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // RTS high
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <M20071_GPS_SendCommand+0x74>)
 8000aa6:	f001 f867 	bl	8001b78 <HAL_GPIO_WritePin>
    return transmit_result;
 8000aaa:	7b7b      	ldrb	r3, [r7, #13]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	48000400 	.word	0x48000400

08000ab8 <addChecksum>:

/**
 * @brief Calculates checksum of string.
 * @param msg: Pointer to the message
 */
void addChecksum(char *msg) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  char *star = strchr(msg, '*');
 8000ac0:	212a      	movs	r1, #42	@ 0x2a
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f003 fb72 	bl	80041ac <strchr>
 8000ac8:	60f8      	str	r0, [r7, #12]

  uint8_t calculatedChecksum = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]
  // Compute XOR of all characters between $ and *
  for (const char *p = msg + 1; p < star; ++p) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	e007      	b.n	8000ae6 <addChecksum+0x2e>
      calculatedChecksum ^= *p;
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	4053      	eors	r3, r2
 8000ade:	75fb      	strb	r3, [r7, #23]
  for (const char *p = msg + 1; p < star; ++p) {
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3f3      	bcc.n	8000ad6 <addChecksum+0x1e>
  }

  sprintf(star + 1, "%02X\r\n", calculatedChecksum);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	7dfa      	ldrb	r2, [r7, #23]
 8000af4:	4903      	ldr	r1, [pc, #12]	@ (8000b04 <addChecksum+0x4c>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fb2e 	bl	8004158 <siprintf>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08004b5c 	.word	0x08004b5c

08000b08 <GPS_powerOn>:
/**
 * @brief Power on the GNSS system, must send this command before using lacation services
 * @param gps: Pointer to the GPS handle
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_powerOn(M20071_GPS_HandleTypeDef *gps) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  char cmd[40] = "$PAIR002*";
 8000b10:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <GPS_powerOn+0x4c>)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b18:	c303      	stmia	r3!, {r0, r1}
 8000b1a:	801a      	strh	r2, [r3, #0]
 8000b1c:	f107 0312 	add.w	r3, r7, #18
 8000b20:	221e      	movs	r2, #30
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fb39 	bl	800419c <memset>
  addChecksum(cmd);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffc2 	bl	8000ab8 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ff80 	bl	8000a40 <M20071_GPS_SendCommand>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <GPS_powerOn+0x42>
      return true;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <GPS_powerOn+0x44>
  }
  return false;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3730      	adds	r7, #48	@ 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08004b64 	.word	0x08004b64

08000b58 <GPS_setNMEARate>:
 * @param gps: Pointer to the GPS handle
 * @param rate: NMEA sentence type (4 is RMC)
 * @param rate: Output rate, range: 0-20 (how many times every position fix)
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_setNMEARate(M20071_GPS_HandleTypeDef *gps, uint8_t type, uint8_t rate) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
 8000b64:	4613      	mov	r3, r2
 8000b66:	70bb      	strb	r3, [r7, #2]
  char cmd[40]; 
  sprintf(cmd, "$PAIR062,%d,%d*", type, rate);
 8000b68:	78fa      	ldrb	r2, [r7, #3]
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	f107 0008 	add.w	r0, r7, #8
 8000b70:	490b      	ldr	r1, [pc, #44]	@ (8000ba0 <GPS_setNMEARate+0x48>)
 8000b72:	f003 faf1 	bl	8004158 <siprintf>
  addChecksum(cmd);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff9c 	bl	8000ab8 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff5a 	bl	8000a40 <M20071_GPS_SendCommand>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <GPS_setNMEARate+0x3e>
    return true;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <GPS_setNMEARate+0x40>
  }
  return false;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08004bdc 	.word	0x08004bdc

08000ba4 <GPS_openIOPort>:
 * @param gps: Pointer to the GPS handle
 * @param portIndex: HW port index
 * @param baudRate: Baud rate
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_openIOPort(M20071_GPS_HandleTypeDef *gps, uint8_t portIndex) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
  char cmd[40];
  sprintf(cmd, "$PAIR860,0,%d,%d,9600,0*", portIndex, GNSS_IO_FLAG_OUT_NMEA | GNSS_IO_FLAG_OUT_CMD_RSP | GNSS_IO_FLAG_OUT_DATA_RSP | GNSS_IO_FLAG_IN_CMD);
 8000bb0:	78fa      	ldrb	r2, [r7, #3]
 8000bb2:	f107 0008 	add.w	r0, r7, #8
 8000bb6:	232d      	movs	r3, #45	@ 0x2d
 8000bb8:	490b      	ldr	r1, [pc, #44]	@ (8000be8 <GPS_openIOPort+0x44>)
 8000bba:	f003 facd 	bl	8004158 <siprintf>
  addChecksum(cmd);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff78 	bl	8000ab8 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff36 	bl	8000a40 <M20071_GPS_SendCommand>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <GPS_openIOPort+0x3a>
    return true;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <GPS_openIOPort+0x3c>
  }
  return false;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	@ 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08004c3c 	.word	0x08004c3c

08000bec <lora_init>:
#include <lora.h>

SUBGHZ_HandleTypeDef hsubghz;

bool lora_init()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
    // initialize SubGHz with correct prescaler
    // #define LL_SPI_BAUDRATEPRESCALER_DIV4      (SPI_CR1_BR_0)  /*!< BaudRate control equal to fPCLK/4   */
    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8; // #define SPI_CR1_BR_1                (0x2UL << SPI_CR1_BR_Pos)                  /*!< 0x00000010 */ from the wle5
 8000bf2:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <lora_init+0xdc>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	601a      	str	r2, [r3, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000bf8:	4833      	ldr	r0, [pc, #204]	@ (8000cc8 <lora_init+0xdc>)
 8000bfa:	f002 ffcd 	bl	8003b98 <HAL_SUBGHZ_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <lora_init+0x1c>
        return false;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e05a      	b.n	8000cbe <lora_init+0xd2>

    // put radio in standby (RC oscillator) --> i googles this
    uint8_t standby = 0x00; // STDBY_RC
 8000c08:	2300      	movs	r3, #0
 8000c0a:	747b      	strb	r3, [r7, #17]
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_STANDBY, &standby, 1) != HAL_OK)
 8000c0c:	f107 0211 	add.w	r2, r7, #17
 8000c10:	2301      	movs	r3, #1
 8000c12:	2180      	movs	r1, #128	@ 0x80
 8000c14:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <lora_init+0xdc>)
 8000c16:	f003 f823 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <lora_init+0x38>
        return false;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e04c      	b.n	8000cbe <lora_init+0xd2>

    // set packet type to LoRa
    uint8_t packetType = 0x01; // 0x01 = LoRa
 8000c24:	2301      	movs	r3, #1
 8000c26:	743b      	strb	r3, [r7, #16]
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, &packetType, 1) != HAL_OK)
 8000c28:	f107 0210 	add.w	r2, r7, #16
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	218a      	movs	r1, #138	@ 0x8a
 8000c30:	4825      	ldr	r0, [pc, #148]	@ (8000cc8 <lora_init+0xdc>)
 8000c32:	f003 f815 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <lora_init+0x54>
        return false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e03e      	b.n	8000cbe <lora_init+0xd2>

    // set frequency to  921.2 MHz and set TX Power to 14 dBm since thats what the node code does
    float freq = 921.2;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <lora_init+0xe0>)
 8000c42:	617b      	str	r3, [r7, #20]
    bool setFreq = lora_setFrequency(freq);
 8000c44:	6978      	ldr	r0, [r7, #20]
 8000c46:	f000 f847 	bl	8000cd8 <lora_setFrequency>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	74fb      	strb	r3, [r7, #19]
    bool setPower = lora_setTxPower(14);
 8000c4e:	200e      	movs	r0, #14
 8000c50:	f000 f888 	bl	8000d64 <lora_setTxPower>
 8000c54:	4603      	mov	r3, r0
 8000c56:	74bb      	strb	r3, [r7, #18]
    if (!setPower || !setFreq) return false;
 8000c58:	7cbb      	ldrb	r3, [r7, #18]
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d105      	bne.n	8000c70 <lora_init+0x84>
 8000c64:	7cfb      	ldrb	r3, [r7, #19]
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <lora_init+0x88>
 8000c70:	2300      	movs	r3, #0
 8000c72:	e024      	b.n	8000cbe <lora_init+0xd2>

    // set modulation parameters (SF7, BW 125 kHz, CR 4/4)
    if (!lora_setSF(0x09)) return false;
 8000c74:	2009      	movs	r0, #9
 8000c76:	f000 f899 	bl	8000dac <lora_setSF>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f083 0301 	eor.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <lora_init+0x9e>
 8000c86:	2300      	movs	r3, #0
 8000c88:	e019      	b.n	8000cbe <lora_init+0xd2>

    // set packet parameters (preamble = 8, header = explicit, CRC on, IQ standard)
    uint8_t pktParams[9] = {
 8000c8a:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <lora_init+0xe4>)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c92:	6018      	str	r0, [r3, #0]
 8000c94:	3304      	adds	r3, #4
 8000c96:	8019      	strh	r1, [r3, #0]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	0c0a      	lsrs	r2, r1, #16
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	f107 030b 	add.w	r3, r7, #11
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
        0x00,       // Explicit header
        0x10,       // Payload length = 16 bytes
        0x01,       // CRC on
        0x00        // Standard IQ
    };
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS, pktParams, 7) != HAL_OK)
 8000ca6:	1d3a      	adds	r2, r7, #4
 8000ca8:	2307      	movs	r3, #7
 8000caa:	218c      	movs	r1, #140	@ 0x8c
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <lora_init+0xdc>)
 8000cae:	f002 ffd7 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <lora_init+0xd0>
        return false;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e000      	b.n	8000cbe <lora_init+0xd2>

    // radio is now initialized for LoRa operation
    return true;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000078 	.word	0x20000078
 8000ccc:	44664ccd 	.word	0x44664ccd
 8000cd0:	08004c98 	.word	0x08004c98
 8000cd4:	00000000 	.word	0x00000000

08000cd8 <lora_setFrequency>:
    }
    return false;
}

bool lora_setFrequency(float center)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    uint32_t frf = (uint32_t)((center * 1000000.0) / 61.03515625); // RH_RF95_FSTEP
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fc09 	bl	80004f8 <__aeabi_f2d>
 8000ce6:	a31a      	add	r3, pc, #104	@ (adr r3, 8000d50 <lora_setFrequency+0x78>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fc5c 	bl	80005a8 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	a317      	add	r3, pc, #92	@ (adr r3, 8000d58 <lora_setFrequency+0x80>)
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	f7ff fd7d 	bl	80007fc <__aeabi_ddiv>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fe5f 	bl	80009cc <__aeabi_d2uiz>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60fb      	str	r3, [r7, #12]
    uint8_t frf_bytes[3] = {
        (uint8_t)(frf >> 16),
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8000d18:	723b      	strb	r3, [r7, #8]
        (uint8_t)(frf >> 8),
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8000d20:	727b      	strb	r3, [r7, #9]
        (uint8_t)(frf)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8000d26:	72bb      	strb	r3, [r7, #10]
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, frf_bytes, 3) == HAL_OK;
 8000d28:	f107 0208 	add.w	r2, r7, #8
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	2186      	movs	r1, #134	@ 0x86
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <lora_setFrequency+0x88>)
 8000d32:	f002 ff95 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	00000000 	.word	0x00000000
 8000d54:	412e8480 	.word	0x412e8480
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	404e8480 	.word	0x404e8480
 8000d60:	20000078 	.word	0x20000078

08000d64 <lora_setTxPower>:


bool lora_setTxPower(uint8_t power)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
    // i made this into boolean just in case
    // TX power: 0–22 dBm (limited by hardware)
    // We dont need to manually set rfo on stm32

    uint8_t rampTime = 0x04; // default ramp time: 20us (safe default)
 8000d6e:	2304      	movs	r3, #4
 8000d70:	73fb      	strb	r3, [r7, #15]

    if (power > 22) // max output power is 22dBm according to datasheet
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b16      	cmp	r3, #22
 8000d76:	d901      	bls.n	8000d7c <lora_setTxPower+0x18>
        power = 22;
 8000d78:	2316      	movs	r3, #22
 8000d7a:	71fb      	strb	r3, [r7, #7]

    if (power < 0)
        power = 0;

    uint8_t txParams[2] = {
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	733b      	strb	r3, [r7, #12]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	737b      	strb	r3, [r7, #13]
        power, // TX power configuration
        rampTime  // Ramp time code
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXPARAMS, txParams, 2) == HAL_OK;
 8000d84:	f107 020c 	add.w	r2, r7, #12
 8000d88:	2302      	movs	r3, #2
 8000d8a:	218e      	movs	r1, #142	@ 0x8e
 8000d8c:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <lora_setTxPower+0x44>)
 8000d8e:	f002 ff67 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf0c      	ite	eq
 8000d98:	2301      	moveq	r3, #1
 8000d9a:	2300      	movne	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000078 	.word	0x20000078

08000dac <lora_setSF>:
    return (irq & 0x0002);
}


bool lora_setSF(uint8_t sf)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
    // i made this into boolean just in case
    // we want sf between 7 and 12
    if (sf < 7 || sf > 12) return false;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d902      	bls.n	8000dc2 <lora_setSF+0x16>
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d901      	bls.n	8000dc6 <lora_setSF+0x1a>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e014      	b.n	8000df0 <lora_setSF+0x44>

    // Set_ModulationParams(Sf, Bw, Cr, Ldro) is used to configure the LoRa modulation parameters for the sub-GHz radio.
    uint8_t modParams[4] = {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	733b      	strb	r3, [r7, #12]
 8000dca:	2304      	movs	r3, #4
 8000dcc:	737b      	strb	r3, [r7, #13]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73bb      	strb	r3, [r7, #14]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
        0x04, // bw 0x04: bandwidth 125 (125 kHz)
        0x0, // cr coding rate 0x0: no forward error correction coding rate 4/4
        0, // lr 0 low data rate optimization disabled, unsure if base station can set this
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS, modParams, 4) == HAL_OK;
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	2304      	movs	r3, #4
 8000ddc:	218b      	movs	r1, #139	@ 0x8b
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <lora_setSF+0x4c>)
 8000de0:	f002 ff3e 	bl	8003c60 <HAL_SUBGHZ_ExecSetCmd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bf0c      	ite	eq
 8000dea:	2301      	moveq	r3, #1
 8000dec:	2300      	movne	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000078 	.word	0x20000078

08000dfc <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	461a      	mov	r2, r3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	72fb      	strb	r3, [r7, #11]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <lsm6dsox_read_reg+0x20>
  {
    return -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <lsm6dsox_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	685c      	ldr	r4, [r3, #4]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68d8      	ldr	r0, [r3, #12]
 8000e24:	893b      	ldrh	r3, [r7, #8]
 8000e26:	7af9      	ldrb	r1, [r7, #11]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	47a0      	blx	r4
 8000e2c:	6178      	str	r0, [r7, #20]

  return ret;
 8000e2e:	697b      	ldr	r3, [r7, #20]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd90      	pop	{r4, r7, pc}

08000e38 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8000e42:	2301      	movs	r3, #1
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	210f      	movs	r1, #15
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffd7 	bl	8000dfc <lsm6dsox_read_reg>
 8000e4e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e92:	f000 fb6b 	bl	800156c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e96:	f000 f903 	bl	80010a0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9a:	f000 f953 	bl	8001144 <MX_GPIO_Init>

  // LoRa setup
  lora_init();
 8000e9e:	f7ff fea5 	bl	8000bec <lora_init>
  lora_setFrequency(902.5);
 8000ea2:	481f      	ldr	r0, [pc, #124]	@ (8000f20 <main+0x94>)
 8000ea4:	f7ff ff18 	bl	8000cd8 <lora_setFrequency>
  lora_setTxPower(17); // 14-22
 8000ea8:	2011      	movs	r0, #17
 8000eaa:	f7ff ff5b 	bl	8000d64 <lora_setTxPower>
  lora_setSF(9);
 8000eae:	2009      	movs	r0, #9
 8000eb0:	f7ff ff7c 	bl	8000dac <lora_setSF>

  // GPS setup
  HAL_UART_MspInit(&huart1);
 8000eb4:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <main+0x98>)
 8000eb6:	f000 fa03 	bl	80012c0 <HAL_UART_MspInit>
  M20071_GPS_Init(&hGps, &huart1);
 8000eba:	491a      	ldr	r1, [pc, #104]	@ (8000f24 <main+0x98>)
 8000ebc:	481a      	ldr	r0, [pc, #104]	@ (8000f28 <main+0x9c>)
 8000ebe:	f7ff fda5 	bl	8000a0c <M20071_GPS_Init>
  GPS_powerOn(&hGps);
 8000ec2:	4819      	ldr	r0, [pc, #100]	@ (8000f28 <main+0x9c>)
 8000ec4:	f7ff fe20 	bl	8000b08 <GPS_powerOn>
  setGPS(&hGps);
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <main+0x9c>)
 8000eca:	f000 f833 	bl	8000f34 <setGPS>

  // IMU setup
  HAL_I2C_MspInit(&hi2c3);
 8000ece:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <main+0xa0>)
 8000ed0:	f000 fa4a 	bl	8001368 <HAL_I2C_MspInit>
  stmdev_ctx_t dev_ctx;
  lsm6dsox_activity_init(dev_ctx);
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed8:	f000 f84e 	bl	8000f78 <lsm6dsox_activity_init>

  // General setup
  time_t timer;
  timer = time(NULL);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f003 f985 	bl	80041ec <time>
 8000ee2:	e9c7 0106 	strd	r0, r1, [r7, #24]

  bool sleep = false;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75fb      	strb	r3, [r7, #23]

  int messageID = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]


  static unsigned short pin_state = 0;
  while (1) {

  pin_state = !pin_state;
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <main+0xa4>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2301      	moveq	r3, #1
 8000ef8:	2300      	movne	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <main+0xa4>)
 8000f00:	801a      	strh	r2, [r3, #0]
  // write pin state
  // NOTE: You can in turn use HAL_GPIO_TogglePin
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, pin_state);
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <main+0xa4>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f10:	f000 fe32 	bl	8001b78 <HAL_GPIO_WritePin>
  // synchronous delay for 500 ms
  HAL_Delay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f18:	f000 fb9e 	bl	8001658 <HAL_Delay>
  pin_state = !pin_state;
 8000f1c:	bf00      	nop
 8000f1e:	e7e6      	b.n	8000eee <main+0x62>
 8000f20:	4461a000 	.word	0x4461a000
 8000f24:	20000084 	.word	0x20000084
 8000f28:	20000118 	.word	0x20000118
 8000f2c:	20000230 	.word	0x20000230
 8000f30:	20000284 	.word	0x20000284

08000f34 <setGPS>:
			break;

	}
}

static void setGPS(M20071_GPS_HandleTypeDef *hGps) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	GPS_openIOPort(hGps, 1); // check port index and baud rate
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fe30 	bl	8000ba4 <GPS_openIOPort>

	for (int i = 0; i <= 8; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e009      	b.n	8000f5e <setGPS+0x2a>
		GPS_setNMEARate(hGps, i, 0);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fe00 	bl	8000b58 <GPS_setNMEARate>
	for (int i = 0; i <= 8; i++) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	ddf2      	ble.n	8000f4a <setGPS+0x16>
	}
	GPS_setNMEARate(hGps, 4, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fdf5 	bl	8000b58 <GPS_setNMEARate>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <lsm6dsox_activity_init>:
static uint32_t getRandomBackoff(uint32_t min_ms, uint32_t max_ms) {
   return (rand() % (max_ms - min_ms + 1)) + min_ms;
}

static void lsm6dsox_activity_init(stmdev_ctx_t dev_ctx)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	463c      	mov	r4, r7
 8000f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 lsm6dsox_pin_int1_route_t int1_route;

 uint8_t dummy;
 /* Initialize mems driver interface */
 dev_ctx.write_reg = lsm6dsox_write;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <lsm6dsox_activity_init+0x38>)
 8000f86:	603b      	str	r3, [r7, #0]
 dev_ctx.read_reg = lsm6dsox_read;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <lsm6dsox_activity_init+0x3c>)
 8000f8a:	607b      	str	r3, [r7, #4]
 dev_ctx.mdelay = lsm6dsox_delay;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <lsm6dsox_activity_init+0x40>)
 8000f8e:	60bb      	str	r3, [r7, #8]
 dev_ctx.handle = &hi2c3;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <lsm6dsox_activity_init+0x44>)
 8000f92:	60fb      	str	r3, [r7, #12]
 /* Wait Boot Time */
lsm6dsox_delay(BOOT_TIME);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f000 f878 	bl	800108a <lsm6dsox_delay>
 /* Check device ID */
 lsm6dsox_device_id_get(&dev_ctx, &dummy);
 8000f9a:	f107 0217 	add.w	r2, r7, #23
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff48 	bl	8000e38 <lsm6dsox_device_id_get>
// lsm6dsox_act_mode_set(&dev_ctx, LSM6DSOX_XL_12Hz5_GY_PD);
// /* Enable interrupt generation on Inactivity INT1 pin */
// lsm6dsox_pin_int1_route_get(&dev_ctx, &int1_route);
// int1_route.sleep_change = PROPERTY_ENABLE;
// lsm6dsox_pin_int1_route_set(&dev_ctx, int1_route);
}
 8000fa8:	bf00      	nop
 8000faa:	3724      	adds	r7, #36	@ 0x24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	08000fc1 	.word	0x08000fc1
 8000fb4:	08001021 	.word	0x08001021
 8000fb8:	0800108b 	.word	0x0800108b
 8000fbc:	20000230 	.word	0x20000230

08000fc0 <lsm6dsox_write>:
* @param  bufp      pointer to data to write in register reg
* @param  len       number of consecutive register to write
*
*/
static int32_t lsm6dsox_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	72fb      	strb	r3, [r7, #11]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	813b      	strh	r3, [r7, #8]
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f000 fdcb 	bl	8001b78 <HAL_GPIO_WritePin>
 HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, &reg, 1, 1000);
 8000fe2:	f107 020b 	add.w	r2, r7, #11
 8000fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	21d5      	movs	r1, #213	@ 0xd5
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f000 fdd9 	bl	8001ba8 <HAL_I2C_Master_Transmit>
 HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, (uint8_t*) bufp, len, 1000);
 8000ff6:	893b      	ldrh	r3, [r7, #8]
 8000ff8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	21d5      	movs	r1, #213	@ 0xd5
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 fdd0 	bl	8001ba8 <HAL_I2C_Master_Transmit>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800100e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001012:	f000 fdb1 	bl	8001b78 <HAL_GPIO_WritePin>
 return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <lsm6dsox_read>:
* @param  bufp      pointer to buffer that store the data read
* @param  len       number of consecutive register to read
*
*/
static int32_t lsm6dsox_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	461a      	mov	r2, r3
 800102c:	460b      	mov	r3, r1
 800102e:	72fb      	strb	r3, [r7, #11]
 8001030:	4613      	mov	r3, r2
 8001032:	813b      	strh	r3, [r7, #8]
 reg |= 0x80;
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72fb      	strb	r3, [r7, #11]
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f000 fd96 	bl	8001b78 <HAL_GPIO_WritePin>
 HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, &reg, 1, 1000);
 800104c:	f107 020b 	add.w	r2, r7, #11
 8001050:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	21d5      	movs	r1, #213	@ 0xd5
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 fda4 	bl	8001ba8 <HAL_I2C_Master_Transmit>
 HAL_I2C_Master_Receive(handle, LSM6DSOX_I2C_ADD_L, bufp, len, 1000);
 8001060:	893b      	ldrh	r3, [r7, #8]
 8001062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001066:	9200      	str	r2, [sp, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	21d5      	movs	r1, #213	@ 0xd5
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 feb3 	bl	8001dd8 <HAL_I2C_Master_Receive>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107c:	f000 fd7c 	bl	8001b78 <HAL_GPIO_WritePin>
 return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lsm6dsox_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void lsm6dsox_delay(uint32_t ms)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fae0 	bl	8001658 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09a      	sub	sp, #104	@ 0x68
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2248      	movs	r2, #72	@ 0x48
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f874 	bl	800419c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <SystemClock_Config+0xa0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <SystemClock_Config+0xa0>)
 80010d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <SystemClock_Config+0xa0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010e2:	2320      	movs	r3, #32
 80010e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e6:	2301      	movs	r3, #1
 80010e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ee:	2360      	movs	r3, #96	@ 0x60
 80010f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fc98 	bl	8002a30 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001106:	f000 f842 	bl	800118e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800110a:	234f      	movs	r3, #79	@ 0x4f
 800110c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f803 	bl	8003134 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001134:	f000 f82b 	bl	800118e <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3768      	adds	r7, #104	@ 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58000400 	.word	0x58000400

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fe7e 	bl	8000e5a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001166:	f000 fd07 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f000 fb99 	bl	80018b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001192:	b672      	cpsid	i
}
 8001194:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <Error_Handler+0x8>

0800119a <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011e4:	d101      	bne.n	80011ea <LL_RCC_HSE_IsReady+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_RCC_HSE_IsReady+0x1a>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_AHB2_GRP1_EnableClock>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001200:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001210:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4313      	orrs	r3, r2
 800123a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001260:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001262:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4313      	orrs	r3, r2
 800126a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800126c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001270:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001278:	68fb      	ldr	r3, [r7, #12]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001290:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a8:	68fb      	ldr	r3, [r7, #12]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	@ 0x58
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2238      	movs	r2, #56	@ 0x38
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ff5b 	bl	800419c <memset>
  if(huart->Instance==USART1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <HAL_UART_MspInit+0xa0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d133      	bne.n	8001358 <HAL_UART_MspInit+0x98>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80012f8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fa96 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800130a:	f7ff ff40 	bl	800118e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001312:	f7ff ff9f 	bl	8001254 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2002      	movs	r0, #2
 8001318:	f7ff ff6c 	bl	80011f4 <LL_AHB2_GRP1_EnableClock>
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    PB3     ------> USART1_RTS
    */
    /** Configure PB7 as USART1_RX, PB6 as USART1_TX */
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 800131c:	23c0      	movs	r3, #192	@ 0xc0
 800131e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800132c:	2307      	movs	r3, #7
 800132e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	@ (8001364 <HAL_UART_MspInit+0xa4>)
 8001338:	f000 fabe 	bl	80018b8 <HAL_GPIO_Init>

    /** Configure PB3 as a General-Purpose Output (Manual RTS Control) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800133c:	2308      	movs	r3, #8
 800133e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Set as output
 8001340:	2301      	movs	r3, #1
 8001342:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	@ (8001364 <HAL_UART_MspInit+0xa4>)
 8001354:	f000 fab0 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3758      	adds	r7, #88	@ 0x58
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40013800 	.word	0x40013800
 8001364:	48000400 	.word	0x48000400

08001368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2238      	movs	r2, #56	@ 0x38
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f002 ff07 	bl	800419c <memset>
  if(hi2c->Instance==I2C3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1f      	ldr	r2, [pc, #124]	@ (8001410 <HAL_I2C_MspInit+0xa8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d136      	bne.n	8001406 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */
  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_I2C_MspInit+0xac>)
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fa42 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013b2:	f7ff feec 	bl	800118e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff ff1c 	bl	80011f4 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PB10     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10;
 80013bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c2:	2312      	movs	r3, #18
 80013c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ce:	2304      	movs	r3, #4
 80013d0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <HAL_I2C_MspInit+0xb0>)
 80013da:	f000 fa6d 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013de:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013e2:	f7ff ff1f 	bl	8001224 <LL_APB1_GRP1_EnableClock>
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2030      	movs	r0, #48	@ 0x30
 80013ec:	f000 fa2f 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80013f0:	2030      	movs	r0, #48	@ 0x30
 80013f2:	f000 fa46 	bl	8001882 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2031      	movs	r0, #49	@ 0x31
 80013fc:	f000 fa27 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001400:	2031      	movs	r0, #49	@ 0x31
 8001402:	f000 fa3e 	bl	8001882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3758      	adds	r7, #88	@ 0x58
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005c00 	.word	0x40005c00
 8001414:	00302000 	.word	0x00302000
 8001418:	48000400 	.word	0x48000400

0800141c <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff ff2d 	bl	8001284 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */
  LL_RCC_HSE_EnableTcxo();
 800142a:	f7ff feb6 	bl	800119a <LL_RCC_HSE_EnableTcxo>

  LL_RCC_HSE_Enable();
 800142e:	f7ff fec2 	bl	80011b6 <LL_RCC_HSE_Enable>

  while (LL_RCC_HSE_IsReady() == 0)
 8001432:	bf00      	nop
 8001434:	f7ff fecd 	bl	80011d2 <LL_RCC_HSE_IsReady>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0fa      	beq.n	8001434 <HAL_SUBGHZ_MspInit+0x18>
  {}
  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 f8c2 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f002 feba 	bl	8004248 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20010000 	.word	0x20010000
 8001500:	00000400 	.word	0x00000400
 8001504:	20000288 	.word	0x20000288
 8001508:	200003d8 	.word	0x200003d8

0800150c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001518:	480d      	ldr	r0, [pc, #52]	@ (8001550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800151c:	f7ff fff6 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001546:	f002 fe85 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fc9f 	bl	8000e8c <main>

0800154e <LoopForever>:

LoopForever:
    b LoopForever
 800154e:	e7fe      	b.n	800154e <LoopForever>
  ldr   r0, =_estack
 8001550:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800155c:	08004d84 	.word	0x08004d84
  ldr r2, =_sbss
 8001560:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001564:	200003d8 	.word	0x200003d8

08001568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001576:	2003      	movs	r0, #3
 8001578:	f000 f95e 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800157c:	f001 ff9e 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8001580:	4603      	mov	r3, r0
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_Init+0x3c>)
 8001584:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f810 	bl	80015ac <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e001      	b.n	800159c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001598:	f7ff fe8c 	bl	80012b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_InitTick+0x6c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d024      	beq.n	800160a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c0:	f001 ff7c 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_InitTick+0x6c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f960 	bl	800189e <HAL_SYSTICK_Config>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10f      	bne.n	8001604 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d809      	bhi.n	80015fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ea:	2200      	movs	r2, #0
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	f000 f92c 	bl	800184e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_InitTick+0x70>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e007      	b.n	800160e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e004      	b.n	800160e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e001      	b.n	800160e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_IncTick+0x1c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_IncTick+0x20>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a03      	ldr	r2, [pc, #12]	@ (8001640 <HAL_IncTick+0x20>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000008 	.word	0x20000008
 8001640:	2000028c 	.word	0x2000028c

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b02      	ldr	r3, [pc, #8]	@ (8001654 <HAL_GetTick+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	2000028c 	.word	0x2000028c

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff0 	bl	8001644 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffe0 	bl	8001644 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4906      	ldr	r1, [pc, #24]	@ (8001738 <__NVIC_EnableIRQ+0x34>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff90 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff2d 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff44 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff92 	bl	8001790 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff61 	bl	800173c <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff37 	bl	8001704 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa4 	bl	80017f4 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	e140      	b.n	8001b4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8132 	beq.w	8001b44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d005      	beq.n	80018f8 <HAL_GPIO_Init+0x40>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d130      	bne.n	800195a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192e:	2201      	movs	r2, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	f003 0201 	and.w	r2, r3, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b03      	cmp	r3, #3
 8001964:	d017      	beq.n	8001996 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d123      	bne.n	80019ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	6939      	ldr	r1, [r7, #16]
 80019e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0203 	and.w	r2, r3, #3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 808c 	beq.w	8001b44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	2207      	movs	r2, #7
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1bc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_GPIO_Init+0x2b4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1b8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a43      	ldr	r2, [pc, #268]	@ (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1b4>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1be>
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1be>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1be>
 8001a74:	2300      	movs	r3, #0
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a86:	4938      	ldr	r1, [pc, #224]	@ (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a94:	4b37      	ldr	r3, [pc, #220]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae2:	4a24      	ldr	r2, [pc, #144]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001b0e:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f aeb7 	bne.w	80018c8 <HAL_GPIO_Init+0x10>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	58000800 	.word	0x58000800

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	817b      	strh	r3, [r7, #10]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	f040 80fd 	bne.w	8001dc4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x30>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e0f6      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001be0:	f7ff fd30 	bl	8001644 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2319      	movs	r3, #25
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa09 	bl	800200a <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0e1      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2221      	movs	r2, #33	@ 0x21
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	893a      	ldrh	r2, [r7, #8]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2bff      	cmp	r3, #255	@ 0xff
 8001c32:	d906      	bls.n	8001c42 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22ff      	movs	r2, #255	@ 0xff
 8001c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e007      	b.n	8001c52 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d024      	beq.n	8001ca4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd0 <HAL_I2C_Master_Transmit+0x228>)
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fc03 	bl	80024a8 <I2C_TransferConfig>
 8001ca2:	e066      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	8979      	ldrh	r1, [r7, #10]
 8001cac:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <HAL_I2C_Master_Transmit+0x228>)
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fbf8 	bl	80024a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001cb8:	e05b      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	6a39      	ldr	r1, [r7, #32]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f9fc 	bl	80020bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07b      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d034      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x1ca>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d130      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2200      	movs	r2, #0
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f975 	bl	800200a <I2C_WaitOnFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e04d      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2bff      	cmp	r3, #255	@ 0xff
 8001d32:	d90e      	bls.n	8001d52 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	22ff      	movs	r2, #255	@ 0xff
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fbac 	bl	80024a8 <I2C_TransferConfig>
 8001d50:	e00f      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	8979      	ldrh	r1, [r7, #10]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fb9b 	bl	80024a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d19e      	bne.n	8001cba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f9e2 	bl	800214a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e01a      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2220      	movs	r2, #32
 8001d96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_I2C_Master_Transmit+0x22c>)
 8001da4:	400b      	ands	r3, r1
 8001da6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	80002000 	.word	0x80002000
 8001dd4:	fe00e800 	.word	0xfe00e800

08001dd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	461a      	mov	r2, r3
 8001de4:	460b      	mov	r3, r1
 8001de6:	817b      	strh	r3, [r7, #10]
 8001de8:	4613      	mov	r3, r2
 8001dea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	f040 80db 	bne.w	8001fb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_Master_Receive+0x30>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0d4      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e10:	f7ff fc18 	bl	8001644 <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2319      	movs	r3, #25
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f8f1 	bl	800200a <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0bf      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2222      	movs	r2, #34	@ 0x22
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	893a      	ldrh	r2, [r7, #8]
 8001e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2bff      	cmp	r3, #255	@ 0xff
 8001e62:	d90e      	bls.n	8001e82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	22ff      	movs	r2, #255	@ 0xff
 8001e68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	8979      	ldrh	r1, [r7, #10]
 8001e72:	4b52      	ldr	r3, [pc, #328]	@ (8001fbc <HAL_I2C_Master_Receive+0x1e4>)
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fb14 	bl	80024a8 <I2C_TransferConfig>
 8001e80:	e06d      	b.n	8001f5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	8979      	ldrh	r1, [r7, #10]
 8001e94:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <HAL_I2C_Master_Receive+0x1e4>)
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fb03 	bl	80024a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001ea2:	e05c      	b.n	8001f5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	6a39      	ldr	r1, [r7, #32]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f991 	bl	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e07c      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d034      	beq.n	8001f5e <HAL_I2C_Master_Receive+0x186>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d130      	bne.n	8001f5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f87f 	bl	800200a <I2C_WaitOnFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e04d      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2bff      	cmp	r3, #255	@ 0xff
 8001f1e:	d90e      	bls.n	8001f3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	22ff      	movs	r2, #255	@ 0xff
 8001f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	8979      	ldrh	r1, [r7, #10]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fab6 	bl	80024a8 <I2C_TransferConfig>
 8001f3c:	e00f      	b.n	8001f5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	8979      	ldrh	r1, [r7, #10]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 faa5 	bl	80024a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d19d      	bne.n	8001ea4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	6a39      	ldr	r1, [r7, #32]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f8ec 	bl	800214a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01a      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2220      	movs	r2, #32
 8001f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_I2C_Master_Receive+0x1e8>)
 8001f90:	400b      	ands	r3, r1
 8001f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	80002400 	.word	0x80002400
 8001fc0:	fe00e800 	.word	0xfe00e800

08001fc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d103      	bne.n	8001fe2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d007      	beq.n	8002000 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	619a      	str	r2, [r3, #24]
  }
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800201a:	e03b      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f961 	bl	80022e8 <I2C_IsErrorOccurred>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e041      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d02d      	beq.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7ff fb04 	bl	8001644 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <I2C_WaitOnFlagUntilTimeout+0x44>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d122      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	429a      	cmp	r2, r3
 800206a:	d113      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e00f      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d0b4      	beq.n	800201c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c8:	e033      	b.n	8002132 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f90a 	bl	80022e8 <I2C_IsErrorOccurred>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e031      	b.n	8002142 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d025      	beq.n	8002132 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff faad 	bl	8001644 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11a      	bne.n	8002132 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d013      	beq.n	8002132 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e007      	b.n	8002142 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d1c4      	bne.n	80020ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002156:	e02f      	b.n	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f8c3 	bl	80022e8 <I2C_IsErrorOccurred>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e02d      	b.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216c:	f7ff fa6a 	bl	8001644 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	d302      	bcc.n	8002182 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11a      	bne.n	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b20      	cmp	r3, #32
 800218e:	d013      	beq.n	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d1c8      	bne.n	8002158 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80021e0:	e071      	b.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f87e 	bl	80022e8 <I2C_IsErrorOccurred>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b20      	cmp	r3, #32
 8002202:	d13b      	bne.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d138      	bne.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d105      	bne.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d121      	bne.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2204      	movs	r2, #4
 800223e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002254:	400b      	ands	r3, r1
 8002256:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	75fb      	strb	r3, [r7, #23]
 8002274:	e002      	b.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800227c:	f7ff f9e2 	bl	8001644 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d302      	bcc.n	8002292 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00f      	beq.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d002      	beq.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d083      	beq.n	80021e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d068      	beq.n	80023e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2210      	movs	r2, #16
 800231a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800231c:	e049      	b.n	80023b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d045      	beq.n	80023b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff f98d 	bl	8001644 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_IsErrorOccurred+0x54>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d13a      	bne.n	80023b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800234e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800235a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800235e:	d121      	bne.n	80023a4 <I2C_IsErrorOccurred+0xbc>
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002366:	d01d      	beq.n	80023a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	2b20      	cmp	r3, #32
 800236c:	d01a      	beq.n	80023a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800237c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800237e:	f7ff f961 	bl	8001644 <HAL_GetTick>
 8002382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002384:	e00e      	b.n	80023a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002386:	f7ff f95d 	bl	8001644 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b19      	cmp	r3, #25
 8002392:	d907      	bls.n	80023a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f043 0320 	orr.w	r3, r3, #32
 800239a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023a2:	e006      	b.n	80023b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d1e9      	bne.n	8002386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d003      	beq.n	80023c8 <I2C_IsErrorOccurred+0xe0>
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0aa      	beq.n	800231e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800242a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff fdb1 	bl	8001fc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <I2C_IsErrorOccurred+0x1bc>)
 800246e:	400b      	ands	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800249a:	4618      	mov	r0, r3
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	fe00e800 	.word	0xfe00e800

080024a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	4613      	mov	r3, r2
 80024b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024c0:	7a7b      	ldrb	r3, [r7, #9]
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <I2C_TransferConfig+0x5c>)
 80024e8:	430b      	orrs	r3, r1
 80024ea:	43db      	mvns	r3, r3
 80024ec:	ea02 0103 	and.w	r1, r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	03ff63ff 	.word	0x03ff63ff

08002508 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <HAL_PWR_EnableBkUpAccess+0x18>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a03      	ldr	r2, [pc, #12]	@ (8002520 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	58000400 	.word	0x58000400

08002524 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_PWREx_GetVoltageRange+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	58000400 	.word	0x58000400

0800253c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800254c:	d101      	bne.n	8002552 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	58000400 	.word	0x58000400

08002560 <LL_RCC_HSE_EnableTcxo>:
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800256e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <LL_RCC_HSE_DisableTcxo>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800258a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025aa:	d101      	bne.n	80025b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_HSE_Enable>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_HSE_Disable>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_HSE_IsReady>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002604:	d101      	bne.n	800260a <LL_RCC_HSE_IsReady+0x18>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_RCC_HSE_IsReady+0x1a>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800263e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265e:	d101      	bne.n	8002664 <LL_RCC_HSI_IsReady+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_RCC_HSI_IsReady+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	061b      	lsls	r3, r3, #24
 8002684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d101      	bne.n	80026ae <LL_RCC_LSE_IsReady+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_RCC_LSE_IsReady+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d101      	bne.n	8002710 <LL_RCC_LSI_IsReady+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_RCC_LSI_IsReady+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6013      	str	r3, [r2, #0]
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6013      	str	r3, [r2, #0]
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b02      	cmp	r3, #2
 8002762:	d101      	bne.n	8002768 <LL_RCC_MSI_IsReady+0x16>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_RCC_MSI_IsReady+0x18>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b08      	cmp	r3, #8
 8002782:	d101      	bne.n	8002788 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800285a:	f023 020f 	bic.w	r2, r3, #15
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002904:	6013      	str	r3, [r2, #0]
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002920:	6013      	str	r3, [r2, #0]
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800293c:	d101      	bne.n	8002942 <LL_RCC_PLL_IsReady+0x18>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_RCC_PLL_IsReady+0x1a>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0303 	and.w	r3, r3, #3
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b8:	d101      	bne.n	80029be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d101      	bne.n	80029e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029fe:	d101      	bne.n	8002a04 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a20:	d101      	bne.n	8002a26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e36f      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	f7ff fee4 	bl	800280e <LL_RCC_GetSysClkSource>
 8002a46:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a48:	f7ff ffa2 	bl	8002990 <LL_RCC_PLL_GetMainSource>
 8002a4c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80c4 	beq.w	8002be4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x3e>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d176      	bne.n	8002b56 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d173      	bne.n	8002b56 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e353      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x68>
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a96:	e006      	b.n	8002aa6 <HAL_RCC_OscConfig+0x76>
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d222      	bcs.n	8002af0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fd18 	bl	80034e4 <RCC_SetFlashLatencyFromMSIRange>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e331      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe69 	bl	80027c0 <LL_RCC_MSI_SetCalibTrimming>
 8002aee:	e021      	b.n	8002b34 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002afa:	f043 0308 	orr.w	r3, r3, #8
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe50 	bl	80027c0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fcdd 	bl	80034e4 <RCC_SetFlashLatencyFromMSIRange>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e2f6      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b34:	f000 fcc2 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4aa7      	ldr	r2, [pc, #668]	@ (8002dd8 <HAL_RCC_OscConfig+0x3a8>)
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002b3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002ddc <HAL_RCC_OscConfig+0x3ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fd32 	bl	80015ac <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d047      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	e2e5      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5e:	f7ff fddc 	bl	800271a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fd6f 	bl	8001644 <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6a:	f7fe fd6b 	bl	8001644 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e2d2      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b7c:	f7ff fde9 	bl	8002752 <LL_RCC_MSI_IsReady>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f1      	beq.n	8002b6a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fe05 	bl	80027c0 <LL_RCC_MSI_SetCalibTrimming>
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb8:	f7ff fdbd 	bl	8002736 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fd42 	bl	8001644 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fd3e 	bl	8001644 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e2a5      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002bd6:	f7ff fdbc 	bl	8002752 <LL_RCC_MSI_IsReady>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f1      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x194>
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002be2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d058      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d2>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d108      	bne.n	8002c0e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d14b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e289      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_OscConfig+0x204>
 8002c2e:	f7ff fcc4 	bl	80025ba <LL_RCC_HSE_Enable>
 8002c32:	e00d      	b.n	8002c50 <HAL_RCC_OscConfig+0x220>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002c3c:	d104      	bne.n	8002c48 <HAL_RCC_OscConfig+0x218>
 8002c3e:	f7ff fc8f 	bl	8002560 <LL_RCC_HSE_EnableTcxo>
 8002c42:	f7ff fcba 	bl	80025ba <LL_RCC_HSE_Enable>
 8002c46:	e003      	b.n	8002c50 <HAL_RCC_OscConfig+0x220>
 8002c48:	f7ff fcc5 	bl	80025d6 <LL_RCC_HSE_Disable>
 8002c4c:	f7ff fc96 	bl	800257c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fcf4 	bl	8001644 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fcf0 	bl	8001644 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e257      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c72:	f7ff fcbe 	bl	80025f2 <LL_RCC_HSE_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f1      	beq.n	8002c60 <HAL_RCC_OscConfig+0x230>
 8002c7c:	e011      	b.n	8002ca2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fce1 	bl	8001644 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c86:	f7fe fcdd 	bl	8001644 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	@ 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e244      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c98:	f7ff fcab 	bl	80025f2 <LL_RCC_HSE_IsReady>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f1      	bne.n	8002c86 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d046      	beq.n	8002d3c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x290>
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e22a      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fccc 	bl	800266e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cd6:	e031      	b.n	8002d3c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d019      	beq.n	8002d14 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	f7ff fc98 	bl	8002614 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fcae 	bl	8001644 <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fcaa 	bl	8001644 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e211      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cfe:	f7ff fca5 	bl	800264c <LL_RCC_HSI_IsReady>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f1      	beq.n	8002cec <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fcae 	bl	800266e <LL_RCC_HSI_SetCalibTrimming>
 8002d12:	e013      	b.n	8002d3c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d14:	f7ff fc8c 	bl	8002630 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fc94 	bl	8001644 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe fc90 	bl	8001644 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1f7      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d32:	f7ff fc8b 	bl	800264c <LL_RCC_HSI_IsReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f1      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d06e      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d056      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d58:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d031      	beq.n	8002dcc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e1d0      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d8a:	f7ff fca5 	bl	80026d8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d8e:	f7fe fc59 	bl	8001644 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe fc55 	bl	8001644 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b11      	cmp	r3, #17
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1bc      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002da8:	f7ff fca6 	bl	80026f8 <LL_RCC_LSI_IsReady>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f1      	bne.n	8002d96 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	f023 0210 	bic.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	f7ff fc74 	bl	80026b8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fc38 	bl	8001644 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002dd6:	e00c      	b.n	8002df2 <HAL_RCC_OscConfig+0x3c2>
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fc30 	bl	8001644 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b11      	cmp	r3, #17
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e197      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002df2:	f7ff fc81 	bl	80026f8 <LL_RCC_LSI_IsReady>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f1      	beq.n	8002de0 <HAL_RCC_OscConfig+0x3b0>
 8002dfc:	e013      	b.n	8002e26 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	f7ff fc6b 	bl	80026d8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fc1f 	bl	8001644 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fc1b 	bl	8001644 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b11      	cmp	r3, #17
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e182      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e1c:	f7ff fc6c 	bl	80026f8 <LL_RCC_LSI_IsReady>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f1      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80d8 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e34:	f7ff fb82 	bl	800253c <LL_PWR_IsEnabledBkUpAccess>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e3e:	f7ff fb63 	bl	8002508 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fbff 	bl	8001644 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe fbfb 	bl	8001644 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e162      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e5c:	f7ff fb6e 	bl	800253c <LL_PWR_IsEnabledBkUpAccess>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f1      	beq.n	8002e4a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d07b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b85      	cmp	r3, #133	@ 0x85
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fbd7 	bl	8001644 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fbc9 	bl	8001644 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e12e      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ec4:	f7ff fbe7 	bl	8002696 <LL_RCC_LSE_IsReady>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0ef      	beq.n	8002eae <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b81      	cmp	r3, #129	@ 0x81
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b85      	cmp	r3, #133	@ 0x85
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe fbb1 	bl	8001644 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fba3 	bl	8001644 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e108      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ec      	beq.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f20:	e060      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fb8f 	bl	8001644 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fb81 	bl	8001644 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0e6      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ec      	bne.n	8002f3e <HAL_RCC_OscConfig+0x50e>
 8002f64:	e03e      	b.n	8002fe4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fb6d 	bl	8001644 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe fb5f 	bl	8001644 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0c4      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ec      	bne.n	8002f82 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fb4c 	bl	8001644 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fb3e 	bl	8001644 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0a3      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fda:	f7ff fb5c 	bl	8002696 <LL_RCC_LSE_IsReady>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ef      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8099 	beq.w	8003120 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d06c      	beq.n	80030ce <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d14b      	bne.n	8003094 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	f7ff fc87 	bl	800290e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fb20 	bl	8001644 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fb1c 	bl	8001644 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e083      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800301a:	f7ff fc86 	bl	800292a <LL_RCC_PLL_IsReady>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f1      	bne.n	8003008 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b40      	ldr	r3, [pc, #256]	@ (800312c <HAL_RCC_OscConfig+0x6fc>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800303c:	0212      	lsls	r2, r2, #8
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003050:	430a      	orrs	r2, r1
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003056:	4313      	orrs	r3, r2
 8003058:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305a:	f7ff fc4a 	bl	80028f2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fae9 	bl	8001644 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fae5 	bl	8001644 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b0a      	cmp	r3, #10
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e04c      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003088:	f7ff fc4f 	bl	800292a <LL_RCC_PLL_IsReady>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f1      	beq.n	8003076 <HAL_RCC_OscConfig+0x646>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	f7ff fc3b 	bl	800290e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe fad4 	bl	8001644 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe fad0 	bl	8001644 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b0a      	cmp	r3, #10
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e037      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030b2:	f7ff fc3a 	bl	800292a <LL_RCC_PLL_IsReady>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f1      	bne.n	80030a0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_RCC_OscConfig+0x700>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60cb      	str	r3, [r1, #12]
 80030cc:	e028      	b.n	8003120 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e023      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d115      	bne.n	800311c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d10e      	bne.n	800311c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	11c1808c 	.word	0x11c1808c
 8003130:	eefefffc 	.word	0xeefefffc

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e10f      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b89      	ldr	r3, [pc, #548]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d91b      	bls.n	800318e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b86      	ldr	r3, [pc, #536]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4984      	ldr	r1, [pc, #528]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003166:	f7fe fa6d 	bl	8001644 <HAL_GetTick>
 800316a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316c:	e008      	b.n	8003180 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800316e:	f7fe fa69 	bl	8001644 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0f3      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003180:	4b7b      	ldr	r3, [pc, #492]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d1ef      	bne.n	800316e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d016      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fb40 	bl	8002824 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fa4e 	bl	8001644 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ac:	f7fe fa4a 	bl	8001644 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0d4      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031be:	f7ff fbf2 	bl	80029a6 <LL_RCC_IsActiveFlag_HPRE>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f1      	beq.n	80031ac <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d016      	beq.n	8003202 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fb36 	bl	800284a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031de:	f7fe fa31 	bl	8001644 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031e6:	f7fe fa2d 	bl	8001644 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0b7      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031f8:	f7ff fbe6 	bl	80029c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f1      	beq.n	80031e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fb2f 	bl	8002876 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003218:	f7fe fa14 	bl	8001644 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003220:	f7fe fa10 	bl	8001644 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e09a      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003232:	f7ff fbdb 	bl	80029ec <LL_RCC_IsActiveFlag_PPRE1>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f1      	beq.n	8003220 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fb24 	bl	800289c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003254:	f7fe f9f6 	bl	8001644 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800325c:	f7fe f9f2 	bl	8001644 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e07c      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800326e:	f7ff fbce 	bl	8002a0e <LL_RCC_IsActiveFlag_PPRE2>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f1      	beq.n	800325c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d043      	beq.n	800330c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d106      	bne.n	800329a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800328c:	f7ff f9b1 	bl	80025f2 <LL_RCC_HSE_IsReady>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11e      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e066      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032a2:	f7ff fb42 	bl	800292a <LL_RCC_PLL_IsReady>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d113      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e05b      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80032b8:	f7ff fa4b 	bl	8002752 <LL_RCC_MSI_IsReady>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e050      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032c6:	f7ff f9c1 	bl	800264c <LL_RCC_HSI_IsReady>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e049      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fa85 	bl	80027e8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032de:	f7fe f9b1 	bl	8001644 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fe f9ad 	bl	8001644 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	f7ff fa87 	bl	800280e <LL_RCC_GetSysClkSource>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1ec      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b18      	ldr	r3, [pc, #96]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d21b      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4913      	ldr	r1, [pc, #76]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332a:	f7fe f98b 	bl	8001644 <HAL_GetTick>
 800332e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003330:	e008      	b.n	8003344 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003332:	f7fe f987 	bl	8001644 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e011      	b.n	8003368 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_RCC_ClockConfig+0x23c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d1ef      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003352:	f000 f8b3 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003356:	4603      	mov	r3, r0
 8003358:	4a06      	ldr	r2, [pc, #24]	@ (8003374 <HAL_RCC_ClockConfig+0x240>)
 800335a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_RCC_ClockConfig+0x244>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe f923 	bl	80015ac <HAL_InitTick>
 8003366:	4603      	mov	r3, r0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	58004000 	.word	0x58004000
 8003374:	20000000 	.word	0x20000000
 8003378:	20000004 	.word	0x20000004

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338a:	f7ff fa40 	bl	800280e <LL_RCC_GetSysClkSource>
 800338e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	f7ff fafe 	bl	8002990 <LL_RCC_PLL_GetMainSource>
 8003394:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d139      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d136      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80033a8:	f7ff f9e3 	bl	8002772 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0x62>
 80033b2:	f7ff f9de 	bl	8002772 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x4e>
 80033bc:	f7ff f9e9 	bl	8002792 <LL_RCC_MSI_GetRange>
 80033c0:	4603      	mov	r3, r0
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	e005      	b.n	80033d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80033ca:	f7ff f9ed 	bl	80027a8 <LL_RCC_MSI_GetRangeAfterStandby>
 80033ce:	4603      	mov	r3, r0
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	4a36      	ldr	r2, [pc, #216]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80033d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033dc:	e014      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x8c>
 80033de:	f7ff f9c8 	bl	8002772 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80033e8:	f7ff f9d3 	bl	8002792 <LL_RCC_MSI_GetRange>
 80033ec:	4603      	mov	r3, r0
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	e005      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x86>
 80033f6:	f7ff f9d7 	bl	80027a8 <LL_RCC_MSI_GetRangeAfterStandby>
 80033fa:	4603      	mov	r3, r0
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	4a2b      	ldr	r2, [pc, #172]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d115      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003414:	e012      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d102      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e00c      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d109      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003428:	f7ff f8b6 	bl	8002598 <LL_RCC_HSE_IsEnabledDiv2>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e001      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003438:	4b1f      	ldr	r3, [pc, #124]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800343a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	f7ff f9e7 	bl	800280e <LL_RCC_GetSysClkSource>
 8003440:	4603      	mov	r3, r0
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d12f      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003446:	f7ff faa3 	bl	8002990 <LL_RCC_PLL_GetMainSource>
 800344a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0xde>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d003      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0xe4>
 8003458:	e00d      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800345a:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e00d      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003460:	f7ff f89a 	bl	8002598 <LL_RCC_HSE_IsEnabledDiv2>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800346a:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800346c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800346e:	e005      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003472:	60fb      	str	r3, [r7, #12]
        break;
 8003474:	e002      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800347c:	f7ff fa66 	bl	800294c <LL_RCC_PLL_GetN>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	fb03 f402 	mul.w	r4, r3, r2
 8003488:	f7ff fa77 	bl	800297a <LL_RCC_PLL_GetDivider>
 800348c:	4603      	mov	r3, r0
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	3301      	adds	r3, #1
 8003492:	fbb4 f4f3 	udiv	r4, r4, r3
 8003496:	f7ff fa65 	bl	8002964 <LL_RCC_PLL_GetR>
 800349a:	4603      	mov	r3, r0
 800349c:	0f5b      	lsrs	r3, r3, #29
 800349e:	3301      	adds	r3, #1
 80034a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80034a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80034a6:	697b      	ldr	r3, [r7, #20]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	08004d00 	.word	0x08004d00
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	01e84800 	.word	0x01e84800

080034bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b598      	push	{r3, r4, r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80034c0:	f7ff ff5c 	bl	800337c <HAL_RCC_GetSysClockFreq>
 80034c4:	4604      	mov	r4, r0
 80034c6:	f7ff f9fc 	bl	80028c2 <LL_RCC_GetAHBPrescaler>
 80034ca:	4603      	mov	r3, r0
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a03      	ldr	r2, [pc, #12]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd98      	pop	{r3, r4, r7, pc}
 80034e0:	08004cc0 	.word	0x08004cc0

080034e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a10      	ldr	r2, [pc, #64]	@ (8003538 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80034fc:	f7ff f9ec 	bl	80028d8 <LL_RCC_GetAHB3Prescaler>
 8003500:	4603      	mov	r3, r0
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	4a0c      	ldr	r2, [pc, #48]	@ (800353c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9c      	lsrs	r4, r3, #18
 8003520:	f7ff f800 	bl	8002524 <HAL_PWREx_GetVoltageRange>
 8003524:	4603      	mov	r3, r0
 8003526:	4619      	mov	r1, r3
 8003528:	4620      	mov	r0, r4
 800352a:	f000 f80b 	bl	8003544 <RCC_SetFlashLatency>
 800352e:	4603      	mov	r3, r0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	08004d00 	.word	0x08004d00
 800353c:	08004cc0 	.word	0x08004cc0
 8003540:	431bde83 	.word	0x431bde83

08003544 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	@ 0x38
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800354e:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <RCC_SetFlashLatency+0xf4>)
 8003550:	f107 0320 	add.w	r3, r7, #32
 8003554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003558:	6018      	str	r0, [r3, #0]
 800355a:	3304      	adds	r3, #4
 800355c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800355e:	4a37      	ldr	r2, [pc, #220]	@ (800363c <RCC_SetFlashLatency+0xf8>)
 8003560:	f107 0318 	add.w	r3, r7, #24
 8003564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003568:	6018      	str	r0, [r3, #0]
 800356a:	3304      	adds	r3, #4
 800356c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800356e:	4a34      	ldr	r2, [pc, #208]	@ (8003640 <RCC_SetFlashLatency+0xfc>)
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	ca07      	ldmia	r2, {r0, r1, r2}
 8003576:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003584:	d11b      	bne.n	80035be <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003586:	2300      	movs	r3, #0
 8003588:	633b      	str	r3, [r7, #48]	@ 0x30
 800358a:	e014      	b.n	80035b6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	3338      	adds	r3, #56	@ 0x38
 8003592:	443b      	add	r3, r7
 8003594:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4293      	cmp	r3, r2
 800359e:	d807      	bhi.n	80035b0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	3338      	adds	r3, #56	@ 0x38
 80035a6:	443b      	add	r3, r7
 80035a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035ae:	e021      	b.n	80035f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b2:	3301      	adds	r3, #1
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d9e7      	bls.n	800358c <RCC_SetFlashLatency+0x48>
 80035bc:	e01a      	b.n	80035f4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c2:	e014      	b.n	80035ee <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80035c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	3338      	adds	r3, #56	@ 0x38
 80035ca:	443b      	add	r3, r7
 80035cc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3338      	adds	r3, #56	@ 0x38
 80035de:	443b      	add	r3, r7
 80035e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035e6:	e005      	b.n	80035f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	3301      	adds	r3, #1
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d9e7      	bls.n	80035c4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f4:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <RCC_SetFlashLatency+0x100>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 0207 	bic.w	r2, r3, #7
 80035fc:	4911      	ldr	r1, [pc, #68]	@ (8003644 <RCC_SetFlashLatency+0x100>)
 80035fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003604:	f7fe f81e 	bl	8001644 <HAL_GetTick>
 8003608:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800360a:	e008      	b.n	800361e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800360c:	f7fe f81a 	bl	8001644 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e007      	b.n	800362e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <RCC_SetFlashLatency+0x100>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003628:	429a      	cmp	r2, r3
 800362a:	d1ef      	bne.n	800360c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3738      	adds	r7, #56	@ 0x38
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	08004ca4 	.word	0x08004ca4
 800363c:	08004cac 	.word	0x08004cac
 8003640:	08004cb4 	.word	0x08004cb4
 8003644:	58004000 	.word	0x58004000

08003648 <LL_RCC_LSE_IsReady>:
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d101      	bne.n	8003660 <LL_RCC_LSE_IsReady+0x18>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <LL_RCC_LSE_IsReady+0x1a>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <LL_RCC_SetUSARTClockSource>:
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003676:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	43db      	mvns	r3, r3
 8003680:	401a      	ands	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b29b      	uxth	r3, r3
 8003686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <LL_RCC_SetI2SClockSource>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <LL_RCC_SetLPUARTClockSource>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <LL_RCC_SetI2CClockSource>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003706:	43db      	mvns	r3, r3
 8003708:	401a      	ands	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003712:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <LL_RCC_SetLPTIMClockSource>:
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003732:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <LL_RCC_SetRNGClockSource>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800376c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <LL_RCC_SetADCClockSource>:
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <LL_RCC_SetRTCClockSource>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_GetRTCClockSource>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <LL_RCC_ForceBackupDomainReset>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <LL_RCC_ReleaseBackupDomainReset>:
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
	...

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800383c:	2300      	movs	r3, #0
 800383e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003840:	2300      	movs	r3, #0
 8003842:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d058      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003850:	f7fe fe5a 	bl	8002508 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003854:	f7fd fef6 	bl	8001644 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385c:	f7fd fef2 	bl	8001644 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d902      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	74fb      	strb	r3, [r7, #19]
        break;
 800386e:	e006      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003870:	4b7b      	ldr	r3, [pc, #492]	@ (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800387c:	d1ee      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d13c      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003884:	f7ff ffa7 	bl	80037d6 <LL_RCC_GetRTCClockSource>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	429a      	cmp	r2, r3
 8003890:	d00f      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a0:	f7ff ffa5 	bl	80037ee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a4:	f7ff ffb3 	bl	800380e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d014      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fec2 	bl	8001644 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80038c2:	e00b      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fd febe 	bl	8001644 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d902      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	74fb      	strb	r3, [r7, #19]
            break;
 80038da:	e004      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80038dc:	f7ff feb4 	bl	8003648 <LL_RCC_LSE_IsReady>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d1ee      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff5b 	bl	80037ac <LL_RCC_SetRTCClockSource>
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	74bb      	strb	r3, [r7, #18]
 80038fc:	e001      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fea9 	bl	800366a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fe9e 	bl	800366a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fec0 	bl	80036c4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fee6 	bl	8003726 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fedb 	bl	8003726 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fed0 	bl	8003726 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fea9 	bl	80036ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fe9e 	bl	80036ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fe93 	bl	80036ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d011      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe5e 	bl	800369a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e6:	d107      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fea5 	bl	8003758 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fea3 	bl	8003782 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a44:	d107      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003a56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	58000400 	.word	0x58000400

08003a64 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a74:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	58000400 	.word	0x58000400

08003a8c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a96:	4a04      	ldr	r2, [pc, #16]	@ (8003aa8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	58000400 	.word	0x58000400

08003aac <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	4a04      	ldr	r2, [pc, #16]	@ (8003ac8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003ab8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	58000400 	.word	0x58000400

08003acc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ad6:	619a      	str	r2, [r3, #24]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	58000400 	.word	0x58000400

08003ae4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d101      	bne.n	8003af8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	58000400 	.word	0x58000400

08003b08 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d101      	bne.n	8003b1c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58000400 	.word	0x58000400

08003b2c <LL_RCC_RF_DisableReset>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_IsRFUnderReset>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b60:	d101      	bne.n	8003b66 <LL_RCC_IsRFUnderReset+0x1a>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_RCC_IsRFUnderReset+0x1c>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <LL_EXTI_EnableIT_32_63+0x24>)
 8003b7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003b7e:	4905      	ldr	r1, [pc, #20]	@ (8003b94 <LL_EXTI_EnableIT_32_63+0x24>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	58000800 	.word	0x58000800

08003b98 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
    return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	e052      	b.n	8003c54 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	799b      	ldrb	r3, [r3, #6]
 8003bb6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SUBGHZ_Init+0x2c>
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d109      	bne.n	8003bd8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fc26 	bl	800141c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003bd0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003bd4:	f7ff ffcc 	bl	8003b70 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d126      	bne.n	8003c2c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003be4:	f7ff ffa2 	bl	8003b2c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003be8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <HAL_SUBGHZ_Init+0xc4>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	0cdb      	lsrs	r3, r3, #19
 8003bf6:	2264      	movs	r2, #100	@ 0x64
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	609a      	str	r2, [r3, #8]
        break;
 8003c0e:	e007      	b.n	8003c20 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003c16:	f7ff ff99 	bl	8003b4c <LL_RCC_IsRFUnderReset>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ee      	bne.n	8003bfe <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c20:	f7ff ff34 	bl	8003a8c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003c24:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c28:	f7ff ff1c 	bl	8003a64 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003c2c:	f7ff ff4e 	bl	8003acc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f870 	bl	8003d20 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	719a      	strb	r2, [r3, #6]

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	72fb      	strb	r3, [r7, #11]
 8003c70:	4613      	mov	r3, r2
 8003c72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	799b      	ldrb	r3, [r3, #6]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d14a      	bne.n	8003d14 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	795b      	ldrb	r3, [r3, #5]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e045      	b.n	8003d16 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f8bb 	bl	8003e0c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	2b84      	cmp	r3, #132	@ 0x84
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
 8003c9e:	2b94      	cmp	r3, #148	@ 0x94
 8003ca0:	d103      	bne.n	8003caa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	711a      	strb	r2, [r3, #4]
 8003ca8:	e002      	b.n	8003cb0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cb0:	f7ff fefc 	bl	8003aac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f851 	bl	8003d60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	82bb      	strh	r3, [r7, #20]
 8003cc2:	e00a      	b.n	8003cda <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003cc4:	8abb      	ldrh	r3, [r7, #20]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f846 	bl	8003d60 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003cd4:	8abb      	ldrh	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	82bb      	strh	r3, [r7, #20]
 8003cda:	8aba      	ldrh	r2, [r7, #20]
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3f0      	bcc.n	8003cc4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ce2:	f7ff fed3 	bl	8003a8c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	2b84      	cmp	r3, #132	@ 0x84
 8003cea:	d002      	beq.n	8003cf2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f8b1 	bl	8003e54 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
 8003cfe:	e001      	b.n	8003d04 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	715a      	strb	r2, [r3, #5]

    return status;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	e000      	b.n	8003d16 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d32:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003d34:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003d3c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003d3e:	4b07      	ldr	r3, [pc, #28]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d40:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003d44:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003d46:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a04      	ldr	r2, [pc, #16]	@ (8003d5c <SUBGHZSPI_Init+0x3c>)
 8003d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d50:	6013      	str	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	58010000 	.word	0x58010000

08003d60 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d70:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <SUBGHZSPI_Transmit+0xa0>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	0cdb      	lsrs	r3, r3, #19
 8003d7e:	2264      	movs	r2, #100	@ 0x64
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	609a      	str	r2, [r3, #8]
      break;
 8003d96:	e008      	b.n	8003daa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <SUBGHZSPI_Transmit+0xa4>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d1ed      	bne.n	8003d86 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003daa:	4b17      	ldr	r3, [pc, #92]	@ (8003e08 <SUBGHZSPI_Transmit+0xa8>)
 8003dac:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <SUBGHZSPI_Transmit+0xa0>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	0cdb      	lsrs	r3, r3, #19
 8003dc2:	2264      	movs	r2, #100	@ 0x64
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	609a      	str	r2, [r3, #8]
      break;
 8003dda:	e008      	b.n	8003dee <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <SUBGHZSPI_Transmit+0xa4>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d1ed      	bne.n	8003dca <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003dee:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <SUBGHZSPI_Transmit+0xa4>)
 8003df0:	68db      	ldr	r3, [r3, #12]

  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000000 	.word	0x20000000
 8003e04:	58010000 	.word	0x58010000
 8003e08:	5801000c 	.word	0x5801000c

08003e0c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	791b      	ldrb	r3, [r3, #4]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d111      	bne.n	8003e40 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <SUBGHZ_CheckDeviceReady+0x44>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e2c:	f7ff fe3e 	bl	8003aac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f9      	bne.n	8003e30 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e3c:	f7ff fe26 	bl	8003a8c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f807 	bl	8003e54 <SUBGHZ_WaitOnBusy>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000000 	.word	0x20000000

08003e54 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003e60:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <SUBGHZ_WaitOnBusy+0x58>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	0d1b      	lsrs	r3, r3, #20
 8003e6e:	2264      	movs	r2, #100	@ 0x64
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003e76:	f7ff fe47 	bl	8003b08 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003e7a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	609a      	str	r2, [r3, #8]
      break;
 8003e8c:	e009      	b.n	8003ea2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003e94:	f7ff fe26 	bl	8003ae4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d0e9      	beq.n	8003e76 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000000 	.word	0x20000000

08003eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d173      	bne.n	8003fb2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_Transmit+0x26>
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e06c      	b.n	8003fb4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2221      	movs	r2, #33	@ 0x21
 8003ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eea:	f7fd fbab 	bl	8001644 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Transmit+0x6c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f24:	e02c      	b.n	8003f80 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	@ 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f843 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e039      	b.n	8003fb4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3302      	adds	r3, #2
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e007      	b.n	8003f6e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1cc      	bne.n	8003f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2140      	movs	r1, #64	@ 0x40
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f810 	bl	8003fbc <UART_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b09c      	sub	sp, #112	@ 0x70
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fcc:	e0af      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	f000 80ab 	beq.w	800412e <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fd fb34 	bl	8001644 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <UART_WaitOnFlagUntilTimeout+0x32>
 8003fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d140      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ffe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004002:	667b      	str	r3, [r7, #100]	@ 0x64
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800400c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800400e:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004012:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800401a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e6      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	663b      	str	r3, [r7, #96]	@ 0x60
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004040:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004042:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e06f      	b.n	8004150 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d057      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x172>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b80      	cmp	r3, #128	@ 0x80
 8004082:	d054      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x172>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d051      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004098:	d149      	bne.n	800412e <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80040b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	613b      	str	r3, [r7, #16]
   return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80040f6:	623a      	str	r2, [r7, #32]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	61bb      	str	r3, [r7, #24]
   return(result);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e010      	b.n	8004150 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	f43f af40 	beq.w	8003fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3770      	adds	r7, #112	@ 0x70
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <siprintf>:
 8004158:	b40e      	push	{r1, r2, r3}
 800415a:	b510      	push	{r4, lr}
 800415c:	b09d      	sub	sp, #116	@ 0x74
 800415e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004160:	9002      	str	r0, [sp, #8]
 8004162:	9006      	str	r0, [sp, #24]
 8004164:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004168:	480a      	ldr	r0, [pc, #40]	@ (8004194 <siprintf+0x3c>)
 800416a:	9107      	str	r1, [sp, #28]
 800416c:	9104      	str	r1, [sp, #16]
 800416e:	490a      	ldr	r1, [pc, #40]	@ (8004198 <siprintf+0x40>)
 8004170:	f853 2b04 	ldr.w	r2, [r3], #4
 8004174:	9105      	str	r1, [sp, #20]
 8004176:	2400      	movs	r4, #0
 8004178:	a902      	add	r1, sp, #8
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004180:	f000 f9f0 	bl	8004564 <_svfiprintf_r>
 8004184:	9b02      	ldr	r3, [sp, #8]
 8004186:	701c      	strb	r4, [r3, #0]
 8004188:	b01d      	add	sp, #116	@ 0x74
 800418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800418e:	b003      	add	sp, #12
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c
 8004198:	ffff0208 	.word	0xffff0208

0800419c <memset>:
 800419c:	4402      	add	r2, r0
 800419e:	4603      	mov	r3, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d100      	bne.n	80041a6 <memset+0xa>
 80041a4:	4770      	bx	lr
 80041a6:	f803 1b01 	strb.w	r1, [r3], #1
 80041aa:	e7f9      	b.n	80041a0 <memset+0x4>

080041ac <strchr>:
 80041ac:	b2c9      	uxtb	r1, r1
 80041ae:	4603      	mov	r3, r0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b6:	b112      	cbz	r2, 80041be <strchr+0x12>
 80041b8:	428a      	cmp	r2, r1
 80041ba:	d1f9      	bne.n	80041b0 <strchr+0x4>
 80041bc:	4770      	bx	lr
 80041be:	2900      	cmp	r1, #0
 80041c0:	bf18      	it	ne
 80041c2:	2000      	movne	r0, #0
 80041c4:	4770      	bx	lr

080041c6 <strncpy>:
 80041c6:	b510      	push	{r4, lr}
 80041c8:	3901      	subs	r1, #1
 80041ca:	4603      	mov	r3, r0
 80041cc:	b132      	cbz	r2, 80041dc <strncpy+0x16>
 80041ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80041d2:	f803 4b01 	strb.w	r4, [r3], #1
 80041d6:	3a01      	subs	r2, #1
 80041d8:	2c00      	cmp	r4, #0
 80041da:	d1f7      	bne.n	80041cc <strncpy+0x6>
 80041dc:	441a      	add	r2, r3
 80041de:	2100      	movs	r1, #0
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d100      	bne.n	80041e6 <strncpy+0x20>
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ea:	e7f9      	b.n	80041e0 <strncpy+0x1a>

080041ec <time>:
 80041ec:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80041ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <time+0x34>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	f04f 36ff 	mov.w	r6, #4294967295
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	f04f 37ff 	mov.w	r7, #4294967295
 80041fc:	2200      	movs	r2, #0
 80041fe:	4669      	mov	r1, sp
 8004200:	e9cd 6700 	strd	r6, r7, [sp]
 8004204:	f000 f80e 	bl	8004224 <_gettimeofday_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	da01      	bge.n	8004210 <time+0x24>
 800420c:	e9cd 6700 	strd	r6, r7, [sp]
 8004210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004214:	b10c      	cbz	r4, 800421a <time+0x2e>
 8004216:	e9c4 0100 	strd	r0, r1, [r4]
 800421a:	b004      	add	sp, #16
 800421c:	bdd0      	pop	{r4, r6, r7, pc}
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <_gettimeofday_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	@ (8004244 <_gettimeofday_r+0x20>)
 8004228:	2300      	movs	r3, #0
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	4611      	mov	r1, r2
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	f000 fc7f 	bl	8004b34 <_gettimeofday>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d102      	bne.n	8004240 <_gettimeofday_r+0x1c>
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	b103      	cbz	r3, 8004240 <_gettimeofday_r+0x1c>
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	200003c8 	.word	0x200003c8

08004248 <__errno>:
 8004248:	4b01      	ldr	r3, [pc, #4]	@ (8004250 <__errno+0x8>)
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2000000c 	.word	0x2000000c

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4d0d      	ldr	r5, [pc, #52]	@ (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	@ (8004290 <__libc_init_array+0x3c>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2600      	movs	r6, #0
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4d0b      	ldr	r5, [pc, #44]	@ (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	@ (8004298 <__libc_init_array+0x44>)
 8004268:	f000 fc6c 	bl	8004b44 <_init>
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2600      	movs	r6, #0
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f855 3b04 	ldr.w	r3, [r5], #4
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f855 3b04 	ldr.w	r3, [r5], #4
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08004d7c 	.word	0x08004d7c
 8004290:	08004d7c 	.word	0x08004d7c
 8004294:	08004d7c 	.word	0x08004d7c
 8004298:	08004d80 	.word	0x08004d80

0800429c <__retarget_lock_acquire_recursive>:
 800429c:	4770      	bx	lr

0800429e <__retarget_lock_release_recursive>:
 800429e:	4770      	bx	lr

080042a0 <memcpy>:
 80042a0:	440a      	add	r2, r1
 80042a2:	4291      	cmp	r1, r2
 80042a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a8:	d100      	bne.n	80042ac <memcpy+0xc>
 80042aa:	4770      	bx	lr
 80042ac:	b510      	push	{r4, lr}
 80042ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b6:	4291      	cmp	r1, r2
 80042b8:	d1f9      	bne.n	80042ae <memcpy+0xe>
 80042ba:	bd10      	pop	{r4, pc}

080042bc <_free_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4605      	mov	r5, r0
 80042c0:	2900      	cmp	r1, #0
 80042c2:	d041      	beq.n	8004348 <_free_r+0x8c>
 80042c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c8:	1f0c      	subs	r4, r1, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	18e4      	addlt	r4, r4, r3
 80042d0:	f000 f8e0 	bl	8004494 <__malloc_lock>
 80042d4:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <_free_r+0x90>)
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	b933      	cbnz	r3, 80042e8 <_free_r+0x2c>
 80042da:	6063      	str	r3, [r4, #4]
 80042dc:	6014      	str	r4, [r2, #0]
 80042de:	4628      	mov	r0, r5
 80042e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e4:	f000 b8dc 	b.w	80044a0 <__malloc_unlock>
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	d908      	bls.n	80042fe <_free_r+0x42>
 80042ec:	6820      	ldr	r0, [r4, #0]
 80042ee:	1821      	adds	r1, r4, r0
 80042f0:	428b      	cmp	r3, r1
 80042f2:	bf01      	itttt	eq
 80042f4:	6819      	ldreq	r1, [r3, #0]
 80042f6:	685b      	ldreq	r3, [r3, #4]
 80042f8:	1809      	addeq	r1, r1, r0
 80042fa:	6021      	streq	r1, [r4, #0]
 80042fc:	e7ed      	b.n	80042da <_free_r+0x1e>
 80042fe:	461a      	mov	r2, r3
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	b10b      	cbz	r3, 8004308 <_free_r+0x4c>
 8004304:	42a3      	cmp	r3, r4
 8004306:	d9fa      	bls.n	80042fe <_free_r+0x42>
 8004308:	6811      	ldr	r1, [r2, #0]
 800430a:	1850      	adds	r0, r2, r1
 800430c:	42a0      	cmp	r0, r4
 800430e:	d10b      	bne.n	8004328 <_free_r+0x6c>
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	4401      	add	r1, r0
 8004314:	1850      	adds	r0, r2, r1
 8004316:	4283      	cmp	r3, r0
 8004318:	6011      	str	r1, [r2, #0]
 800431a:	d1e0      	bne.n	80042de <_free_r+0x22>
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	4408      	add	r0, r1
 8004324:	6010      	str	r0, [r2, #0]
 8004326:	e7da      	b.n	80042de <_free_r+0x22>
 8004328:	d902      	bls.n	8004330 <_free_r+0x74>
 800432a:	230c      	movs	r3, #12
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	e7d6      	b.n	80042de <_free_r+0x22>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	1821      	adds	r1, r4, r0
 8004334:	428b      	cmp	r3, r1
 8004336:	bf04      	itt	eq
 8004338:	6819      	ldreq	r1, [r3, #0]
 800433a:	685b      	ldreq	r3, [r3, #4]
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	bf04      	itt	eq
 8004340:	1809      	addeq	r1, r1, r0
 8004342:	6021      	streq	r1, [r4, #0]
 8004344:	6054      	str	r4, [r2, #4]
 8004346:	e7ca      	b.n	80042de <_free_r+0x22>
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	200003d4 	.word	0x200003d4

08004350 <sbrk_aligned>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	4e0f      	ldr	r6, [pc, #60]	@ (8004390 <sbrk_aligned+0x40>)
 8004354:	460c      	mov	r4, r1
 8004356:	6831      	ldr	r1, [r6, #0]
 8004358:	4605      	mov	r5, r0
 800435a:	b911      	cbnz	r1, 8004362 <sbrk_aligned+0x12>
 800435c:	f000 fba4 	bl	8004aa8 <_sbrk_r>
 8004360:	6030      	str	r0, [r6, #0]
 8004362:	4621      	mov	r1, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f000 fb9f 	bl	8004aa8 <_sbrk_r>
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	d103      	bne.n	8004376 <sbrk_aligned+0x26>
 800436e:	f04f 34ff 	mov.w	r4, #4294967295
 8004372:	4620      	mov	r0, r4
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	1cc4      	adds	r4, r0, #3
 8004378:	f024 0403 	bic.w	r4, r4, #3
 800437c:	42a0      	cmp	r0, r4
 800437e:	d0f8      	beq.n	8004372 <sbrk_aligned+0x22>
 8004380:	1a21      	subs	r1, r4, r0
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fb90 	bl	8004aa8 <_sbrk_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d1f2      	bne.n	8004372 <sbrk_aligned+0x22>
 800438c:	e7ef      	b.n	800436e <sbrk_aligned+0x1e>
 800438e:	bf00      	nop
 8004390:	200003d0 	.word	0x200003d0

08004394 <_malloc_r>:
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	1ccd      	adds	r5, r1, #3
 800439a:	f025 0503 	bic.w	r5, r5, #3
 800439e:	3508      	adds	r5, #8
 80043a0:	2d0c      	cmp	r5, #12
 80043a2:	bf38      	it	cc
 80043a4:	250c      	movcc	r5, #12
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	4606      	mov	r6, r0
 80043aa:	db01      	blt.n	80043b0 <_malloc_r+0x1c>
 80043ac:	42a9      	cmp	r1, r5
 80043ae:	d904      	bls.n	80043ba <_malloc_r+0x26>
 80043b0:	230c      	movs	r3, #12
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	2000      	movs	r0, #0
 80043b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004490 <_malloc_r+0xfc>
 80043be:	f000 f869 	bl	8004494 <__malloc_lock>
 80043c2:	f8d8 3000 	ldr.w	r3, [r8]
 80043c6:	461c      	mov	r4, r3
 80043c8:	bb44      	cbnz	r4, 800441c <_malloc_r+0x88>
 80043ca:	4629      	mov	r1, r5
 80043cc:	4630      	mov	r0, r6
 80043ce:	f7ff ffbf 	bl	8004350 <sbrk_aligned>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	4604      	mov	r4, r0
 80043d6:	d158      	bne.n	800448a <_malloc_r+0xf6>
 80043d8:	f8d8 4000 	ldr.w	r4, [r8]
 80043dc:	4627      	mov	r7, r4
 80043de:	2f00      	cmp	r7, #0
 80043e0:	d143      	bne.n	800446a <_malloc_r+0xd6>
 80043e2:	2c00      	cmp	r4, #0
 80043e4:	d04b      	beq.n	800447e <_malloc_r+0xea>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	4639      	mov	r1, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	eb04 0903 	add.w	r9, r4, r3
 80043f0:	f000 fb5a 	bl	8004aa8 <_sbrk_r>
 80043f4:	4581      	cmp	r9, r0
 80043f6:	d142      	bne.n	800447e <_malloc_r+0xea>
 80043f8:	6821      	ldr	r1, [r4, #0]
 80043fa:	1a6d      	subs	r5, r5, r1
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f7ff ffa6 	bl	8004350 <sbrk_aligned>
 8004404:	3001      	adds	r0, #1
 8004406:	d03a      	beq.n	800447e <_malloc_r+0xea>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	442b      	add	r3, r5
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	f8d8 3000 	ldr.w	r3, [r8]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	bb62      	cbnz	r2, 8004470 <_malloc_r+0xdc>
 8004416:	f8c8 7000 	str.w	r7, [r8]
 800441a:	e00f      	b.n	800443c <_malloc_r+0xa8>
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	1b52      	subs	r2, r2, r5
 8004420:	d420      	bmi.n	8004464 <_malloc_r+0xd0>
 8004422:	2a0b      	cmp	r2, #11
 8004424:	d917      	bls.n	8004456 <_malloc_r+0xc2>
 8004426:	1961      	adds	r1, r4, r5
 8004428:	42a3      	cmp	r3, r4
 800442a:	6025      	str	r5, [r4, #0]
 800442c:	bf18      	it	ne
 800442e:	6059      	strne	r1, [r3, #4]
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	bf08      	it	eq
 8004434:	f8c8 1000 	streq.w	r1, [r8]
 8004438:	5162      	str	r2, [r4, r5]
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f82f 	bl	80044a0 <__malloc_unlock>
 8004442:	f104 000b 	add.w	r0, r4, #11
 8004446:	1d23      	adds	r3, r4, #4
 8004448:	f020 0007 	bic.w	r0, r0, #7
 800444c:	1ac2      	subs	r2, r0, r3
 800444e:	bf1c      	itt	ne
 8004450:	1a1b      	subne	r3, r3, r0
 8004452:	50a3      	strne	r3, [r4, r2]
 8004454:	e7af      	b.n	80043b6 <_malloc_r+0x22>
 8004456:	6862      	ldr	r2, [r4, #4]
 8004458:	42a3      	cmp	r3, r4
 800445a:	bf0c      	ite	eq
 800445c:	f8c8 2000 	streq.w	r2, [r8]
 8004460:	605a      	strne	r2, [r3, #4]
 8004462:	e7eb      	b.n	800443c <_malloc_r+0xa8>
 8004464:	4623      	mov	r3, r4
 8004466:	6864      	ldr	r4, [r4, #4]
 8004468:	e7ae      	b.n	80043c8 <_malloc_r+0x34>
 800446a:	463c      	mov	r4, r7
 800446c:	687f      	ldr	r7, [r7, #4]
 800446e:	e7b6      	b.n	80043de <_malloc_r+0x4a>
 8004470:	461a      	mov	r2, r3
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	42a3      	cmp	r3, r4
 8004476:	d1fb      	bne.n	8004470 <_malloc_r+0xdc>
 8004478:	2300      	movs	r3, #0
 800447a:	6053      	str	r3, [r2, #4]
 800447c:	e7de      	b.n	800443c <_malloc_r+0xa8>
 800447e:	230c      	movs	r3, #12
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	4630      	mov	r0, r6
 8004484:	f000 f80c 	bl	80044a0 <__malloc_unlock>
 8004488:	e794      	b.n	80043b4 <_malloc_r+0x20>
 800448a:	6005      	str	r5, [r0, #0]
 800448c:	e7d6      	b.n	800443c <_malloc_r+0xa8>
 800448e:	bf00      	nop
 8004490:	200003d4 	.word	0x200003d4

08004494 <__malloc_lock>:
 8004494:	4801      	ldr	r0, [pc, #4]	@ (800449c <__malloc_lock+0x8>)
 8004496:	f7ff bf01 	b.w	800429c <__retarget_lock_acquire_recursive>
 800449a:	bf00      	nop
 800449c:	200003cc 	.word	0x200003cc

080044a0 <__malloc_unlock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__malloc_unlock+0x8>)
 80044a2:	f7ff befc 	b.w	800429e <__retarget_lock_release_recursive>
 80044a6:	bf00      	nop
 80044a8:	200003cc 	.word	0x200003cc

080044ac <__ssputs_r>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	688e      	ldr	r6, [r1, #8]
 80044b2:	461f      	mov	r7, r3
 80044b4:	42be      	cmp	r6, r7
 80044b6:	680b      	ldr	r3, [r1, #0]
 80044b8:	4682      	mov	sl, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	d82d      	bhi.n	800451c <__ssputs_r+0x70>
 80044c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044c8:	d026      	beq.n	8004518 <__ssputs_r+0x6c>
 80044ca:	6965      	ldr	r5, [r4, #20]
 80044cc:	6909      	ldr	r1, [r1, #16]
 80044ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d2:	eba3 0901 	sub.w	r9, r3, r1
 80044d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044da:	1c7b      	adds	r3, r7, #1
 80044dc:	444b      	add	r3, r9
 80044de:	106d      	asrs	r5, r5, #1
 80044e0:	429d      	cmp	r5, r3
 80044e2:	bf38      	it	cc
 80044e4:	461d      	movcc	r5, r3
 80044e6:	0553      	lsls	r3, r2, #21
 80044e8:	d527      	bpl.n	800453a <__ssputs_r+0x8e>
 80044ea:	4629      	mov	r1, r5
 80044ec:	f7ff ff52 	bl	8004394 <_malloc_r>
 80044f0:	4606      	mov	r6, r0
 80044f2:	b360      	cbz	r0, 800454e <__ssputs_r+0xa2>
 80044f4:	6921      	ldr	r1, [r4, #16]
 80044f6:	464a      	mov	r2, r9
 80044f8:	f7ff fed2 	bl	80042a0 <memcpy>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	6126      	str	r6, [r4, #16]
 800450a:	6165      	str	r5, [r4, #20]
 800450c:	444e      	add	r6, r9
 800450e:	eba5 0509 	sub.w	r5, r5, r9
 8004512:	6026      	str	r6, [r4, #0]
 8004514:	60a5      	str	r5, [r4, #8]
 8004516:	463e      	mov	r6, r7
 8004518:	42be      	cmp	r6, r7
 800451a:	d900      	bls.n	800451e <__ssputs_r+0x72>
 800451c:	463e      	mov	r6, r7
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	4632      	mov	r2, r6
 8004522:	4641      	mov	r1, r8
 8004524:	f000 faa6 	bl	8004a74 <memmove>
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	1b9b      	subs	r3, r3, r6
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4433      	add	r3, r6
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2000      	movs	r0, #0
 8004536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453a:	462a      	mov	r2, r5
 800453c:	f000 fac4 	bl	8004ac8 <_realloc_r>
 8004540:	4606      	mov	r6, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d1e0      	bne.n	8004508 <__ssputs_r+0x5c>
 8004546:	6921      	ldr	r1, [r4, #16]
 8004548:	4650      	mov	r0, sl
 800454a:	f7ff feb7 	bl	80042bc <_free_r>
 800454e:	230c      	movs	r3, #12
 8004550:	f8ca 3000 	str.w	r3, [sl]
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800455a:	81a3      	strh	r3, [r4, #12]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e7e9      	b.n	8004536 <__ssputs_r+0x8a>
	...

08004564 <_svfiprintf_r>:
 8004564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	4698      	mov	r8, r3
 800456a:	898b      	ldrh	r3, [r1, #12]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	b09d      	sub	sp, #116	@ 0x74
 8004570:	4607      	mov	r7, r0
 8004572:	460d      	mov	r5, r1
 8004574:	4614      	mov	r4, r2
 8004576:	d510      	bpl.n	800459a <_svfiprintf_r+0x36>
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	b973      	cbnz	r3, 800459a <_svfiprintf_r+0x36>
 800457c:	2140      	movs	r1, #64	@ 0x40
 800457e:	f7ff ff09 	bl	8004394 <_malloc_r>
 8004582:	6028      	str	r0, [r5, #0]
 8004584:	6128      	str	r0, [r5, #16]
 8004586:	b930      	cbnz	r0, 8004596 <_svfiprintf_r+0x32>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b01d      	add	sp, #116	@ 0x74
 8004592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004596:	2340      	movs	r3, #64	@ 0x40
 8004598:	616b      	str	r3, [r5, #20]
 800459a:	2300      	movs	r3, #0
 800459c:	9309      	str	r3, [sp, #36]	@ 0x24
 800459e:	2320      	movs	r3, #32
 80045a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a8:	2330      	movs	r3, #48	@ 0x30
 80045aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004748 <_svfiprintf_r+0x1e4>
 80045ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045b2:	f04f 0901 	mov.w	r9, #1
 80045b6:	4623      	mov	r3, r4
 80045b8:	469a      	mov	sl, r3
 80045ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045be:	b10a      	cbz	r2, 80045c4 <_svfiprintf_r+0x60>
 80045c0:	2a25      	cmp	r2, #37	@ 0x25
 80045c2:	d1f9      	bne.n	80045b8 <_svfiprintf_r+0x54>
 80045c4:	ebba 0b04 	subs.w	fp, sl, r4
 80045c8:	d00b      	beq.n	80045e2 <_svfiprintf_r+0x7e>
 80045ca:	465b      	mov	r3, fp
 80045cc:	4622      	mov	r2, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7ff ff6b 	bl	80044ac <__ssputs_r>
 80045d6:	3001      	adds	r0, #1
 80045d8:	f000 80a7 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045de:	445a      	add	r2, fp
 80045e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80045e2:	f89a 3000 	ldrb.w	r3, [sl]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 809f 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f6:	f10a 0a01 	add.w	sl, sl, #1
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004602:	931a      	str	r3, [sp, #104]	@ 0x68
 8004604:	4654      	mov	r4, sl
 8004606:	2205      	movs	r2, #5
 8004608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460c:	484e      	ldr	r0, [pc, #312]	@ (8004748 <_svfiprintf_r+0x1e4>)
 800460e:	f7fb fdbf 	bl	8000190 <memchr>
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	b9d8      	cbnz	r0, 800464e <_svfiprintf_r+0xea>
 8004616:	06d0      	lsls	r0, r2, #27
 8004618:	bf44      	itt	mi
 800461a:	2320      	movmi	r3, #32
 800461c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004620:	0711      	lsls	r1, r2, #28
 8004622:	bf44      	itt	mi
 8004624:	232b      	movmi	r3, #43	@ 0x2b
 8004626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800462a:	f89a 3000 	ldrb.w	r3, [sl]
 800462e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004630:	d015      	beq.n	800465e <_svfiprintf_r+0xfa>
 8004632:	9a07      	ldr	r2, [sp, #28]
 8004634:	4654      	mov	r4, sl
 8004636:	2000      	movs	r0, #0
 8004638:	f04f 0c0a 	mov.w	ip, #10
 800463c:	4621      	mov	r1, r4
 800463e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004642:	3b30      	subs	r3, #48	@ 0x30
 8004644:	2b09      	cmp	r3, #9
 8004646:	d94b      	bls.n	80046e0 <_svfiprintf_r+0x17c>
 8004648:	b1b0      	cbz	r0, 8004678 <_svfiprintf_r+0x114>
 800464a:	9207      	str	r2, [sp, #28]
 800464c:	e014      	b.n	8004678 <_svfiprintf_r+0x114>
 800464e:	eba0 0308 	sub.w	r3, r0, r8
 8004652:	fa09 f303 	lsl.w	r3, r9, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	46a2      	mov	sl, r4
 800465c:	e7d2      	b.n	8004604 <_svfiprintf_r+0xa0>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	1d19      	adds	r1, r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9103      	str	r1, [sp, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfbb      	ittet	lt
 800466a:	425b      	neglt	r3, r3
 800466c:	f042 0202 	orrlt.w	r2, r2, #2
 8004670:	9307      	strge	r3, [sp, #28]
 8004672:	9307      	strlt	r3, [sp, #28]
 8004674:	bfb8      	it	lt
 8004676:	9204      	strlt	r2, [sp, #16]
 8004678:	7823      	ldrb	r3, [r4, #0]
 800467a:	2b2e      	cmp	r3, #46	@ 0x2e
 800467c:	d10a      	bne.n	8004694 <_svfiprintf_r+0x130>
 800467e:	7863      	ldrb	r3, [r4, #1]
 8004680:	2b2a      	cmp	r3, #42	@ 0x2a
 8004682:	d132      	bne.n	80046ea <_svfiprintf_r+0x186>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	9203      	str	r2, [sp, #12]
 800468c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004690:	3402      	adds	r4, #2
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800474c <_svfiprintf_r+0x1e8>
 8004698:	7821      	ldrb	r1, [r4, #0]
 800469a:	2203      	movs	r2, #3
 800469c:	4650      	mov	r0, sl
 800469e:	f7fb fd77 	bl	8000190 <memchr>
 80046a2:	b138      	cbz	r0, 80046b4 <_svfiprintf_r+0x150>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	eba0 000a 	sub.w	r0, r0, sl
 80046aa:	2240      	movs	r2, #64	@ 0x40
 80046ac:	4082      	lsls	r2, r0
 80046ae:	4313      	orrs	r3, r2
 80046b0:	3401      	adds	r4, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	4825      	ldr	r0, [pc, #148]	@ (8004750 <_svfiprintf_r+0x1ec>)
 80046ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046be:	2206      	movs	r2, #6
 80046c0:	f7fb fd66 	bl	8000190 <memchr>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d036      	beq.n	8004736 <_svfiprintf_r+0x1d2>
 80046c8:	4b22      	ldr	r3, [pc, #136]	@ (8004754 <_svfiprintf_r+0x1f0>)
 80046ca:	bb1b      	cbnz	r3, 8004714 <_svfiprintf_r+0x1b0>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	3307      	adds	r3, #7
 80046d0:	f023 0307 	bic.w	r3, r3, #7
 80046d4:	3308      	adds	r3, #8
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046da:	4433      	add	r3, r6
 80046dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046de:	e76a      	b.n	80045b6 <_svfiprintf_r+0x52>
 80046e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e4:	460c      	mov	r4, r1
 80046e6:	2001      	movs	r0, #1
 80046e8:	e7a8      	b.n	800463c <_svfiprintf_r+0xd8>
 80046ea:	2300      	movs	r3, #0
 80046ec:	3401      	adds	r4, #1
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	4620      	mov	r0, r4
 80046f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046fc:	3a30      	subs	r2, #48	@ 0x30
 80046fe:	2a09      	cmp	r2, #9
 8004700:	d903      	bls.n	800470a <_svfiprintf_r+0x1a6>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0c6      	beq.n	8004694 <_svfiprintf_r+0x130>
 8004706:	9105      	str	r1, [sp, #20]
 8004708:	e7c4      	b.n	8004694 <_svfiprintf_r+0x130>
 800470a:	fb0c 2101 	mla	r1, ip, r1, r2
 800470e:	4604      	mov	r4, r0
 8004710:	2301      	movs	r3, #1
 8004712:	e7f0      	b.n	80046f6 <_svfiprintf_r+0x192>
 8004714:	ab03      	add	r3, sp, #12
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	462a      	mov	r2, r5
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <_svfiprintf_r+0x1f4>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	4638      	mov	r0, r7
 8004720:	f3af 8000 	nop.w
 8004724:	1c42      	adds	r2, r0, #1
 8004726:	4606      	mov	r6, r0
 8004728:	d1d6      	bne.n	80046d8 <_svfiprintf_r+0x174>
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	065b      	lsls	r3, r3, #25
 800472e:	f53f af2d 	bmi.w	800458c <_svfiprintf_r+0x28>
 8004732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004734:	e72c      	b.n	8004590 <_svfiprintf_r+0x2c>
 8004736:	ab03      	add	r3, sp, #12
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	462a      	mov	r2, r5
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <_svfiprintf_r+0x1f4>)
 800473e:	a904      	add	r1, sp, #16
 8004740:	4638      	mov	r0, r7
 8004742:	f000 f879 	bl	8004838 <_printf_i>
 8004746:	e7ed      	b.n	8004724 <_svfiprintf_r+0x1c0>
 8004748:	08004d40 	.word	0x08004d40
 800474c:	08004d46 	.word	0x08004d46
 8004750:	08004d4a 	.word	0x08004d4a
 8004754:	00000000 	.word	0x00000000
 8004758:	080044ad 	.word	0x080044ad

0800475c <_printf_common>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4616      	mov	r6, r2
 8004762:	4698      	mov	r8, r3
 8004764:	688a      	ldr	r2, [r1, #8]
 8004766:	690b      	ldr	r3, [r1, #16]
 8004768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800476c:	4293      	cmp	r3, r2
 800476e:	bfb8      	it	lt
 8004770:	4613      	movlt	r3, r2
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004778:	4607      	mov	r7, r0
 800477a:	460c      	mov	r4, r1
 800477c:	b10a      	cbz	r2, 8004782 <_printf_common+0x26>
 800477e:	3301      	adds	r3, #1
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0699      	lsls	r1, r3, #26
 8004786:	bf42      	ittt	mi
 8004788:	6833      	ldrmi	r3, [r6, #0]
 800478a:	3302      	addmi	r3, #2
 800478c:	6033      	strmi	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d106      	bne.n	80047a4 <_printf_common+0x48>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dc26      	bgt.n	80047f2 <_printf_common+0x96>
 80047a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	3b00      	subs	r3, #0
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	0692      	lsls	r2, r2, #26
 80047b2:	d42b      	bmi.n	800480c <_printf_common+0xb0>
 80047b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047b8:	4641      	mov	r1, r8
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c8      	blx	r9
 80047be:	3001      	adds	r0, #1
 80047c0:	d01e      	beq.n	8004800 <_printf_common+0xa4>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	6922      	ldr	r2, [r4, #16]
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	bf02      	ittt	eq
 80047ce:	68e5      	ldreq	r5, [r4, #12]
 80047d0:	6833      	ldreq	r3, [r6, #0]
 80047d2:	1aed      	subeq	r5, r5, r3
 80047d4:	68a3      	ldr	r3, [r4, #8]
 80047d6:	bf0c      	ite	eq
 80047d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047dc:	2500      	movne	r5, #0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfc4      	itt	gt
 80047e2:	1a9b      	subgt	r3, r3, r2
 80047e4:	18ed      	addgt	r5, r5, r3
 80047e6:	2600      	movs	r6, #0
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xc8>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4641      	mov	r1, r8
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c8      	blx	r9
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xac>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c6      	b.n	800479a <_printf_common+0x3e>
 800480c:	18e1      	adds	r1, r4, r3
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	2030      	movs	r0, #48	@ 0x30
 8004812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004816:	4422      	add	r2, r4
 8004818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800481c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004820:	3302      	adds	r3, #2
 8004822:	e7c7      	b.n	80047b4 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4641      	mov	r1, r8
 800482a:	4638      	mov	r0, r7
 800482c:	47c8      	blx	r9
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa4>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x8e>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	7e0f      	ldrb	r7, [r1, #24]
 800483e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004840:	2f78      	cmp	r7, #120	@ 0x78
 8004842:	4691      	mov	r9, r2
 8004844:	4680      	mov	r8, r0
 8004846:	460c      	mov	r4, r1
 8004848:	469a      	mov	sl, r3
 800484a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	@ 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d1 	beq.w	80049fc <_printf_i+0x1c4>
 800485a:	2f58      	cmp	r7, #88	@ 0x58
 800485c:	f000 80b8 	beq.w	80049d0 <_printf_i+0x198>
 8004860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a101      	add	r1, pc, #4	@ (adr r1, 8004878 <_printf_i+0x40>)
 8004874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049e3 	.word	0x080049e3
 80048a8:	0800490f 	.word	0x0800490f
 80048ac:	0800499d 	.word	0x0800499d
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a05 	.word	0x08004a05
 80048bc:	08004861 	.word	0x08004861
 80048c0:	0800490f 	.word	0x0800490f
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049a5 	.word	0x080049a5
 80048d0:	6833      	ldr	r3, [r6, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6032      	str	r2, [r6, #0]
 80048d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e09c      	b.n	8004a1e <_printf_i+0x1e6>
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	1d19      	adds	r1, r3, #4
 80048ea:	6031      	str	r1, [r6, #0]
 80048ec:	0606      	lsls	r6, r0, #24
 80048ee:	d501      	bpl.n	80048f4 <_printf_i+0xbc>
 80048f0:	681d      	ldr	r5, [r3, #0]
 80048f2:	e003      	b.n	80048fc <_printf_i+0xc4>
 80048f4:	0645      	lsls	r5, r0, #25
 80048f6:	d5fb      	bpl.n	80048f0 <_printf_i+0xb8>
 80048f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	da03      	bge.n	8004908 <_printf_i+0xd0>
 8004900:	232d      	movs	r3, #45	@ 0x2d
 8004902:	426d      	negs	r5, r5
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004908:	4858      	ldr	r0, [pc, #352]	@ (8004a6c <_printf_i+0x234>)
 800490a:	230a      	movs	r3, #10
 800490c:	e011      	b.n	8004932 <_printf_i+0xfa>
 800490e:	6821      	ldr	r1, [r4, #0]
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	0608      	lsls	r0, r1, #24
 8004914:	f853 5b04 	ldr.w	r5, [r3], #4
 8004918:	d402      	bmi.n	8004920 <_printf_i+0xe8>
 800491a:	0649      	lsls	r1, r1, #25
 800491c:	bf48      	it	mi
 800491e:	b2ad      	uxthmi	r5, r5
 8004920:	2f6f      	cmp	r7, #111	@ 0x6f
 8004922:	4852      	ldr	r0, [pc, #328]	@ (8004a6c <_printf_i+0x234>)
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	bf14      	ite	ne
 8004928:	230a      	movne	r3, #10
 800492a:	2308      	moveq	r3, #8
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004932:	6866      	ldr	r6, [r4, #4]
 8004934:	60a6      	str	r6, [r4, #8]
 8004936:	2e00      	cmp	r6, #0
 8004938:	db05      	blt.n	8004946 <_printf_i+0x10e>
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	432e      	orrs	r6, r5
 800493e:	f021 0104 	bic.w	r1, r1, #4
 8004942:	6021      	str	r1, [r4, #0]
 8004944:	d04b      	beq.n	80049de <_printf_i+0x1a6>
 8004946:	4616      	mov	r6, r2
 8004948:	fbb5 f1f3 	udiv	r1, r5, r3
 800494c:	fb03 5711 	mls	r7, r3, r1, r5
 8004950:	5dc7      	ldrb	r7, [r0, r7]
 8004952:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004956:	462f      	mov	r7, r5
 8004958:	42bb      	cmp	r3, r7
 800495a:	460d      	mov	r5, r1
 800495c:	d9f4      	bls.n	8004948 <_printf_i+0x110>
 800495e:	2b08      	cmp	r3, #8
 8004960:	d10b      	bne.n	800497a <_printf_i+0x142>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	07df      	lsls	r7, r3, #31
 8004966:	d508      	bpl.n	800497a <_printf_i+0x142>
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	6861      	ldr	r1, [r4, #4]
 800496c:	4299      	cmp	r1, r3
 800496e:	bfde      	ittt	le
 8004970:	2330      	movle	r3, #48	@ 0x30
 8004972:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004976:	f106 36ff 	addle.w	r6, r6, #4294967295
 800497a:	1b92      	subs	r2, r2, r6
 800497c:	6122      	str	r2, [r4, #16]
 800497e:	f8cd a000 	str.w	sl, [sp]
 8004982:	464b      	mov	r3, r9
 8004984:	aa03      	add	r2, sp, #12
 8004986:	4621      	mov	r1, r4
 8004988:	4640      	mov	r0, r8
 800498a:	f7ff fee7 	bl	800475c <_printf_common>
 800498e:	3001      	adds	r0, #1
 8004990:	d14a      	bne.n	8004a28 <_printf_i+0x1f0>
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	b004      	add	sp, #16
 8004998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	f043 0320 	orr.w	r3, r3, #32
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	4832      	ldr	r0, [pc, #200]	@ (8004a70 <_printf_i+0x238>)
 80049a6:	2778      	movs	r7, #120	@ 0x78
 80049a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	6831      	ldr	r1, [r6, #0]
 80049b0:	061f      	lsls	r7, r3, #24
 80049b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80049b6:	d402      	bmi.n	80049be <_printf_i+0x186>
 80049b8:	065f      	lsls	r7, r3, #25
 80049ba:	bf48      	it	mi
 80049bc:	b2ad      	uxthmi	r5, r5
 80049be:	6031      	str	r1, [r6, #0]
 80049c0:	07d9      	lsls	r1, r3, #31
 80049c2:	bf44      	itt	mi
 80049c4:	f043 0320 	orrmi.w	r3, r3, #32
 80049c8:	6023      	strmi	r3, [r4, #0]
 80049ca:	b11d      	cbz	r5, 80049d4 <_printf_i+0x19c>
 80049cc:	2310      	movs	r3, #16
 80049ce:	e7ad      	b.n	800492c <_printf_i+0xf4>
 80049d0:	4826      	ldr	r0, [pc, #152]	@ (8004a6c <_printf_i+0x234>)
 80049d2:	e7e9      	b.n	80049a8 <_printf_i+0x170>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f023 0320 	bic.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	e7f6      	b.n	80049cc <_printf_i+0x194>
 80049de:	4616      	mov	r6, r2
 80049e0:	e7bd      	b.n	800495e <_printf_i+0x126>
 80049e2:	6833      	ldr	r3, [r6, #0]
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	6961      	ldr	r1, [r4, #20]
 80049e8:	1d18      	adds	r0, r3, #4
 80049ea:	6030      	str	r0, [r6, #0]
 80049ec:	062e      	lsls	r6, r5, #24
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	d501      	bpl.n	80049f6 <_printf_i+0x1be>
 80049f2:	6019      	str	r1, [r3, #0]
 80049f4:	e002      	b.n	80049fc <_printf_i+0x1c4>
 80049f6:	0668      	lsls	r0, r5, #25
 80049f8:	d5fb      	bpl.n	80049f2 <_printf_i+0x1ba>
 80049fa:	8019      	strh	r1, [r3, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	4616      	mov	r6, r2
 8004a02:	e7bc      	b.n	800497e <_printf_i+0x146>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	1d1a      	adds	r2, r3, #4
 8004a08:	6032      	str	r2, [r6, #0]
 8004a0a:	681e      	ldr	r6, [r3, #0]
 8004a0c:	6862      	ldr	r2, [r4, #4]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7fb fbbd 	bl	8000190 <memchr>
 8004a16:	b108      	cbz	r0, 8004a1c <_printf_i+0x1e4>
 8004a18:	1b80      	subs	r0, r0, r6
 8004a1a:	6060      	str	r0, [r4, #4]
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	6123      	str	r3, [r4, #16]
 8004a20:	2300      	movs	r3, #0
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a26:	e7aa      	b.n	800497e <_printf_i+0x146>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4640      	mov	r0, r8
 8004a30:	47d0      	blx	sl
 8004a32:	3001      	adds	r0, #1
 8004a34:	d0ad      	beq.n	8004992 <_printf_i+0x15a>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	079b      	lsls	r3, r3, #30
 8004a3a:	d413      	bmi.n	8004a64 <_printf_i+0x22c>
 8004a3c:	68e0      	ldr	r0, [r4, #12]
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	4298      	cmp	r0, r3
 8004a42:	bfb8      	it	lt
 8004a44:	4618      	movlt	r0, r3
 8004a46:	e7a6      	b.n	8004996 <_printf_i+0x15e>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4632      	mov	r2, r6
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	4640      	mov	r0, r8
 8004a50:	47d0      	blx	sl
 8004a52:	3001      	adds	r0, #1
 8004a54:	d09d      	beq.n	8004992 <_printf_i+0x15a>
 8004a56:	3501      	adds	r5, #1
 8004a58:	68e3      	ldr	r3, [r4, #12]
 8004a5a:	9903      	ldr	r1, [sp, #12]
 8004a5c:	1a5b      	subs	r3, r3, r1
 8004a5e:	42ab      	cmp	r3, r5
 8004a60:	dcf2      	bgt.n	8004a48 <_printf_i+0x210>
 8004a62:	e7eb      	b.n	8004a3c <_printf_i+0x204>
 8004a64:	2500      	movs	r5, #0
 8004a66:	f104 0619 	add.w	r6, r4, #25
 8004a6a:	e7f5      	b.n	8004a58 <_printf_i+0x220>
 8004a6c:	08004d51 	.word	0x08004d51
 8004a70:	08004d62 	.word	0x08004d62

08004a74 <memmove>:
 8004a74:	4288      	cmp	r0, r1
 8004a76:	b510      	push	{r4, lr}
 8004a78:	eb01 0402 	add.w	r4, r1, r2
 8004a7c:	d902      	bls.n	8004a84 <memmove+0x10>
 8004a7e:	4284      	cmp	r4, r0
 8004a80:	4623      	mov	r3, r4
 8004a82:	d807      	bhi.n	8004a94 <memmove+0x20>
 8004a84:	1e43      	subs	r3, r0, #1
 8004a86:	42a1      	cmp	r1, r4
 8004a88:	d008      	beq.n	8004a9c <memmove+0x28>
 8004a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a92:	e7f8      	b.n	8004a86 <memmove+0x12>
 8004a94:	4402      	add	r2, r0
 8004a96:	4601      	mov	r1, r0
 8004a98:	428a      	cmp	r2, r1
 8004a9a:	d100      	bne.n	8004a9e <memmove+0x2a>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aa6:	e7f7      	b.n	8004a98 <memmove+0x24>

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d06      	ldr	r5, [pc, #24]	@ (8004ac4 <_sbrk_r+0x1c>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fc fcf4 	bl	80014a0 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	200003c8 	.word	0x200003c8

08004ac8 <_realloc_r>:
 8004ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	4607      	mov	r7, r0
 8004ace:	4614      	mov	r4, r2
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	b921      	cbnz	r1, 8004ade <_realloc_r+0x16>
 8004ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4611      	mov	r1, r2
 8004ada:	f7ff bc5b 	b.w	8004394 <_malloc_r>
 8004ade:	b92a      	cbnz	r2, 8004aec <_realloc_r+0x24>
 8004ae0:	f7ff fbec 	bl	80042bc <_free_r>
 8004ae4:	4625      	mov	r5, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aec:	f000 f81a 	bl	8004b24 <_malloc_usable_size_r>
 8004af0:	4284      	cmp	r4, r0
 8004af2:	4606      	mov	r6, r0
 8004af4:	d802      	bhi.n	8004afc <_realloc_r+0x34>
 8004af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004afa:	d8f4      	bhi.n	8004ae6 <_realloc_r+0x1e>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4638      	mov	r0, r7
 8004b00:	f7ff fc48 	bl	8004394 <_malloc_r>
 8004b04:	4680      	mov	r8, r0
 8004b06:	b908      	cbnz	r0, 8004b0c <_realloc_r+0x44>
 8004b08:	4645      	mov	r5, r8
 8004b0a:	e7ec      	b.n	8004ae6 <_realloc_r+0x1e>
 8004b0c:	42b4      	cmp	r4, r6
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	bf28      	it	cs
 8004b14:	4632      	movcs	r2, r6
 8004b16:	f7ff fbc3 	bl	80042a0 <memcpy>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f7ff fbcd 	bl	80042bc <_free_r>
 8004b22:	e7f1      	b.n	8004b08 <_realloc_r+0x40>

08004b24 <_malloc_usable_size_r>:
 8004b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b28:	1f18      	subs	r0, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfbc      	itt	lt
 8004b2e:	580b      	ldrlt	r3, [r1, r0]
 8004b30:	18c0      	addlt	r0, r0, r3
 8004b32:	4770      	bx	lr

08004b34 <_gettimeofday>:
 8004b34:	4b02      	ldr	r3, [pc, #8]	@ (8004b40 <_gettimeofday+0xc>)
 8004b36:	2258      	movs	r2, #88	@ 0x58
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3e:	4770      	bx	lr
 8004b40:	200003c8 	.word	0x200003c8

08004b44 <_init>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr

08004b50 <_fini>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

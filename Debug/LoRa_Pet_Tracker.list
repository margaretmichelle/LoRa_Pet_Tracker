
LoRa_Pet_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b244  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800b388  0800b388  0000c388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a8  0800b9a8  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b9a8  0800b9a8  0000c9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b0  0800b9b0  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b0  0800b9b0  0000c9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9b4  0800b9b4  0000c9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b9b8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001d8  0800bb90  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800bb90  0000d554  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002013d  00000000  00000000  0000d202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c04  00000000  00000000  0002d33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f28  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017fa  00000000  00000000  00031e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014948  00000000  00000000  0003366a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000cb21  00000000  00000000  00047fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00054ad3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009d50  00000000  00000000  00054b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000083  00000000  00000000  0005e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b36c 	.word	0x0800b36c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	0800b36c 	.word	0x0800b36c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_fmul>:
 8000bbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bca:	ea92 0f0c 	teqne	r2, ip
 8000bce:	ea93 0f0c 	teqne	r3, ip
 8000bd2:	d06f      	beq.n	8000cb4 <__aeabi_fmul+0xf8>
 8000bd4:	441a      	add	r2, r3
 8000bd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bda:	0240      	lsls	r0, r0, #9
 8000bdc:	bf18      	it	ne
 8000bde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be2:	d01e      	beq.n	8000c22 <__aeabi_fmul+0x66>
 8000be4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000be8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf0:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bf8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000bfc:	bf3e      	ittt	cc
 8000bfe:	0049      	lslcc	r1, r1, #1
 8000c00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c04:	005b      	lslcc	r3, r3, #1
 8000c06:	ea40 0001 	orr.w	r0, r0, r1
 8000c0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000c10:	d81d      	bhi.n	8000c4e <__aeabi_fmul+0x92>
 8000c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	4770      	bx	lr
 8000c22:	f090 0f00 	teq	r0, #0
 8000c26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	0249      	lsleq	r1, r1, #9
 8000c2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c36:	3a7f      	subs	r2, #127	@ 0x7f
 8000c38:	bfc2      	ittt	gt
 8000c3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c42:	4770      	bxgt	lr
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	dc5d      	bgt.n	8000d0c <__aeabi_fmul+0x150>
 8000c50:	f112 0f19 	cmn.w	r2, #25
 8000c54:	bfdc      	itt	le
 8000c56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c5a:	4770      	bxle	lr
 8000c5c:	f1c2 0200 	rsb	r2, r2, #0
 8000c60:	0041      	lsls	r1, r0, #1
 8000c62:	fa21 f102 	lsr.w	r1, r1, r2
 8000c66:	f1c2 0220 	rsb	r2, r2, #32
 8000c6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c72:	f140 0000 	adc.w	r0, r0, #0
 8000c76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7a:	bf08      	it	eq
 8000c7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c80:	4770      	bx	lr
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0040      	lsleq	r0, r0, #1
 8000c8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c92:	3a01      	subeq	r2, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xce>
 8000c96:	ea40 000c 	orr.w	r0, r0, ip
 8000c9a:	f093 0f00 	teq	r3, #0
 8000c9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ca2:	bf02      	ittt	eq
 8000ca4:	0049      	lsleq	r1, r1, #1
 8000ca6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000caa:	3b01      	subeq	r3, #1
 8000cac:	d0f9      	beq.n	8000ca2 <__aeabi_fmul+0xe6>
 8000cae:	ea41 010c 	orr.w	r1, r1, ip
 8000cb2:	e78f      	b.n	8000bd4 <__aeabi_fmul+0x18>
 8000cb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb8:	ea92 0f0c 	teq	r2, ip
 8000cbc:	bf18      	it	ne
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d00a      	beq.n	8000cda <__aeabi_fmul+0x11e>
 8000cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cc8:	bf18      	it	ne
 8000cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	d1d8      	bne.n	8000c82 <__aeabi_fmul+0xc6>
 8000cd0:	ea80 0001 	eor.w	r0, r0, r1
 8000cd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f090 0f00 	teq	r0, #0
 8000cde:	bf17      	itett	ne
 8000ce0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	f091 0f00 	teqne	r1, #0
 8000cea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cee:	d014      	beq.n	8000d1a <__aeabi_fmul+0x15e>
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_fmul+0x13e>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	d10f      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000cfa:	ea93 0f0c 	teq	r3, ip
 8000cfe:	d103      	bne.n	8000d08 <__aeabi_fmul+0x14c>
 8000d00:	024b      	lsls	r3, r1, #9
 8000d02:	bf18      	it	ne
 8000d04:	4608      	movne	r0, r1
 8000d06:	d108      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fdiv>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d069      	beq.n	8000e10 <__aeabi_fdiv+0xec>
 8000d3c:	eba2 0203 	sub.w	r2, r2, r3
 8000d40:	ea80 0c01 	eor.w	ip, r0, r1
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4a:	d037      	beq.n	8000dbc <__aeabi_fdiv+0x98>
 8000d4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	bf38      	it	cc
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	bf24      	itt	cs
 8000d6e:	1a5b      	subcs	r3, r3, r1
 8000d70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d86:	bf24      	itt	cs
 8000d88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d94:	bf24      	itt	cs
 8000d96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da6:	d1e0      	bne.n	8000d6a <__aeabi_fdiv+0x46>
 8000da8:	2afd      	cmp	r2, #253	@ 0xfd
 8000daa:	f63f af50 	bhi.w	8000c4e <__aeabi_fmul+0x92>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db4:	bf08      	it	eq
 8000db6:	f020 0001 	biceq.w	r0, r0, #1
 8000dba:	4770      	bx	lr
 8000dbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc4:	327f      	adds	r2, #127	@ 0x7f
 8000dc6:	bfc2      	ittt	gt
 8000dc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd0:	4770      	bxgt	lr
 8000dd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	3a01      	subs	r2, #1
 8000ddc:	e737      	b.n	8000c4e <__aeabi_fmul+0x92>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xc2>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fdiv+0xda>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e795      	b.n	8000d3c <__aeabi_fdiv+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d108      	bne.n	8000e2c <__aeabi_fdiv+0x108>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	f47f af7d 	bne.w	8000d1a <__aeabi_fmul+0x15e>
 8000e20:	ea93 0f0c 	teq	r3, ip
 8000e24:	f47f af70 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e776      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	d104      	bne.n	8000e3c <__aeabi_fdiv+0x118>
 8000e32:	024b      	lsls	r3, r1, #9
 8000e34:	f43f af4c 	beq.w	8000cd0 <__aeabi_fmul+0x114>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e76e      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1ca      	bne.n	8000dde <__aeabi_fdiv+0xba>
 8000e48:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e4c:	f47f af5c 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e50:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e54:	f47f af3c 	bne.w	8000cd0 <__aeabi_fmul+0x114>
 8000e58:	e75f      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_f2iz>:
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e64:	d30f      	bcc.n	8000e86 <__aeabi_f2iz+0x2a>
 8000e66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6e:	d90d      	bls.n	8000e8c <__aeabi_f2iz+0x30>
 8000e70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e78:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e80:	bf18      	it	ne
 8000e82:	4240      	negne	r0, r0
 8000e84:	4770      	bx	lr
 8000e86:	f04f 0000 	mov.w	r0, #0
 8000e8a:	4770      	bx	lr
 8000e8c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e90:	d101      	bne.n	8000e96 <__aeabi_f2iz+0x3a>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d105      	bne.n	8000ea2 <__aeabi_f2iz+0x46>
 8000e96:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e9a:	bf08      	it	eq
 8000e9c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f04f 0000 	mov.w	r0, #0
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_d2lz>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2300      	movs	r3, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	460d      	mov	r5, r1
 8000eb2:	f7ff fdeb 	bl	8000a8c <__aeabi_dcmplt>
 8000eb6:	b928      	cbnz	r0, 8000ec4 <__aeabi_d2lz+0x1c>
 8000eb8:	4620      	mov	r0, r4
 8000eba:	4629      	mov	r1, r5
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec0:	f000 b80a 	b.w	8000ed8 <__aeabi_d2ulz>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000eca:	f000 f805 	bl	8000ed8 <__aeabi_d2ulz>
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	bd38      	pop	{r3, r4, r5, pc}
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_d2ulz>:
 8000ed8:	b5d0      	push	{r4, r6, r7, lr}
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__aeabi_d2ulz+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	4606      	mov	r6, r0
 8000ee0:	460f      	mov	r7, r1
 8000ee2:	f7ff fb61 	bl	80005a8 <__aeabi_dmul>
 8000ee6:	f7ff fdf9 	bl	8000adc <__aeabi_d2uiz>
 8000eea:	4604      	mov	r4, r0
 8000eec:	f7ff fae2 	bl	80004b4 <__aeabi_ui2d>
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <__aeabi_d2ulz+0x38>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f7ff fb58 	bl	80005a8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4630      	mov	r0, r6
 8000efe:	4639      	mov	r1, r7
 8000f00:	f7ff f99a 	bl	8000238 <__aeabi_dsub>
 8000f04:	f7ff fdea 	bl	8000adc <__aeabi_d2uiz>
 8000f08:	4621      	mov	r1, r4
 8000f0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f0c:	3df00000 	.word	0x3df00000
 8000f10:	41f00000 	.word	0x41f00000

08000f14 <M20071_GPS_Init>:
#include "M20071_GPS.h"

void M20071_GPS_Init(M20071_GPS_HandleTypeDef *gps, UART_HandleTypeDef *huart) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
    gps->huart = huart;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	601a      	str	r2, [r3, #0]
    memset(gps->txBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3304      	adds	r3, #4
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f007 fdc8 	bl	8008ac2 <memset>
    memset(gps->rxBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3384      	adds	r3, #132	@ 0x84
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fdc1 	bl	8008ac2 <memset>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <M20071_GPS_SendCommand>:
 * @brief Sends a GPS command over UART
 * @param gps: Pointer to the GPS handle
 * @param cmd: Command string (e.g., "$PAIR690,1,21,39,48,72*28\r\n")
 * @return HAL_StatusTypeDef: HAL_OK if successful, otherwise error status
 */
HAL_StatusTypeDef M20071_GPS_SendCommand(M20071_GPS_HandleTypeDef *gps, const char *cmd) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    uint16_t len = strlen(cmd);
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f7ff f914 	bl	8000180 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	81fb      	strh	r3, [r7, #14]
    
    if (len >= GPS_UART_BUFFER_SIZE) {
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f60:	d901      	bls.n	8000f66 <M20071_GPS_SendCommand+0x1e>
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e026      	b.n	8000fb4 <M20071_GPS_SendCommand+0x6c>
    }

    // Clear the TX buffer and copy the command
    memset(gps->txBuffer, 0, GPS_UART_BUFFER_SIZE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fda7 	bl	8008ac2 <memset>
    strncpy((char *)gps->txBuffer, cmd, len);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3304      	adds	r3, #4
 8000f78:	89fa      	ldrh	r2, [r7, #14]
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fdc7 	bl	8008b10 <strncpy>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // RTS low
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <M20071_GPS_SendCommand+0x74>)
 8000f88:	f003 fe1c 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(20);  // 20ms delay, madatory delay, see logbook
 8000f8c:	2014      	movs	r0, #20
 8000f8e:	f003 fbb3 	bl	80046f8 <HAL_Delay>

    // Send the command using UART polling
    HAL_StatusTypeDef transmit_result;
    transmit_result = HAL_UART_Transmit(gps->huart, gps->txBuffer, len, GPS_CMD_TIMEOUT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1d19      	adds	r1, r3, #4
 8000f9a:	89fa      	ldrh	r2, [r7, #14]
 8000f9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fa0:	f006 f9e8 	bl	8007374 <HAL_UART_Transmit>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // RTS high
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2108      	movs	r1, #8
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <M20071_GPS_SendCommand+0x74>)
 8000fae:	f003 fe09 	bl	8004bc4 <HAL_GPIO_WritePin>
    return transmit_result;
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <addChecksum>:

/**
 * @brief Calculates checksum of string.
 * @param msg: Pointer to the message
 */
void addChecksum(char *msg) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  char *star = strchr(msg, '*');
 8000fc8:	212a      	movs	r1, #42	@ 0x2a
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f007 fd81 	bl	8008ad2 <strchr>
 8000fd0:	60f8      	str	r0, [r7, #12]

  uint8_t calculatedChecksum = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
  // Compute XOR of all characters between $ and *
  for (const char *p = msg + 1; p < star; ++p) {
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e007      	b.n	8000fee <addChecksum+0x2e>
      calculatedChecksum ^= *p;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	4053      	eors	r3, r2
 8000fe6:	75fb      	strb	r3, [r7, #23]
  for (const char *p = msg + 1; p < star; ++p) {
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d3f3      	bcc.n	8000fde <addChecksum+0x1e>
  }

  sprintf(star + 1, "%02X\r\n", calculatedChecksum);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	7dfa      	ldrb	r2, [r7, #23]
 8000ffc:	4903      	ldr	r1, [pc, #12]	@ (800100c <addChecksum+0x4c>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fccc 	bl	800899c <siprintf>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0800b388 	.word	0x0800b388

08001010 <GPS_powerOn>:
/**
 * @brief Power on the GNSS system, must send this command before using lacation services
 * @param gps: Pointer to the GPS handle
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_powerOn(M20071_GPS_HandleTypeDef *gps) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  char cmd[40] = "$PAIR002*";
 8001018:	4a10      	ldr	r2, [pc, #64]	@ (800105c <GPS_powerOn+0x4c>)
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001020:	c303      	stmia	r3!, {r0, r1}
 8001022:	801a      	strh	r2, [r3, #0]
 8001024:	f107 0312 	add.w	r3, r7, #18
 8001028:	221e      	movs	r2, #30
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 fd48 	bl	8008ac2 <memset>
  addChecksum(cmd);
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ffc2 	bl	8000fc0 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff80 	bl	8000f48 <M20071_GPS_SendCommand>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <GPS_powerOn+0x42>
      return true;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <GPS_powerOn+0x44>
  }
  return false;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800b390 	.word	0x0800b390

08001060 <GPS_setNMEARate>:
 * @param gps: Pointer to the GPS handle
 * @param rate: NMEA sentence type (4 is RMC)
 * @param rate: Output rate, range: 0-20 (how many times every position fix)
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_setNMEARate(M20071_GPS_HandleTypeDef *gps, uint8_t type, uint8_t rate) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	70bb      	strb	r3, [r7, #2]
  char cmd[40]; 
  sprintf(cmd, "$PAIR062,%d,%d*", type, rate);
 8001070:	78fa      	ldrb	r2, [r7, #3]
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	f107 0008 	add.w	r0, r7, #8
 8001078:	490b      	ldr	r1, [pc, #44]	@ (80010a8 <GPS_setNMEARate+0x48>)
 800107a:	f007 fc8f 	bl	800899c <siprintf>
  addChecksum(cmd);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9c 	bl	8000fc0 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff5a 	bl	8000f48 <M20071_GPS_SendCommand>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <GPS_setNMEARate+0x3e>
    return true;
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <GPS_setNMEARate+0x40>
  }
  return false;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3730      	adds	r7, #48	@ 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0800b408 	.word	0x0800b408

080010ac <GPS_enterRTC>:
/**
 * @brief Open a GNSS data port
 * @param gps: Pointer to the GPS handle
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_enterRTC(M20071_GPS_HandleTypeDef *gps) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  char cmd[40] = "$PAIR650,0*";
 80010b4:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <GPS_enterRTC+0x54>)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80010bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]
  addChecksum(cmd);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff71 	bl	8000fc0 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2f 	bl	8000f48 <M20071_GPS_SendCommand>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <GPS_enterRTC+0x48>
      return true;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <GPS_enterRTC+0x4a>
  }
  return false;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3730      	adds	r7, #48	@ 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800b440 	.word	0x0800b440

08001104 <GPS_openIOPort>:
 * @param gps: Pointer to the GPS handle
 * @param portIndex: HW port index
 * @param baudRate: Baud rate
 * @return True if command was sent successfully, false otherwise
 */
bool GPS_openIOPort(M20071_GPS_HandleTypeDef *gps, uint8_t portIndex) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
  char cmd[40];
  sprintf(cmd, "$PAIR860,0,%d,%d,9600,0*", portIndex, GNSS_IO_FLAG_OUT_NMEA | GNSS_IO_FLAG_OUT_CMD_RSP | GNSS_IO_FLAG_OUT_DATA_RSP | GNSS_IO_FLAG_IN_CMD);
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	232d      	movs	r3, #45	@ 0x2d
 8001118:	490b      	ldr	r1, [pc, #44]	@ (8001148 <GPS_openIOPort+0x44>)
 800111a:	f007 fc3f 	bl	800899c <siprintf>
  addChecksum(cmd);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff4c 	bl	8000fc0 <addChecksum>

  if (M20071_GPS_SendCommand(gps, cmd) == HAL_OK) {
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff0a 	bl	8000f48 <M20071_GPS_SendCommand>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <GPS_openIOPort+0x3a>
    return true;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <GPS_openIOPort+0x3c>
  }
  return false;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3730      	adds	r7, #48	@ 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800b468 	.word	0x0800b468

0800114c <M20071_GPS_Receive>:
/**
 * @brief Receives a variable-length response from the GPS module
 * @param gps: Pointer to the GPS handle
 * @return HAL_StatusTypeDef: HAL_OK if successful, otherwise error status
 */
HAL_StatusTypeDef M20071_GPS_Receive(M20071_GPS_HandleTypeDef *gps) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint8_t byte;
  uint16_t index = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]

  memset(gps->rxBuffer, 0, GPS_UART_BUFFER_SIZE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3384      	adds	r3, #132	@ 0x84
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f007 fcae 	bl	8008ac2 <memset>

  while (index < GPS_UART_BUFFER_SIZE - 1) {
 8001166:	e03b      	b.n	80011e0 <M20071_GPS_Receive+0x94>
      // Receive one byte at a time
      if (HAL_UART_Receive(gps->huart, &byte, 1, GPS_CMD_TIMEOUT) != HAL_OK) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f107 010d 	add.w	r1, r7, #13
 8001170:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001174:	2201      	movs	r2, #1
 8001176:	f006 f983 	bl	8007480 <HAL_UART_Receive>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <M20071_GPS_Receive+0x38>
          return HAL_TIMEOUT;  // Exit if timeout occurs
 8001180:	2303      	movs	r3, #3
 8001182:	e031      	b.n	80011e8 <M20071_GPS_Receive+0x9c>
      }

      gps->rxBuffer[index++] = byte;
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	81fa      	strh	r2, [r7, #14]
 800118a:	4619      	mov	r1, r3
 800118c:	7b7a      	ldrb	r2, [r7, #13]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	440b      	add	r3, r1
 8001192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      // End reception when detecting \r\n
      if (index >= 2 && gps->rxBuffer[index - 2] == '\r' && gps->rxBuffer[index - 1] == '\n') {
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d921      	bls.n	80011e0 <M20071_GPS_Receive+0x94>
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	3b02      	subs	r3, #2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80011a8:	2b0d      	cmp	r3, #13
 80011aa:	d119      	bne.n	80011e0 <M20071_GPS_Receive+0x94>
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d111      	bne.n	80011e0 <M20071_GPS_Receive+0x94>
        gps->rxBuffer[index] = '\0';  // Null-terminate the string
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        if (validateChecksum(gps->rxBuffer)) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3384      	adds	r3, #132	@ 0x84
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f80f 	bl	80011f0 <validateChecksum>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <M20071_GPS_Receive+0x90>
          return HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	e005      	b.n	80011e8 <M20071_GPS_Receive+0x9c>
        } else {
          return HAL_ERROR; // checksum not checking or summing
 80011dc:	2301      	movs	r3, #1
 80011de:	e003      	b.n	80011e8 <M20071_GPS_Receive+0x9c>
  while (index < GPS_UART_BUFFER_SIZE - 1) {
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80011e4:	d9c0      	bls.n	8001168 <M20071_GPS_Receive+0x1c>
        }
      }
  }

  return HAL_ERROR;  // ahhh too long
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <validateChecksum>:
/**
 * @brief Validates the checksum of a message.
 * @param msg: Pointer to the message
 * @return 1 if checksum is valid, 0 if not
 */
bool validateChecksum(const uint8_t *msg) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if (msg == NULL || *msg != '$') {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <validateChecksum+0x16>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b24      	cmp	r3, #36	@ 0x24
 8001204:	d001      	beq.n	800120a <validateChecksum+0x1a>
      return 0;  // Invalid format
 8001206:	2300      	movs	r3, #0
 8001208:	e02f      	b.n	800126a <validateChecksum+0x7a>
  }

  const uint8_t *star = (uint8_t *)strchr((char *)msg, '*');
 800120a:	212a      	movs	r1, #42	@ 0x2a
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f007 fc60 	bl	8008ad2 <strchr>
 8001212:	60f8      	str	r0, [r7, #12]
  if (star == NULL || star - msg < 1) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <validateChecksum+0x34>
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	dc01      	bgt.n	8001228 <validateChecksum+0x38>
      return 0;  // No checksum found, invalid message
 8001224:	2300      	movs	r3, #0
 8001226:	e020      	b.n	800126a <validateChecksum+0x7a>
  }

  // Compute checksum (XOR of all characters between preamble $ and *)
  uint8_t calculatedChecksum = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	75fb      	strb	r3, [r7, #23]
  for (const uint8_t *p = msg + 1; p < star; ++p) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	e007      	b.n	8001244 <validateChecksum+0x54>
      calculatedChecksum ^= *p;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	4053      	eors	r3, r2
 800123c:	75fb      	strb	r3, [r7, #23]
  for (const uint8_t *p = msg + 1; p < star; ++p) {
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	3301      	adds	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3f3      	bcc.n	8001234 <validateChecksum+0x44>
  }

  // Extract the checksum from the sentence
  uint8_t receivedChecksum;
  sscanf((char *)(star + 1), "%2hhx", &receivedChecksum);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	f107 020b 	add.w	r2, r7, #11
 8001254:	4907      	ldr	r1, [pc, #28]	@ (8001274 <validateChecksum+0x84>)
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fbc2 	bl	80089e0 <siscanf>

  return (calculatedChecksum == receivedChecksum);
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	7dfa      	ldrb	r2, [r7, #23]
 8001260:	429a      	cmp	r2, r3
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800b4bc 	.word	0x0800b4bc

08001278 <GPS_Parse>:
/**
 * @brief Determines which parsing function to use for message (NMEA or PAIR)
 * @param gps: Pointer to the GPS handle
 * @return 1 if successfully parsed NMEA, 2 if PAIR, 0 if it fails
 */
int GPS_Parse(M20071_GPS_HandleTypeDef *gps) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  char *p = (char *)(gps->rxBuffer + 1);  // Move to first character after '$'
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3384      	adds	r3, #132	@ 0x84
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]

  // Check for PAIR
  if (p[0] == 'P' && p[1] == 'A' && p[2] == 'I' && p[3] == 'R') {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b50      	cmp	r3, #80	@ 0x50
 800128e:	d110      	bne.n	80012b2 <GPS_Parse+0x3a>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3301      	adds	r3, #1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b41      	cmp	r3, #65	@ 0x41
 8001298:	d10b      	bne.n	80012b2 <GPS_Parse+0x3a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3302      	adds	r3, #2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b49      	cmp	r3, #73	@ 0x49
 80012a2:	d106      	bne.n	80012b2 <GPS_Parse+0x3a>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3303      	adds	r3, #3
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b52      	cmp	r3, #82	@ 0x52
 80012ac:	d101      	bne.n	80012b2 <GPS_Parse+0x3a>
      return 2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	e01b      	b.n	80012ea <GPS_Parse+0x72>
      // I don't think I care about the PAIR responses
  }

  // Check for RMC (any talker ID: $xxRMC)
  p = (char *)(gps->rxBuffer + 3);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3384      	adds	r3, #132	@ 0x84
 80012b6:	3303      	adds	r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]
  if (p[0] == 'R' && p[1] == 'M' && p[2] == 'C') {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b52      	cmp	r3, #82	@ 0x52
 80012c0:	d112      	bne.n	80012e8 <GPS_Parse+0x70>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b4d      	cmp	r3, #77	@ 0x4d
 80012ca:	d10d      	bne.n	80012e8 <GPS_Parse+0x70>
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3302      	adds	r3, #2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b43      	cmp	r3, #67	@ 0x43
 80012d4:	d108      	bne.n	80012e8 <GPS_Parse+0x70>
    p = (char *)gps->rxBuffer;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3384      	adds	r3, #132	@ 0x84
 80012da:	60fb      	str	r3, [r7, #12]
    return GPS_ParseNMEA(p, gps);
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f808 	bl	80012f4 <GPS_ParseNMEA>
 80012e4:	4603      	mov	r3, r0
 80012e6:	e000      	b.n	80012ea <GPS_Parse+0x72>
  }

  return 0; // something wrong
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <GPS_ParseNMEA>:
/**
 * @brief Parse RMC NMEA sentences
 * @param msg: Pointer to the message starting after SentenceID
 * @return True if successfully parsed, false if it fails check or parsing
 */
bool GPS_ParseNMEA(char *nmea, M20071_GPS_HandleTypeDef *gps) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]

  char *p = nmea; // Pointer to move through sentence
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]
  p = strchr(p, ',') + 1; // Skip to char after the next comma
 8001302:	212c      	movs	r1, #44	@ 0x2c
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f007 fbe4 	bl	8008ad2 <strchr>
 800130a:	4603      	mov	r3, r0
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]

  if (!parseTime(p, &gps->data)) return false;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001316:	4619      	mov	r1, r3
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f8bd 	bl	8001498 <parseTime>
 800131e:	4603      	mov	r3, r0
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <GPS_ParseNMEA+0x3a>
 800132a:	2300      	movs	r3, #0
 800132c:	e092      	b.n	8001454 <GPS_ParseNMEA+0x160>
  p = strchr(p, ',') + 1;
 800132e:	212c      	movs	r1, #44	@ 0x2c
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f007 fbce 	bl	8008ad2 <strchr>
 8001336:	4603      	mov	r3, r0
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
  if (!parseFix(p, &gps->data)) return false;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8001342:	4619      	mov	r1, r3
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 f8eb 	bl	8001520 <parseFix>
 800134a:	4603      	mov	r3, r0
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <GPS_ParseNMEA+0x66>
 8001356:	2300      	movs	r3, #0
 8001358:	e07c      	b.n	8001454 <GPS_ParseNMEA+0x160>
  p = strchr(p, ',') + 1;
 800135a:	212c      	movs	r1, #44	@ 0x2c
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f007 fbb8 	bl	8008ad2 <strchr>
 8001362:	4603      	mov	r3, r0
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
  // parse out both latitude and direction, then go to next field, or fail
  if (!parseLatLon(p, true, &gps->data)) return false;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800136e:	461a      	mov	r2, r3
 8001370:	2101      	movs	r1, #1
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f8f9 	bl	800156a <parseLatLon>
 8001378:	4603      	mov	r3, r0
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <GPS_ParseNMEA+0x94>
 8001384:	2300      	movs	r3, #0
 8001386:	e065      	b.n	8001454 <GPS_ParseNMEA+0x160>
  p = strchr(p, ',') + 1;
 8001388:	212c      	movs	r1, #44	@ 0x2c
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f007 fba1 	bl	8008ad2 <strchr>
 8001390:	4603      	mov	r3, r0
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
  // parse out both longitude and direction, then go to next field, or fail
  if (!parseLatLon(p, false, &gps->data)) return false;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800139c:	461a      	mov	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f8e2 	bl	800156a <parseLatLon>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <GPS_ParseNMEA+0xc2>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e04e      	b.n	8001454 <GPS_ParseNMEA+0x160>
  p = strchr(p, ',') + 1;
 80013b6:	212c      	movs	r1, #44	@ 0x2c
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f007 fb8a 	bl	8008ad2 <strchr>
 80013be:	4603      	mov	r3, r0
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
  // speed over ground
  p = strchr(p, ',') + 1;
 80013c4:	212c      	movs	r1, #44	@ 0x2c
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f007 fb83 	bl	8008ad2 <strchr>
 80013cc:	4603      	mov	r3, r0
 80013ce:	3301      	adds	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
  // course over ground
  p = strchr(p, ',') + 1;
 80013d2:	212c      	movs	r1, #44	@ 0x2c
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f007 fb7c 	bl	8008ad2 <strchr>
 80013da:	4603      	mov	r3, r0
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
  if (!isEmpty(p)) {
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f83f 	bl	8001464 <isEmpty>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d02f      	beq.n	8001452 <GPS_ParseNMEA+0x15e>
	uint32_t fulldate = strtoul(p, NULL, 10);
 80013f2:	220a      	movs	r2, #10
 80013f4:	2100      	movs	r1, #0
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f007 fa04 	bl	8008804 <strtoul>
 80013fc:	60b8      	str	r0, [r7, #8]
    gps->data.day = fulldate / 10000;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	4a16      	ldr	r2, [pc, #88]	@ (800145c <GPS_ParseNMEA+0x168>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0b5b      	lsrs	r3, r3, #13
 8001408:	b2da      	uxtb	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
    gps->data.month = (fulldate % 10000) / 100;
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <GPS_ParseNMEA+0x168>)
 8001414:	fba3 1302 	umull	r1, r3, r3, r2
 8001418:	0b5b      	lsrs	r3, r3, #13
 800141a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <GPS_ParseNMEA+0x16c>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	b2da      	uxtb	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    gps->data.year = (fulldate % 100);
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <GPS_ParseNMEA+0x16c>)
 8001438:	fba3 1302 	umull	r1, r3, r3, r2
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	2164      	movs	r1, #100	@ 0x64
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    return true;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <GPS_ParseNMEA+0x160>
  }
  return false;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	d1b71759 	.word	0xd1b71759
 8001460:	51eb851f 	.word	0x51eb851f

08001464 <isEmpty>:
    probably violates the NMEA-183 standard.
    @param pStart Pointer to the location of the token in the NMEA string
    @return true if empty field, false if something there
*/
/**************************************************************************/
bool isEmpty(char *pStart) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return (*pStart == ',' || *pStart == '*' || pStart == NULL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b2c      	cmp	r3, #44	@ 0x2c
 8001472:	d006      	beq.n	8001482 <isEmpty+0x1e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b2a      	cmp	r3, #42	@ 0x2a
 800147a:	d002      	beq.n	8001482 <isEmpty+0x1e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <isEmpty+0x22>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <isEmpty+0x24>
 8001486:	2300      	movs	r3, #0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <parseTime>:
    of decimal places after the '.'
    @param p Pointer to the location of the token in the NMEA string
    @return true if successful, false otherwise
*/
/**************************************************************************/
bool parseTime(char *p, M20071_GPS_Data *data) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  if (!isEmpty(p)) {
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffde 	bl	8001464 <isEmpty>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02b      	beq.n	800150c <parseTime+0x74>
    uint32_t time = atol(p);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f006 fa69 	bl	800798c <atol>
 80014ba:	4603      	mov	r3, r0
 80014bc:	60fb      	str	r3, [r7, #12]
    data->hour = time / 10000;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <parseTime+0x80>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0b5b      	lsrs	r3, r3, #13
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	729a      	strb	r2, [r3, #10]
    data->minute = (time % 10000) / 100;
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <parseTime+0x80>)
 80014d2:	fba3 1302 	umull	r1, r3, r3, r2
 80014d6:	0b5b      	lsrs	r3, r3, #13
 80014d8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <parseTime+0x84>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	095b      	lsrs	r3, r3, #5
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	72da      	strb	r2, [r3, #11]
    data->second = (time % 100);
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <parseTime+0x84>)
 80014f4:	fba3 1302 	umull	r1, r3, r3, r2
 80014f8:	095b      	lsrs	r3, r3, #5
 80014fa:	2164      	movs	r1, #100	@ 0x64
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	731a      	strb	r2, [r3, #12]
    return true;
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <parseTime+0x76>
  }
  return false;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	d1b71759 	.word	0xd1b71759
 800151c:	51eb851f 	.word	0x51eb851f

08001520 <parseFix>:
    @brief Parse a part of an NMEA string for whether there is a fix
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool parseFix(char *p, M20071_GPS_Data *data) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  if (!isEmpty(p)) {
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff9a 	bl	8001464 <isEmpty>
 8001530:	4603      	mov	r3, r0
 8001532:	f083 0301 	eor.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d011      	beq.n	8001560 <parseFix+0x40>
    if (p[0] == 'A') {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b41      	cmp	r3, #65	@ 0x41
 8001542:	d104      	bne.n	800154e <parseFix+0x2e>
      data->fix = true;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	741a      	strb	r2, [r3, #16]
      return true;
 800154a:	2301      	movs	r3, #1
 800154c:	e009      	b.n	8001562 <parseFix+0x42>
    } else if (p[0] == 'V') {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b56      	cmp	r3, #86	@ 0x56
 8001554:	d104      	bne.n	8001560 <parseFix+0x40>
      data->fix = false;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	741a      	strb	r2, [r3, #16]
      return true;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <parseFix+0x42>
    }
  }
  return false;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <parseLatLon>:
    @param p Pointer to the location of the token in the NMEA string
    @param latFlag 1 if parsing latitude, 0 if parsing longitude
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool parseLatLon(char *p, bool latFlag, M20071_GPS_Data *data) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b08a      	sub	sp, #40	@ 0x28
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	460b      	mov	r3, r1
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	72fb      	strb	r3, [r7, #11]
  if (!isEmpty(p)) {
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff ff73 	bl	8001464 <isEmpty>
 800157e:	4603      	mov	r3, r0
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d058      	beq.n	800163c <parseLatLon+0xd2>
    char *e = strchr(p, ',');
 800158a:	212c      	movs	r1, #44	@ 0x2c
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f007 faa0 	bl	8008ad2 <strchr>
 8001592:	6278      	str	r0, [r7, #36]	@ 0x24
    if (e == NULL || e - p > 8) {
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <parseLatLon+0x3a>
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	dd01      	ble.n	80015a8 <parseLatLon+0x3e>
      return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e04a      	b.n	800163e <parseLatLon+0xd4>
    }

    char coordValue[16] = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
    strncpy(coordValue, p, e - p); // get DD
 80015b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	68f9      	ldr	r1, [r7, #12]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 faa3 	bl	8008b10 <strncpy>
    
    p = e + 1;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]

    if (latFlag) {  // if parsing latitude
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <parseLatLon+0x9e>
      data->latitudeDegrees = atof(coordValue);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f006 f9d3 	bl	8007986 <atof>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa98 	bl	8000b1c <__aeabi_d2f>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
      data->lat = (p[0] == 'S') ? 1 : 0;  // 1 if S, 0 if N
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b53      	cmp	r3, #83	@ 0x53
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	721a      	strb	r2, [r3, #8]
 8001606:	e017      	b.n	8001638 <parseLatLon+0xce>
    }
    else {  // if parsing longitude
      data->longitudeDegrees = atof(coordValue);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f006 f9ba 	bl	8007986 <atof>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa7f 	bl	8000b1c <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]
      data->lon = (p[0] == 'W') ? 1 : 0;  // 1 if W, 0 if E
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b57      	cmp	r3, #87	@ 0x57
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	725a      	strb	r2, [r3, #9]
    }

    return true;
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <parseLatLon+0xd4>
  }
  return false;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3728      	adds	r7, #40	@ 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <GPS_FormatData>:

void GPS_FormatData(uint8_t dataGPS[], M20071_GPS_HandleTypeDef *gps) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  dataGPS[0] = 20;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2214      	movs	r2, #20
 8001656:	701a      	strb	r2, [r3, #0]
	dataGPS[1] = gps->data.year;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 8001662:	701a      	strb	r2, [r3, #0]
	dataGPS[2] = gps->data.month;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3302      	adds	r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	f892 2112 	ldrb.w	r2, [r2, #274]	@ 0x112
 800166e:	701a      	strb	r2, [r3, #0]
	dataGPS[3] = gps->data.day;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3303      	adds	r3, #3
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	f892 2113 	ldrb.w	r2, [r2, #275]	@ 0x113
 800167a:	701a      	strb	r2, [r3, #0]
	dataGPS[4] = gps->data.hour;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	f892 210e 	ldrb.w	r2, [r2, #270]	@ 0x10e
 8001686:	701a      	strb	r2, [r3, #0]
	dataGPS[5] = gps->data.minute;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3305      	adds	r3, #5
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	f892 210f 	ldrb.w	r2, [r2, #271]	@ 0x10f
 8001692:	701a      	strb	r2, [r3, #0]
	dataGPS[6] = gps->data.second;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3306      	adds	r3, #6
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 800169e:	701a      	strb	r2, [r3, #0]
	dataGPS[7] = ((int)gps->data.latitudeDegrees << 1) | gps->data.lat;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbd8 	bl	8000e5c <__aeabi_f2iz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3307      	adds	r3, #7
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
	uint32_t latDD = (int) (gps->data.latitudeDegrees * 1000000) % 1000000;  // fractional degrees (up to 20 bits), 6 digits
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80016ce:	4932      	ldr	r1, [pc, #200]	@ (8001798 <GPS_FormatData+0x150>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa73 	bl	8000bbc <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fbbf 	bl	8000e5c <__aeabi_f2iz>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <GPS_FormatData+0x154>)
 80016e2:	fb83 1302 	smull	r1, r3, r3, r2
 80016e6:	1499      	asrs	r1, r3, #18
 80016e8:	17d3      	asrs	r3, r2, #31
 80016ea:	1acb      	subs	r3, r1, r3
 80016ec:	492c      	ldr	r1, [pc, #176]	@ (80017a0 <GPS_FormatData+0x158>)
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	60fb      	str	r3, [r7, #12]
	dataGPS[8] = (latDD >> 16) & 0xFF;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	0c1a      	lsrs	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3308      	adds	r3, #8
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
	dataGPS[9] = (latDD >> 8) & 0xFF;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0a1a      	lsrs	r2, r3, #8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3309      	adds	r3, #9
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]
	dataGPS[10] = latDD & 0xFF;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	330a      	adds	r3, #10
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
	dataGPS[11] = ((int)gps->data.longitudeDegrees << 1) | gps->data.lon;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb9c 	bl	8000e5c <__aeabi_f2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	b25b      	sxtb	r3, r3
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b25a      	sxtb	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25a      	sxtb	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	330b      	adds	r3, #11
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
	uint32_t lonDD = (int) (gps->data.longitudeDegrees * 1000000) % 1000000;  // fractional degrees (up to 20 bits), 6 digits
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001746:	4914      	ldr	r1, [pc, #80]	@ (8001798 <GPS_FormatData+0x150>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fa37 	bl	8000bbc <__aeabi_fmul>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fb83 	bl	8000e5c <__aeabi_f2iz>
 8001756:	4602      	mov	r2, r0
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <GPS_FormatData+0x154>)
 800175a:	fb83 1302 	smull	r1, r3, r3, r2
 800175e:	1499      	asrs	r1, r3, #18
 8001760:	17d3      	asrs	r3, r2, #31
 8001762:	1acb      	subs	r3, r1, r3
 8001764:	490e      	ldr	r1, [pc, #56]	@ (80017a0 <GPS_FormatData+0x158>)
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	60bb      	str	r3, [r7, #8]
	dataGPS[12] = (lonDD >> 16) & 0xFF;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	0c1a      	lsrs	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	330c      	adds	r3, #12
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]
	dataGPS[13] = (lonDD >> 8) & 0xFF;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0a1a      	lsrs	r2, r3, #8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	330d      	adds	r3, #13
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
	dataGPS[14] = lonDD & 0xFF;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	330e      	adds	r3, #14
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	49742400 	.word	0x49742400
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	000f4240 	.word	0x000f4240

080017a4 <lora_init>:
#include "lora.h"

SUBGHZ_HandleTypeDef hsubghz;

bool lora_init()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
    // initialize SubGHz with correct prescaler
    // #define LL_SPI_BAUDRATEPRESCALER_DIV4      (SPI_CR1_BR_0)  /*!< BaudRate control equal to fPCLK/4   */
    hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8; // #define SPI_CR1_BR_1                (0x2UL << SPI_CR1_BR_Pos)                  /*!< 0x00000010 */ from the wle5
 80017aa:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <lora_init+0xdc>)
 80017ac:	2210      	movs	r2, #16
 80017ae:	601a      	str	r2, [r3, #0]
    if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017b0:	4833      	ldr	r0, [pc, #204]	@ (8001880 <lora_init+0xdc>)
 80017b2:	f005 fafd 	bl	8006db0 <HAL_SUBGHZ_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <lora_init+0x1c>
        return false;
 80017bc:	2300      	movs	r3, #0
 80017be:	e05a      	b.n	8001876 <lora_init+0xd2>

    // put radio in standby (RC oscillator) --> i googles this
    uint8_t standby = 0x00; // STDBY_RC
 80017c0:	2300      	movs	r3, #0
 80017c2:	747b      	strb	r3, [r7, #17]
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_STANDBY, &standby, 1) != HAL_OK)
 80017c4:	f107 0211 	add.w	r2, r7, #17
 80017c8:	2301      	movs	r3, #1
 80017ca:	2180      	movs	r1, #128	@ 0x80
 80017cc:	482c      	ldr	r0, [pc, #176]	@ (8001880 <lora_init+0xdc>)
 80017ce:	f005 fb53 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <lora_init+0x38>
        return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e04c      	b.n	8001876 <lora_init+0xd2>

    // set packet type to LoRa
    uint8_t packetType = 0x01; // 0x01 = LoRa
 80017dc:	2301      	movs	r3, #1
 80017de:	743b      	strb	r3, [r7, #16]
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, &packetType, 1) != HAL_OK)
 80017e0:	f107 0210 	add.w	r2, r7, #16
 80017e4:	2301      	movs	r3, #1
 80017e6:	218a      	movs	r1, #138	@ 0x8a
 80017e8:	4825      	ldr	r0, [pc, #148]	@ (8001880 <lora_init+0xdc>)
 80017ea:	f005 fb45 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <lora_init+0x54>
        return false;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e03e      	b.n	8001876 <lora_init+0xd2>

    // set frequency to  921.2 MHz and set TX Power to 14 dBm since thats what the node code does
    float freq = 921.2;
 80017f8:	4b22      	ldr	r3, [pc, #136]	@ (8001884 <lora_init+0xe0>)
 80017fa:	617b      	str	r3, [r7, #20]
    bool setFreq = lora_setFrequency(freq);
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f000 f90f 	bl	8001a20 <lora_setFrequency>
 8001802:	4603      	mov	r3, r0
 8001804:	74fb      	strb	r3, [r7, #19]
    bool setPower = lora_setTxPower(14);
 8001806:	200e      	movs	r0, #14
 8001808:	f000 f950 	bl	8001aac <lora_setTxPower>
 800180c:	4603      	mov	r3, r0
 800180e:	74bb      	strb	r3, [r7, #18]
    if (!setPower || !setFreq) return false;
 8001810:	7cbb      	ldrb	r3, [r7, #18]
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <lora_init+0x84>
 800181c:	7cfb      	ldrb	r3, [r7, #19]
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <lora_init+0x88>
 8001828:	2300      	movs	r3, #0
 800182a:	e024      	b.n	8001876 <lora_init+0xd2>

    // set modulation parameters (SF7, BW 125 kHz, CR 4/4)
    if (!lora_setSF(0x09)) return false;
 800182c:	2009      	movs	r0, #9
 800182e:	f000 f987 	bl	8001b40 <lora_setSF>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <lora_init+0x9e>
 800183e:	2300      	movs	r3, #0
 8001840:	e019      	b.n	8001876 <lora_init+0xd2>

    // set packet parameters (preamble = 8, header = explicit, CRC on, IQ standard)
    uint8_t pktParams[9] = {
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <lora_init+0xe4>)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	8019      	strh	r1, [r3, #0]
 8001850:	3302      	adds	r3, #2
 8001852:	0c0a      	lsrs	r2, r1, #16
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	f107 030b 	add.w	r3, r7, #11
 800185a:	2200      	movs	r2, #0
 800185c:	801a      	strh	r2, [r3, #0]
        0x00,       // Explicit header
        0x10,       // Payload length = 16 bytes
        0x01,       // CRC on
        0x00        // Standard IQ
    };
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS, pktParams, 7) != HAL_OK)
 800185e:	1d3a      	adds	r2, r7, #4
 8001860:	2307      	movs	r3, #7
 8001862:	218c      	movs	r1, #140	@ 0x8c
 8001864:	4806      	ldr	r0, [pc, #24]	@ (8001880 <lora_init+0xdc>)
 8001866:	f005 fb07 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <lora_init+0xd0>
        return false;
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <lora_init+0xd2>

    // radio is now initialized for LoRa operation
    return true;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001f4 	.word	0x200001f4
 8001884:	44664ccd 	.word	0x44664ccd
 8001888:	0800b4c4 	.word	0x0800b4c4

0800188c <lora_send>:


bool lora_send(const uint8_t* data, uint8_t len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
    // write payload to FIFO (starting at offset 0)
    // only need to write to FIFO via HAL_SUBGHZ_WriteBuffer(), dont need to manually set the FIFO address every time
    uint8_t fifo_base[2] = { 0x00, 0x00 }; // TX base, RX base
 8001898:	2300      	movs	r3, #0
 800189a:	81bb      	strh	r3, [r7, #12]
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_BUFFERBASEADDRESS, fifo_base, 2) != HAL_OK)
 800189c:	f107 020c 	add.w	r2, r7, #12
 80018a0:	2302      	movs	r3, #2
 80018a2:	218f      	movs	r1, #143	@ 0x8f
 80018a4:	4811      	ldr	r0, [pc, #68]	@ (80018ec <lora_send+0x60>)
 80018a6:	f005 fae7 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <lora_send+0x28>
        return false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e017      	b.n	80018e4 <lora_send+0x58>

    // write payload to FIFO starting at offset 0x00
    if (HAL_SUBGHZ_WriteBuffer(&hsubghz, 0x00, (uint8_t*)data, len) != HAL_OK)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	2100      	movs	r1, #0
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <lora_send+0x60>)
 80018be:	f005 fb8e 	bl	8006fde <HAL_SUBGHZ_WriteBuffer>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <lora_send+0x40>
        return false;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e00b      	b.n	80018e4 <lora_send+0x58>

    // trigger transmission
    if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TX, NULL, 0) != HAL_OK)
 80018cc:	2300      	movs	r3, #0
 80018ce:	2200      	movs	r2, #0
 80018d0:	2183      	movs	r1, #131	@ 0x83
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <lora_send+0x60>)
 80018d4:	f005 fad0 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <lora_send+0x56>
        return false;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <lora_send+0x58>

    return true;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200001f4 	.word	0x200001f4

080018f0 <lora_receive>:

bool lora_receive(uint8_t* data, uint8_t len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]

    if (!lora_available()) return false;
 80018fc:	f000 f8fa 	bl	8001af4 <lora_available>
 8001900:	4603      	mov	r3, r0
 8001902:	f083 0301 	eor.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <lora_receive+0x20>
 800190c:	2300      	movs	r3, #0
 800190e:	e024      	b.n	800195a <lora_receive+0x6a>

    HAL_StatusTypeDef status;
    uint8_t packet_len = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	73bb      	strb	r3, [r7, #14]

    // read the RX buffer status (get payload length)
    // No more manually skipping the 4 headers that are at the beginning of the rxBuf
    status = HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_RXBUFFERSTATUS, &packet_len, 1);
 8001914:	f107 020e 	add.w	r2, r7, #14
 8001918:	2301      	movs	r3, #1
 800191a:	2113      	movs	r1, #19
 800191c:	4811      	ldr	r0, [pc, #68]	@ (8001964 <lora_receive+0x74>)
 800191e:	f005 fb0a 	bl	8006f36 <HAL_SUBGHZ_ExecGetCmd>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK || packet_len == 0 || packet_len > len)
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <lora_receive+0x4a>
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <lora_receive+0x4a>
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	429a      	cmp	r2, r3
 8001938:	d201      	bcs.n	800193e <lora_receive+0x4e>
    {
        return false;
 800193a:	2300      	movs	r3, #0
 800193c:	e00d      	b.n	800195a <lora_receive+0x6a>
    }

    // read the actual data from the radio RX buffer
    // this does the buffer thingy
    status = HAL_SUBGHZ_ReadBuffer(&hsubghz, 0x00, data, packet_len);
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	2100      	movs	r1, #0
 8001944:	4807      	ldr	r0, [pc, #28]	@ (8001964 <lora_receive+0x74>)
 8001946:	f005 fb9d 	bl	8007084 <HAL_SUBGHZ_ReadBuffer>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <lora_receive+0x68>
    {
        return false;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <lora_receive+0x6a>
    }

    return true;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001f4 	.word	0x200001f4

08001968 <lora_waitPacketSent>:


bool lora_waitPacketSent(uint32_t timeout_ms)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    uint8_t irq_status[2];
    uint32_t start = HAL_GetTick();
 8001970:	f002 feb8 	bl	80046e4 <HAL_GetTick>
 8001974:	4603      	mov	r3, r0
 8001976:	617b      	str	r3, [r7, #20]

    while ((HAL_GetTick() - start) < timeout_ms)
 8001978:	e01a      	b.n	80019b0 <lora_waitPacketSent+0x48>
    {
        if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, irq_status, 2) == HAL_OK)
 800197a:	f107 0210 	add.w	r2, r7, #16
 800197e:	2302      	movs	r3, #2
 8001980:	2112      	movs	r1, #18
 8001982:	4812      	ldr	r0, [pc, #72]	@ (80019cc <lora_waitPacketSent+0x64>)
 8001984:	f005 fad7 	bl	8006f36 <HAL_SUBGHZ_ExecGetCmd>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d110      	bne.n	80019b0 <lora_waitPacketSent+0x48>
        {
            if (irq_status[1] & 0x0001) // Bit 0 = TX_DONE
 800198e:	7c7b      	ldrb	r3, [r7, #17]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <lora_waitPacketSent+0x48>
            {
                uint8_t clear_all[] = { 0xFF, 0xFF };
 8001998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800199c:	81bb      	strh	r3, [r7, #12]
                HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, clear_all, 2);
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	2302      	movs	r3, #2
 80019a4:	2102      	movs	r1, #2
 80019a6:	4809      	ldr	r0, [pc, #36]	@ (80019cc <lora_waitPacketSent+0x64>)
 80019a8:	f005 fa66 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
                return true;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e009      	b.n	80019c4 <lora_waitPacketSent+0x5c>
    while ((HAL_GetTick() - start) < timeout_ms)
 80019b0:	f002 fe98 	bl	80046e4 <HAL_GetTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d8db      	bhi.n	800197a <lora_waitPacketSent+0x12>
            }
        }
    }
    return false;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200001f4 	.word	0x200001f4

080019d0 <lora_waitAvailableTimeout>:

bool lora_waitAvailableTimeout(uint32_t timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 80019d8:	f002 fe84 	bl	80046e4 <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
    uint8_t irqStatus[2];

    while ((HAL_GetTick() - start) < timeout)
 80019e0:	e00d      	b.n	80019fe <lora_waitAvailableTimeout+0x2e>
    {
        HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, irqStatus, 2);
 80019e2:	f107 0208 	add.w	r2, r7, #8
 80019e6:	2302      	movs	r3, #2
 80019e8:	2112      	movs	r1, #18
 80019ea:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <lora_waitAvailableTimeout+0x4c>)
 80019ec:	f005 faa3 	bl	8006f36 <HAL_SUBGHZ_ExecGetCmd>
        if (irqStatus[1] & 0x0002) // RX_DONE is bit 2
 80019f0:	7a7b      	ldrb	r3, [r7, #9]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <lora_waitAvailableTimeout+0x2e>
        {
            return true;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e009      	b.n	8001a12 <lora_waitAvailableTimeout+0x42>
    while ((HAL_GetTick() - start) < timeout)
 80019fe:	f002 fe71 	bl	80046e4 <HAL_GetTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8e8      	bhi.n	80019e2 <lora_waitAvailableTimeout+0x12>
        }
    }
    return false;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001f4 	.word	0x200001f4

08001a20 <lora_setFrequency>:

bool lora_setFrequency(float center)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uint32_t frf = (uint32_t)((center * 1000000.0) / 61.03515625); // RH_RF95_FSTEP
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fd65 	bl	80004f8 <__aeabi_f2d>
 8001a2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001a98 <lora_setFrequency+0x78>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fdb8 	bl	80005a8 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	a317      	add	r3, pc, #92	@ (adr r3, 8001aa0 <lora_setFrequency+0x80>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fed9 	bl	80007fc <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f843 	bl	8000adc <__aeabi_d2uiz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	60fb      	str	r3, [r7, #12]
    uint8_t frf_bytes[3] = {
        (uint8_t)(frf >> 16),
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8001a60:	723b      	strb	r3, [r7, #8]
        (uint8_t)(frf >> 8),
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8001a68:	727b      	strb	r3, [r7, #9]
        (uint8_t)(frf)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	b2db      	uxtb	r3, r3
    uint8_t frf_bytes[3] = {
 8001a6e:	72bb      	strb	r3, [r7, #10]
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, frf_bytes, 3) == HAL_OK;
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	2303      	movs	r3, #3
 8001a76:	2186      	movs	r1, #134	@ 0x86
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <lora_setFrequency+0x88>)
 8001a7a:	f005 f9fd 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	412e8480 	.word	0x412e8480
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	404e8480 	.word	0x404e8480
 8001aa8:	200001f4 	.word	0x200001f4

08001aac <lora_setTxPower>:


bool lora_setTxPower(uint8_t power)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
    // i made this into boolean just in case
    // TX power: 0–22 dBm (limited by hardware)
    // We dont need to manually set rfo on stm32

    uint8_t rampTime = 0x04; // default ramp time: 20us (safe default)
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	73fb      	strb	r3, [r7, #15]

    if (power > 22) // max output power is 22dBm according to datasheet
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b16      	cmp	r3, #22
 8001abe:	d901      	bls.n	8001ac4 <lora_setTxPower+0x18>
        power = 22;
 8001ac0:	2316      	movs	r3, #22
 8001ac2:	71fb      	strb	r3, [r7, #7]

    if (power < 0)
        power = 0;

    uint8_t txParams[2] = {
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	733b      	strb	r3, [r7, #12]
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	737b      	strb	r3, [r7, #13]
        power, // TX power configuration
        rampTime  // Ramp time code
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXPARAMS, txParams, 2) == HAL_OK;
 8001acc:	f107 020c 	add.w	r2, r7, #12
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	218e      	movs	r1, #142	@ 0x8e
 8001ad4:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <lora_setTxPower+0x44>)
 8001ad6:	f005 f9cf 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200001f4 	.word	0x200001f4

08001af4 <lora_available>:

bool lora_available()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
    uint8_t irq_status[2];

    // get the current IRQ flags (non-destructive)
    if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, irq_status, 2) != HAL_OK) return false;
 8001afa:	1d3a      	adds	r2, r7, #4
 8001afc:	2302      	movs	r3, #2
 8001afe:	2102      	movs	r1, #2
 8001b00:	480e      	ldr	r0, [pc, #56]	@ (8001b3c <lora_available+0x48>)
 8001b02:	f005 fa18 	bl	8006f36 <HAL_SUBGHZ_ExecGetCmd>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <lora_available+0x1c>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e010      	b.n	8001b32 <lora_available+0x3e>

    uint16_t irq = ((uint16_t)irq_status[0] << 8) | irq_status[1];
 8001b10:	793b      	ldrb	r3, [r7, #4]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	80fb      	strh	r3, [r7, #6]

    // RX_DONE is bit 1 = 0x0002
    return (irq & 0x0002);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001f4 	.word	0x200001f4

08001b40 <lora_setSF>:


bool lora_setSF(uint8_t sf)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    // i made this into boolean just in case
    // we want sf between 7 and 12
    if (sf < 7 || sf > 12) return false;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d902      	bls.n	8001b56 <lora_setSF+0x16>
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d901      	bls.n	8001b5a <lora_setSF+0x1a>
 8001b56:	2300      	movs	r3, #0
 8001b58:	e014      	b.n	8001b84 <lora_setSF+0x44>

    // Set_ModulationParams(Sf, Bw, Cr, Ldro) is used to configure the LoRa modulation parameters for the sub-GHz radio.
    uint8_t modParams[4] = {
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	733b      	strb	r3, [r7, #12]
 8001b5e:	2304      	movs	r3, #4
 8001b60:	737b      	strb	r3, [r7, #13]
 8001b62:	2300      	movs	r3, #0
 8001b64:	73bb      	strb	r3, [r7, #14]
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
        0x04, // bw 0x04: bandwidth 125 (125 kHz)
        0x0, // cr coding rate 0x0: no forward error correction coding rate 4/4
        0, // lr 0 low data rate optimization disabled, unsure if base station can set this
    };

    return HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS, modParams, 4) == HAL_OK;
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	2304      	movs	r3, #4
 8001b70:	218b      	movs	r1, #139	@ 0x8b
 8001b72:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <lora_setSF+0x4c>)
 8001b74:	f005 f980 	bl	8006e78 <HAL_SUBGHZ_ExecSetCmd>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001f4 	.word	0x200001f4

08001b90 <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	72fb      	strb	r3, [r7, #11]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <lsm6dsox_read_reg+0x20>
  {
    return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <lsm6dsox_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685c      	ldr	r4, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	68d8      	ldr	r0, [r3, #12]
 8001bb8:	893b      	ldrh	r3, [r7, #8]
 8001bba:	7af9      	ldrb	r1, [r7, #11]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	47a0      	blx	r4
 8001bc0:	6178      	str	r0, [r7, #20]

  return ret;
 8001bc2:	697b      	ldr	r3, [r7, #20]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <lsm6dsox_write_reg>:
  *
  */
int32_t __weak lsm6dsox_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	460b      	mov	r3, r1
 8001bda:	72fb      	strb	r3, [r7, #11]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <lsm6dsox_write_reg+0x20>
  {
    return -1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <lsm6dsox_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68d8      	ldr	r0, [r3, #12]
 8001bf4:	893b      	ldrh	r3, [r7, #8]
 8001bf6:	7af9      	ldrb	r1, [r7, #11]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	47a0      	blx	r4
 8001bfc:	6178      	str	r0, [r7, #20]

  return ret;
 8001bfe:	697b      	ldr	r3, [r7, #20]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <bytecpy+0x1e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <bytecpy+0x1e>
  {
    *target = *source;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	701a      	strb	r2, [r3, #0]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001c3c:	f107 0208 	add.w	r2, r7, #8
 8001c40:	2301      	movs	r3, #1
 8001c42:	2110      	movs	r1, #16
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffa3 	bl	8001b90 <lsm6dsox_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	7a3b      	ldrb	r3, [r7, #8]
 8001c5c:	f362 0383 	bfi	r3, r2, #2, #2
 8001c60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001c62:	f107 0208 	add.w	r2, r7, #8
 8001c66:	2301      	movs	r3, #1
 8001c68:	2110      	movs	r1, #16
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffae 	bl	8001bcc <lsm6dsox_write_reg>
 8001c70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fc4e 	bl	8002534 <lsm6dsox_fsm_enable_get>
 8001c98:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 80c4 	bne.w	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001ca2:	7d3b      	ldrb	r3, [r7, #20]
 8001ca4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ca8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001caa:	7d3b      	ldrb	r3, [r7, #20]
 8001cac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001cb0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001cb6:	7d3b      	ldrb	r3, [r7, #20]
 8001cb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001cbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001cc2:	7d3b      	ldrb	r3, [r7, #20]
 8001cc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001cce:	7d3b      	ldrb	r3, [r7, #20]
 8001cd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001cd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001cda:	7d3b      	ldrb	r3, [r7, #20]
 8001cdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001ce6:	7d3b      	ldrb	r3, [r7, #20]
 8001ce8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001cf2:	7d3b      	ldrb	r3, [r7, #20]
 8001cf4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001cfe:	7d7b      	ldrb	r3, [r7, #21]
 8001d00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001d0a:	7d7b      	ldrb	r3, [r7, #21]
 8001d0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001d16:	7d7b      	ldrb	r3, [r7, #21]
 8001d18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001d22:	7d7b      	ldrb	r3, [r7, #21]
 8001d24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001d2e:	7d7b      	ldrb	r3, [r7, #21]
 8001d30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001d3a:	7d7b      	ldrb	r3, [r7, #21]
 8001d3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001d46:	7d7b      	ldrb	r3, [r7, #21]
 8001d48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001d52:	7d7b      	ldrb	r3, [r7, #21]
 8001d54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d163      	bne.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8001d62:	f107 0313 	add.w	r3, r7, #19
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fc05 	bl	8002578 <lsm6dsox_fsm_data_rate_get>
 8001d6e:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d159      	bne.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d853      	bhi.n	8001e24 <lsm6dsox_xl_data_rate_set+0x1a8>
 8001d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <lsm6dsox_xl_data_rate_set+0x108>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001da7 	.word	0x08001da7
 8001d8c:	08001dc5 	.word	0x08001dc5
 8001d90:	08001def 	.word	0x08001def
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001d9e:	e044      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	77fb      	strb	r3, [r7, #31]
            break;
 8001da4:	e041      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001dac:	2302      	movs	r3, #2
 8001dae:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001db0:	e03b      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001db8:	2302      	movs	r3, #2
 8001dba:	77fb      	strb	r3, [r7, #31]
            break;
 8001dbc:	e035      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	77fb      	strb	r3, [r7, #31]
            break;
 8001dc2:	e032      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001dce:	e02c      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	77fb      	strb	r3, [r7, #31]
            break;
 8001dda:	e026      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d102      	bne.n	8001de8 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001de2:	2303      	movs	r3, #3
 8001de4:	77fb      	strb	r3, [r7, #31]
            break;
 8001de6:	e020      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	77fb      	strb	r3, [r7, #31]
            break;
 8001dec:	e01d      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001df4:	2304      	movs	r3, #4
 8001df6:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001df8:	e017      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001e00:	2304      	movs	r3, #4
 8001e02:	77fb      	strb	r3, [r7, #31]
            break;
 8001e04:	e011      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d102      	bne.n	8001e12 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	77fb      	strb	r3, [r7, #31]
            break;
 8001e10:	e00b      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d102      	bne.n	8001e1e <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	77fb      	strb	r3, [r7, #31]
            break;
 8001e1c:	e005      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	77fb      	strb	r3, [r7, #31]
            break;
 8001e22:	e002      	b.n	8001e2a <lsm6dsox_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	77fb      	strb	r3, [r7, #31]
            break;
 8001e28:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8001e2a:	7c3b      	ldrb	r3, [r7, #16]
 8001e2c:	f023 0308 	bic.w	r3, r3, #8
 8001e30:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d16e      	bne.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f002 f81a 	bl	8003e78 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8001e44:	7c3b      	ldrb	r3, [r7, #16]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d062      	beq.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8001e50:	f107 030f 	add.w	r3, r7, #15
 8001e54:	4619      	mov	r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fbd6 	bl	8002608 <lsm6dsox_mlc_data_rate_get>
 8001e5c:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d158      	bne.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
      {
        switch (mlc_odr)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d852      	bhi.n	8001f10 <lsm6dsox_xl_data_rate_set+0x294>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <lsm6dsox_xl_data_rate_set+0x1f4>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e93 	.word	0x08001e93
 8001e78:	08001eb1 	.word	0x08001eb1
 8001e7c:	08001edb 	.word	0x08001edb
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <lsm6dsox_xl_data_rate_set+0x210>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8001e86:	2301      	movs	r3, #1
 8001e88:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001e8a:	e044      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	77fb      	strb	r3, [r7, #31]
            break;
 8001e90:	e041      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <lsm6dsox_xl_data_rate_set+0x222>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001e9c:	e03b      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <lsm6dsox_xl_data_rate_set+0x22e>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	77fb      	strb	r3, [r7, #31]
            break;
 8001ea8:	e035      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	77fb      	strb	r3, [r7, #31]
            break;
 8001eae:	e032      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <lsm6dsox_xl_data_rate_set+0x240>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001eba:	e02c      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <lsm6dsox_xl_data_rate_set+0x24c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	77fb      	strb	r3, [r7, #31]
            break;
 8001ec6:	e026      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d102      	bne.n	8001ed4 <lsm6dsox_xl_data_rate_set+0x258>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	77fb      	strb	r3, [r7, #31]
            break;
 8001ed2:	e020      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	77fb      	strb	r3, [r7, #31]
            break;
 8001ed8:	e01d      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <lsm6dsox_xl_data_rate_set+0x26a>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001ee4:	e017      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <lsm6dsox_xl_data_rate_set+0x276>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001eec:	2304      	movs	r3, #4
 8001eee:	77fb      	strb	r3, [r7, #31]
            break;
 8001ef0:	e011      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d102      	bne.n	8001efe <lsm6dsox_xl_data_rate_set+0x282>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	77fb      	strb	r3, [r7, #31]
            break;
 8001efc:	e00b      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d102      	bne.n	8001f0a <lsm6dsox_xl_data_rate_set+0x28e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001f04:	2304      	movs	r3, #4
 8001f06:	77fb      	strb	r3, [r7, #31]
            break;
 8001f08:	e005      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	77fb      	strb	r3, [r7, #31]
            break;
 8001f0e:	e002      	b.n	8001f16 <lsm6dsox_xl_data_rate_set+0x29a>

          default:
            odr_xl = val;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	77fb      	strb	r3, [r7, #31]
            break;
 8001f14:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <lsm6dsox_xl_data_rate_set+0x2b0>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001f1c:	f107 020c 	add.w	r2, r7, #12
 8001f20:	2301      	movs	r3, #1
 8001f22:	2110      	movs	r1, #16
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fe33 	bl	8001b90 <lsm6dsox_read_reg>
 8001f2a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <lsm6dsox_xl_data_rate_set+0x2d6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	f362 1307 	bfi	r3, r2, #4, #4
 8001f40:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001f42:	f107 020c 	add.w	r2, r7, #12
 8001f46:	2301      	movs	r3, #1
 8001f48:	2110      	movs	r1, #16
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fe3e 	bl	8001bcc <lsm6dsox_write_reg>
 8001f50:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8001f52:	69bb      	ldr	r3, [r7, #24]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2111      	movs	r1, #17
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fe0d 	bl	8001b90 <lsm6dsox_read_reg>
 8001f76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7a3b      	ldrb	r3, [r7, #8]
 8001f88:	f362 0343 	bfi	r3, r2, #1, #3
 8001f8c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001f8e:	f107 0208 	add.w	r2, r7, #8
 8001f92:	2301      	movs	r3, #1
 8001f94:	2111      	movs	r1, #17
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fe18 	bl	8001bcc <lsm6dsox_write_reg>
 8001f9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fab8 	bl	8002534 <lsm6dsox_fsm_enable_get>
 8001fc4:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 80c4 	bne.w	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001fce:	7d3b      	ldrb	r3, [r7, #20]
 8001fd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001fd6:	7d3b      	ldrb	r3, [r7, #20]
 8001fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001fdc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001fe2:	7d3b      	ldrb	r3, [r7, #20]
 8001fe4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001fe8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001fee:	7d3b      	ldrb	r3, [r7, #20]
 8001ff0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ff4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001ffa:	7d3b      	ldrb	r3, [r7, #20]
 8001ffc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002000:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002002:	4313      	orrs	r3, r2
 8002004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002006:	7d3b      	ldrb	r3, [r7, #20]
 8002008:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800200c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800200e:	4313      	orrs	r3, r2
 8002010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002012:	7d3b      	ldrb	r3, [r7, #20]
 8002014:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800201a:	4313      	orrs	r3, r2
 800201c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800201e:	7d3b      	ldrb	r3, [r7, #20]
 8002020:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002026:	4313      	orrs	r3, r2
 8002028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800202a:	7d7b      	ldrb	r3, [r7, #21]
 800202c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002032:	4313      	orrs	r3, r2
 8002034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002036:	7d7b      	ldrb	r3, [r7, #21]
 8002038:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800203c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800203e:	4313      	orrs	r3, r2
 8002040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002042:	7d7b      	ldrb	r3, [r7, #21]
 8002044:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800204a:	4313      	orrs	r3, r2
 800204c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800204e:	7d7b      	ldrb	r3, [r7, #21]
 8002050:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002056:	4313      	orrs	r3, r2
 8002058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800205a:	7d7b      	ldrb	r3, [r7, #21]
 800205c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002062:	4313      	orrs	r3, r2
 8002064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002066:	7d7b      	ldrb	r3, [r7, #21]
 8002068:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800206c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800206e:	4313      	orrs	r3, r2
 8002070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002072:	7d7b      	ldrb	r3, [r7, #21]
 8002074:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800207a:	4313      	orrs	r3, r2
 800207c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800207e:	7d7b      	ldrb	r3, [r7, #21]
 8002080:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002086:	4313      	orrs	r3, r2
 8002088:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800208a:	2b01      	cmp	r3, #1
 800208c:	d163      	bne.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 800208e:	f107 0313 	add.w	r3, r7, #19
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fa6f 	bl	8002578 <lsm6dsox_fsm_data_rate_get>
 800209a:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d159      	bne.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d853      	bhi.n	8002150 <lsm6dsox_gy_data_rate_set+0x1a8>
 80020a8:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <lsm6dsox_gy_data_rate_set+0x108>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	080020d3 	.word	0x080020d3
 80020b8:	080020f1 	.word	0x080020f1
 80020bc:	0800211b 	.word	0x0800211b
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80020c6:	2301      	movs	r3, #1
 80020c8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80020ca:	e044      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	77fb      	strb	r3, [r7, #31]
            break;
 80020d0:	e041      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80020d8:	2302      	movs	r3, #2
 80020da:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80020dc:	e03b      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80020e4:	2302      	movs	r3, #2
 80020e6:	77fb      	strb	r3, [r7, #31]
            break;
 80020e8:	e035      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	77fb      	strb	r3, [r7, #31]
            break;
 80020ee:	e032      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80020f6:	2303      	movs	r3, #3
 80020f8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80020fa:	e02c      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8002102:	2303      	movs	r3, #3
 8002104:	77fb      	strb	r3, [r7, #31]
            break;
 8002106:	e026      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d102      	bne.n	8002114 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800210e:	2303      	movs	r3, #3
 8002110:	77fb      	strb	r3, [r7, #31]
            break;
 8002112:	e020      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	77fb      	strb	r3, [r7, #31]
            break;
 8002118:	e01d      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002120:	2304      	movs	r3, #4
 8002122:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8002124:	e017      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d102      	bne.n	8002132 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800212c:	2304      	movs	r3, #4
 800212e:	77fb      	strb	r3, [r7, #31]
            break;
 8002130:	e011      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d102      	bne.n	800213e <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002138:	2304      	movs	r3, #4
 800213a:	77fb      	strb	r3, [r7, #31]
            break;
 800213c:	e00b      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d102      	bne.n	800214a <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002144:	2304      	movs	r3, #4
 8002146:	77fb      	strb	r3, [r7, #31]
            break;
 8002148:	e005      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	77fb      	strb	r3, [r7, #31]
            break;
 800214e:	e002      	b.n	8002156 <lsm6dsox_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	77fb      	strb	r3, [r7, #31]
            break;
 8002154:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8002156:	7c3b      	ldrb	r3, [r7, #16]
 8002158:	f023 0308 	bic.w	r3, r3, #8
 800215c:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d170      	bne.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 fe84 	bl	8003e78 <lsm6dsox_embedded_sens_get>
 8002170:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8002172:	7c3b      	ldrb	r3, [r7, #16]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800217e:	f107 030f 	add.w	r3, r7, #15
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fa3f 	bl	8002608 <lsm6dsox_mlc_data_rate_get>
 800218a:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d159      	bne.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d853      	bhi.n	8002240 <lsm6dsox_gy_data_rate_set+0x298>
 8002198:	a201      	add	r2, pc, #4	@ (adr r2, 80021a0 <lsm6dsox_gy_data_rate_set+0x1f8>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021c3 	.word	0x080021c3
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	0800220b 	.word	0x0800220b
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80021b6:	2301      	movs	r3, #1
 80021b8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80021ba:	e044      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	77fb      	strb	r3, [r7, #31]
            break;
 80021c0:	e041      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80021c8:	2302      	movs	r3, #2
 80021ca:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80021cc:	e03b      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80021d4:	2302      	movs	r3, #2
 80021d6:	77fb      	strb	r3, [r7, #31]
            break;
 80021d8:	e035      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	77fb      	strb	r3, [r7, #31]
            break;
 80021de:	e032      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80021e6:	2303      	movs	r3, #3
 80021e8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80021ea:	e02c      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80021f2:	2303      	movs	r3, #3
 80021f4:	77fb      	strb	r3, [r7, #31]
            break;
 80021f6:	e026      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d102      	bne.n	8002204 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80021fe:	2303      	movs	r3, #3
 8002200:	77fb      	strb	r3, [r7, #31]
            break;
 8002202:	e020      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	77fb      	strb	r3, [r7, #31]
            break;
 8002208:	e01d      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002210:	2304      	movs	r3, #4
 8002212:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8002214:	e017      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800221c:	2304      	movs	r3, #4
 800221e:	77fb      	strb	r3, [r7, #31]
            break;
 8002220:	e011      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d102      	bne.n	800222e <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002228:	2304      	movs	r3, #4
 800222a:	77fb      	strb	r3, [r7, #31]
            break;
 800222c:	e00b      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d102      	bne.n	800223a <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8002234:	2304      	movs	r3, #4
 8002236:	77fb      	strb	r3, [r7, #31]
            break;
 8002238:	e005      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	77fb      	strb	r3, [r7, #31]
            break;
 800223e:	e002      	b.n	8002246 <lsm6dsox_gy_data_rate_set+0x29e>

          default:
            odr_gy = val;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	77fb      	strb	r3, [r7, #31]
            break;
 8002244:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <lsm6dsox_gy_data_rate_set+0x2b4>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	2301      	movs	r3, #1
 8002252:	2111      	movs	r1, #17
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fc9b 	bl	8001b90 <lsm6dsox_read_reg>
 800225a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <lsm6dsox_gy_data_rate_set+0x2da>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	b2da      	uxtb	r2, r3
 800226a:	7b3b      	ldrb	r3, [r7, #12]
 800226c:	f362 1307 	bfi	r3, r2, #4, #4
 8002270:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8002272:	f107 020c 	add.w	r2, r7, #12
 8002276:	2301      	movs	r3, #1
 8002278:	2111      	movs	r1, #17
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fca6 	bl	8001bcc <lsm6dsox_write_reg>
 8002280:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8002282:	69bb      	ldr	r3, [r7, #24]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8002298:	f107 0208 	add.w	r2, r7, #8
 800229c:	2301      	movs	r3, #1
 800229e:	2101      	movs	r1, #1
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fc75 	bl	8001b90 <lsm6dsox_read_reg>
 80022a6:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	7a3b      	ldrb	r3, [r7, #8]
 80022b8:	f362 1387 	bfi	r3, r2, #6, #2
 80022bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 80022be:	f107 0208 	add.w	r2, r7, #8
 80022c2:	2301      	movs	r3, #1
 80022c4:	2101      	movs	r1, #1
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fc80 	bl	8001bcc <lsm6dsox_write_reg>
 80022cc:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 80022e2:	2301      	movs	r3, #1
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	210f      	movs	r1, #15
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fc51 	bl	8001b90 <lsm6dsox_read_reg>
 80022ee:	60f8      	str	r0, [r7, #12]

  return ret;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8002306:	f107 0208 	add.w	r2, r7, #8
 800230a:	2301      	movs	r3, #1
 800230c:	2112      	movs	r1, #18
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fc3e 	bl	8001b90 <lsm6dsox_read_reg>
 8002314:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <lsm6dsox_reset_set+0x42>
  {
    reg.sw_reset = val;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	7a3b      	ldrb	r3, [r7, #8]
 8002326:	f362 0300 	bfi	r3, r2, #0, #1
 800232a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800232c:	f107 0208 	add.w	r2, r7, #8
 8002330:	2301      	movs	r3, #1
 8002332:	2112      	movs	r1, #18
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fc49 	bl	8001bcc <lsm6dsox_write_reg>
 800233a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800233c:	68fb      	ldr	r3, [r7, #12]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	2301      	movs	r3, #1
 8002356:	2112      	movs	r1, #18
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fc19 	bl	8001b90 <lsm6dsox_read_reg>
 800235e:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8002360:	7a3b      	ldrb	r3, [r7, #8]
 8002362:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	701a      	strb	r2, [r3, #0]

  return ret;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(const stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	2301      	movs	r3, #1
 800238a:	2118      	movs	r1, #24
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fbff 	bl	8001b90 <lsm6dsox_read_reg>
 8002392:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d111      	bne.n	80023be <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	09db      	lsrs	r3, r3, #7
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	7b3b      	ldrb	r3, [r7, #12]
 80023a8:	f362 0341 	bfi	r3, r2, #1, #1
 80023ac:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80023ae:	f107 020c 	add.w	r2, r7, #12
 80023b2:	2301      	movs	r3, #1
 80023b4:	2118      	movs	r1, #24
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fc08 	bl	8001bcc <lsm6dsox_write_reg>
 80023bc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80023c4:	f107 0210 	add.w	r2, r7, #16
 80023c8:	2301      	movs	r3, #1
 80023ca:	2162      	movs	r1, #98	@ 0x62
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fbdf 	bl	8001b90 <lsm6dsox_read_reg>
 80023d2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	7c3b      	ldrb	r3, [r7, #16]
 80023e4:	f362 03c4 	bfi	r3, r2, #3, #2
 80023e8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80023ea:	f107 0210 	add.w	r2, r7, #16
 80023ee:	2301      	movs	r3, #1
 80023f0:	2162      	movs	r1, #98	@ 0x62
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fbea 	bl	8001bcc <lsm6dsox_write_reg>
 80023f8:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80023fa:	697b      	ldr	r3, [r7, #20]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <lsm6dsox_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_wkup_threshold_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_ths_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_THS, (uint8_t *)&reg, 1);
 8002410:	f107 0208 	add.w	r2, r7, #8
 8002414:	2301      	movs	r3, #1
 8002416:	215b      	movs	r1, #91	@ 0x5b
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fbb9 	bl	8001b90 <lsm6dsox_read_reg>
 800241e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <lsm6dsox_wkup_threshold_set+0x42>
  {
    reg.wk_ths = val;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800242c:	b2da      	uxtb	r2, r3
 800242e:	7a3b      	ldrb	r3, [r7, #8]
 8002430:	f362 0305 	bfi	r3, r2, #0, #6
 8002434:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_THS, (uint8_t *)&reg, 1);
 8002436:	f107 0208 	add.w	r2, r7, #8
 800243a:	2301      	movs	r3, #1
 800243c:	215b      	movs	r1, #91	@ 0x5b
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fbc4 	bl	8001bcc <lsm6dsox_write_reg>
 8002444:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <lsm6dsox_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_wkup_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800245c:	f107 0208 	add.w	r2, r7, #8
 8002460:	2301      	movs	r3, #1
 8002462:	215c      	movs	r1, #92	@ 0x5c
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fb93 	bl	8001b90 <lsm6dsox_read_reg>
 800246a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <lsm6dsox_wkup_dur_set+0x42>
  {
    reg.wake_dur = val;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	b2da      	uxtb	r2, r3
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	f362 1346 	bfi	r3, r2, #5, #2
 8002480:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 8002482:	f107 0208 	add.w	r2, r7, #8
 8002486:	2301      	movs	r3, #1
 8002488:	215c      	movs	r1, #92	@ 0x5c
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fb9e 	bl	8001bcc <lsm6dsox_write_reg>
 8002490:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <lsm6dsox_act_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_act_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_inact_en_t val)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_tap_cfg2_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *)&reg, 1);
 80024a8:	f107 0208 	add.w	r2, r7, #8
 80024ac:	2301      	movs	r3, #1
 80024ae:	2158      	movs	r1, #88	@ 0x58
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fb6d 	bl	8001b90 <lsm6dsox_read_reg>
 80024b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <lsm6dsox_act_mode_set+0x42>
  {
    reg.inact_en = (uint8_t)val;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	7a3b      	ldrb	r3, [r7, #8]
 80024c8:	f362 1346 	bfi	r3, r2, #5, #2
 80024cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *)&reg, 1);
 80024ce:	f107 0208 	add.w	r2, r7, #8
 80024d2:	2301      	movs	r3, #1
 80024d4:	2158      	movs	r1, #88	@ 0x58
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fb78 	bl	8001bcc <lsm6dsox_write_reg>
 80024dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <lsm6dsox_act_sleep_dur_set>:
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_act_sleep_dur_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 80024f4:	f107 0208 	add.w	r2, r7, #8
 80024f8:	2301      	movs	r3, #1
 80024fa:	215c      	movs	r1, #92	@ 0x5c
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fb47 	bl	8001b90 <lsm6dsox_read_reg>
 8002502:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <lsm6dsox_act_sleep_dur_set+0x42>
  {
    reg.sleep_dur = val;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	7a3b      	ldrb	r3, [r7, #8]
 8002514:	f362 0303 	bfi	r3, r2, #0, #4
 8002518:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_WAKE_UP_DUR, (uint8_t *)&reg, 1);
 800251a:	f107 0208 	add.w	r2, r7, #8
 800251e:	2301      	movs	r3, #1
 8002520:	215c      	movs	r1, #92	@ 0x5c
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fb52 	bl	8001bcc <lsm6dsox_write_reg>
 8002528:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 800253e:	2102      	movs	r1, #2
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fea3 	bl	800228c <lsm6dsox_mem_bank_set>
 8002546:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 800254e:	2302      	movs	r3, #2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	2146      	movs	r1, #70	@ 0x46
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fb1b 	bl	8001b90 <lsm6dsox_read_reg>
 800255a:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fe91 	bl	800228c <lsm6dsox_mem_bank_set>
 800256a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800256c:	68fb      	ldr	r3, [r7, #12]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8002582:	2102      	movs	r1, #2
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fe81 	bl	800228c <lsm6dsox_mem_bank_set>
 800258a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8002592:	f107 0208 	add.w	r2, r7, #8
 8002596:	2301      	movs	r3, #1
 8002598:	215f      	movs	r1, #95	@ 0x5f
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff faf8 	bl	8001b90 <lsm6dsox_read_reg>
 80025a0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12a      	bne.n	80025fe <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80025a8:	7a3b      	ldrb	r3, [r7, #8]
 80025aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d81b      	bhi.n	80025ec <lsm6dsox_fsm_data_rate_get+0x74>
 80025b4:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <lsm6dsox_fsm_data_rate_get+0x44>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025e5 	.word	0x080025e5
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
        break;
 80025d2:	e00f      	b.n	80025f4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
        break;
 80025da:	e00b      	b.n	80025f4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
        break;
 80025e2:	e007      	b.n	80025f4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2203      	movs	r2, #3
 80025e8:	701a      	strb	r2, [r3, #0]
        break;
 80025ea:	e003      	b.n	80025f4 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
        break;
 80025f2:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80025f4:	2100      	movs	r1, #0
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fe48 	bl	800228c <lsm6dsox_mem_bank_set>
 80025fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8002612:	2102      	movs	r1, #2
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fe39 	bl	800228c <lsm6dsox_mem_bank_set>
 800261a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8002622:	f107 0208 	add.w	r2, r7, #8
 8002626:	2301      	movs	r3, #1
 8002628:	2160      	movs	r1, #96	@ 0x60
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fab0 	bl	8001b90 <lsm6dsox_read_reg>
 8002630:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12a      	bne.n	800268e <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8002638:	7a3b      	ldrb	r3, [r7, #8]
 800263a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b03      	cmp	r3, #3
 8002642:	d81b      	bhi.n	800267c <lsm6dsox_mlc_data_rate_get+0x74>
 8002644:	a201      	add	r2, pc, #4	@ (adr r2, 800264c <lsm6dsox_mlc_data_rate_get+0x44>)
 8002646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264a:	bf00      	nop
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002665 	.word	0x08002665
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002675 	.word	0x08002675
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
        break;
 8002662:	e00f      	b.n	8002684 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
        break;
 800266a:	e00b      	b.n	8002684 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
        break;
 8002672:	e007      	b.n	8002684 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2203      	movs	r2, #3
 8002678:	701a      	strb	r2, [r3, #0]
        break;
 800267a:	e003      	b.n	8002684 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
        break;
 8002682:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8002684:	2100      	movs	r1, #0
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fe00 	bl	800228c <lsm6dsox_mem_bank_set>
 800268c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <lsm6dsox_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t val)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b092      	sub	sp, #72	@ 0x48
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dsox_pin_int2_route_t  pin_int2_route;
  lsm6dsox_emb_func_int1_t   emb_func_int1 = {0};
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  lsm6dsox_fsm_int1_a_t      fsm_int1_a = {0};
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  lsm6dsox_fsm_int1_b_t      fsm_int1_b = {0};
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  lsm6dsox_int1_ctrl_t       int1_ctrl = {0};
 80026b8:	2300      	movs	r3, #0
 80026ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  lsm6dsox_int2_ctrl_t       int2_ctrl;
  lsm6dsox_mlc_int1_t        mlc_int1 = {0};
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dsox_tap_cfg2_t        tap_cfg2;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg = {0};
 80026c4:	2300      	movs	r3, #0
 80026c6:	763b      	strb	r3, [r7, #24]
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 80026c8:	793b      	ldrb	r3, [r7, #4]
 80026ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026d4:	f362 0300 	bfi	r3, r2, #0, #1
 80026d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 80026dc:	793b      	ldrb	r3, [r7, #4]
 80026de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026e8:	f362 0341 	bfi	r3, r2, #1, #1
 80026ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_boot      = val.boot;
 80026f0:	793b      	ldrb	r3, [r7, #4]
 80026f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026fc:	f362 0382 	bfi	r3, r2, #2, #1
 8002700:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8002704:	793b      	ldrb	r3, [r7, #4]
 8002706:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002710:	f362 03c3 	bfi	r3, r2, #3, #1
 8002714:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8002718:	793b      	ldrb	r3, [r7, #4]
 800271a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002724:	f362 1304 	bfi	r3, r2, #4, #1
 8002728:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_fifo_full = val.fifo_full;
 800272c:	793b      	ldrb	r3, [r7, #4]
 800272e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002738:	f362 1345 	bfi	r3, r2, #5, #1
 800273c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8002740:	793b      	ldrb	r3, [r7, #4]
 8002742:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800274c:	f362 1386 	bfi	r3, r2, #6, #1
 8002750:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8002754:	797b      	ldrb	r3, [r7, #5]
 8002756:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002760:	f362 13c7 	bfi	r3, r2, #7, #1
 8002764:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  md1_cfg.int1_shub         = val.sh_endop;
 8002768:	797b      	ldrb	r3, [r7, #5]
 800276a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	7e3b      	ldrb	r3, [r7, #24]
 8002772:	f362 0300 	bfi	r3, r2, #0, #1
 8002776:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_6d           = val.six_d;
 8002778:	797b      	ldrb	r3, [r7, #5]
 800277a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	7e3b      	ldrb	r3, [r7, #24]
 8002782:	f362 0382 	bfi	r3, r2, #2, #1
 8002786:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_double_tap   = val.double_tap;
 8002788:	797b      	ldrb	r3, [r7, #5]
 800278a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	7e3b      	ldrb	r3, [r7, #24]
 8002792:	f362 03c3 	bfi	r3, r2, #3, #1
 8002796:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_ff           = val.free_fall;
 8002798:	797b      	ldrb	r3, [r7, #5]
 800279a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	7e3b      	ldrb	r3, [r7, #24]
 80027a2:	f362 1304 	bfi	r3, r2, #4, #1
 80027a6:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_wu           = val.wake_up;
 80027a8:	797b      	ldrb	r3, [r7, #5]
 80027aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	7e3b      	ldrb	r3, [r7, #24]
 80027b2:	f362 1345 	bfi	r3, r2, #5, #1
 80027b6:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_single_tap   = val.single_tap;
 80027b8:	797b      	ldrb	r3, [r7, #5]
 80027ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	7e3b      	ldrb	r3, [r7, #24]
 80027c2:	f362 1386 	bfi	r3, r2, #6, #1
 80027c6:	763b      	strb	r3, [r7, #24]
  md1_cfg.int1_sleep_change = val.sleep_change;
 80027c8:	79bb      	ldrb	r3, [r7, #6]
 80027ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	7e3b      	ldrb	r3, [r7, #24]
 80027d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80027d6:	763b      	strb	r3, [r7, #24]
  emb_func_int1.not_used_01 = 0;
 80027d8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80027dc:	f023 0307 	bic.w	r3, r3, #7
 80027e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_step_detector = val.step_detector;
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80027f0:	f362 03c3 	bfi	r3, r2, #3, #1
 80027f4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_tilt          = val.tilt;
 80027f8:	79bb      	ldrb	r3, [r7, #6]
 80027fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002804:	f362 1304 	bfi	r3, r2, #4, #1
 8002808:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002818:	f362 1345 	bfi	r3, r2, #5, #1
 800281c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.not_used_02 = 0;
 8002820:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002828:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 800282c:	79bb      	ldrb	r3, [r7, #6]
 800282e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002838:	f362 13c7 	bfi	r3, r2, #7, #1
 800283c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800284c:	f362 0300 	bfi	r3, r2, #0, #1
 8002850:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002860:	f362 0341 	bfi	r3, r2, #1, #1
 8002864:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002874:	f362 0382 	bfi	r3, r2, #2, #1
 8002878:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm4 = val.fsm4;
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002888:	f362 03c3 	bfi	r3, r2, #3, #1
 800288c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800289c:	f362 1304 	bfi	r3, r2, #4, #1
 80028a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm6 = val.fsm6;
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028b0:	f362 1345 	bfi	r3, r2, #5, #1
 80028b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm7 = val.fsm7;
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028c4:	f362 1386 	bfi	r3, r2, #6, #1
 80028c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_a.int1_fsm8 = val.fsm8;
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80028d8:	f362 13c7 	bfi	r3, r2, #7, #1
 80028dc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80028f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm10 = val.fsm10;
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002900:	f362 1386 	bfi	r3, r2, #6, #1
 8002904:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002914:	f362 1345 	bfi	r3, r2, #5, #1
 8002918:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm12 = val.fsm12;
 800291c:	7a3b      	ldrb	r3, [r7, #8]
 800291e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002928:	f362 1304 	bfi	r3, r2, #4, #1
 800292c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8002930:	7a3b      	ldrb	r3, [r7, #8]
 8002932:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800293c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002940:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8002944:	7a3b      	ldrb	r3, [r7, #8]
 8002946:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002950:	f362 0382 	bfi	r3, r2, #2, #1
 8002954:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8002958:	7a3b      	ldrb	r3, [r7, #8]
 800295a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800295e:	b2da      	uxtb	r2, r3
 8002960:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002964:	f362 0341 	bfi	r3, r2, #1, #1
 8002968:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_b.int1_fsm16 = val.fsm16;
 800296c:	7a3b      	ldrb	r3, [r7, #8]
 800296e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002978:	f362 0300 	bfi	r3, r2, #0, #1
 800297c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  mlc_int1.int1_mlc1 = val.mlc1;
 8002980:	7a3b      	ldrb	r3, [r7, #8]
 8002982:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800298c:	f362 0300 	bfi	r3, r2, #0, #1
 8002990:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc2 = val.mlc2;
 8002994:	7a3b      	ldrb	r3, [r7, #8]
 8002996:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029a0:	f362 0341 	bfi	r3, r2, #1, #1
 80029a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc3 = val.mlc3;
 80029a8:	7a3b      	ldrb	r3, [r7, #8]
 80029aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029b4:	f362 0382 	bfi	r3, r2, #2, #1
 80029b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc4 = val.mlc4;
 80029bc:	7a7b      	ldrb	r3, [r7, #9]
 80029be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029c8:	f362 03c3 	bfi	r3, r2, #3, #1
 80029cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc5 = val.mlc5;
 80029d0:	7a7b      	ldrb	r3, [r7, #9]
 80029d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029dc:	f362 1304 	bfi	r3, r2, #4, #1
 80029e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc6 = val.mlc6;
 80029e4:	7a7b      	ldrb	r3, [r7, #9]
 80029e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029f0:	f362 1345 	bfi	r3, r2, #5, #1
 80029f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc7 = val.mlc7;
 80029f8:	7a7b      	ldrb	r3, [r7, #9]
 80029fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a04:	f362 1386 	bfi	r3, r2, #6, #1
 8002a08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  mlc_int1.int1_mlc8 = val.mlc8;
 8002a0c:	7a7b      	ldrb	r3, [r7, #9]
 8002a0e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a18:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a1c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002a20:	f107 0214 	add.w	r2, r7, #20
 8002a24:	2301      	movs	r3, #1
 8002a26:	2113      	movs	r1, #19
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff f8b1 	bl	8001b90 <lsm6dsox_read_reg>
 8002a2e:	6478      	str	r0, [r7, #68]	@ 0x44

  if (ret == 0)
 8002a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11c      	bne.n	8002a70 <lsm6dsox_pin_int1_route_set+0x3d8>
  {
    if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8002a36:	793b      	ldrb	r3, [r7, #4]
 8002a38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	797b      	ldrb	r3, [r7, #5]
 8002a40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <lsm6dsox_pin_int1_route_set+0x3c0>
    {
      ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8002a4e:	7d3b      	ldrb	r3, [r7, #20]
 8002a50:	f043 0320 	orr.w	r3, r3, #32
 8002a54:	753b      	strb	r3, [r7, #20]
 8002a56:	e003      	b.n	8002a60 <lsm6dsox_pin_int1_route_set+0x3c8>
    }

    else
    {
      ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8002a58:	7d3b      	ldrb	r3, [r7, #20]
 8002a5a:	f023 0320 	bic.w	r3, r3, #32
 8002a5e:	753b      	strb	r3, [r7, #20]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002a60:	f107 0214 	add.w	r2, r7, #20
 8002a64:	2301      	movs	r3, #1
 8002a66:	2113      	movs	r1, #19
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff f8af 	bl	8001bcc <lsm6dsox_write_reg>
 8002a6e:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <lsm6dsox_pin_int1_route_set+0x3e8>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8002a76:	2102      	movs	r1, #2
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fc07 	bl	800228c <lsm6dsox_mem_bank_set>
 8002a7e:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <lsm6dsox_pin_int1_route_set+0x3fe>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MLC_INT1,
 8002a86:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	210d      	movs	r1, #13
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff f89c 	bl	8001bcc <lsm6dsox_write_reg>
 8002a94:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 8002a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <lsm6dsox_pin_int1_route_set+0x414>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 8002a9c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	210a      	movs	r1, #10
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff f891 	bl	8001bcc <lsm6dsox_write_reg>
 8002aaa:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 8002aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <lsm6dsox_pin_int1_route_set+0x42a>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_A,
 8002ab2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	210b      	movs	r1, #11
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff f886 	bl	8001bcc <lsm6dsox_write_reg>
 8002ac0:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <lsm6dsox_pin_int1_route_set+0x440>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FSM_INT1_B,
 8002ac8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002acc:	2301      	movs	r3, #1
 8002ace:	210c      	movs	r1, #12
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff f87b 	bl	8001bcc <lsm6dsox_write_reg>
 8002ad6:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <lsm6dsox_pin_int1_route_set+0x450>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fbd3 	bl	800228c <lsm6dsox_mem_bank_set>
 8002ae6:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 80d5 	bne.w	8002c9a <lsm6dsox_pin_int1_route_set+0x602>
  {
    if ((emb_func_int1.int1_fsm_lc
 8002af0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002af4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002af8:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_sig_mot
 8002afa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002afe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_step_detector
 8002b08:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002b0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	b2da      	uxtb	r2, r3
         | emb_func_int1.int1_tilt
 8002b16:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002b1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm1
 8002b24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm2
 8002b32:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm3
 8002b40:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm4
 8002b4e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm5
 8002b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4313      	orrs	r3, r2
 8002b68:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm6
 8002b6a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm7
 8002b78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
         | fsm_int1_a.int1_fsm8
 8002b86:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm9
 8002b94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm10
 8002ba2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ba6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm11
 8002bb0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm12
 8002bbe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bc2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm13
 8002bcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm14
 8002bda:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm15
 8002be8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b2da      	uxtb	r2, r3
         | fsm_int1_b.int1_fsm16
 8002bf6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bfa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc1
 8002c04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc2
 8002c12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c16:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc3
 8002c20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc4
 8002c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc5
 8002c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc6
 8002c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc7
 8002c58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b2da      	uxtb	r2, r3
         | mlc_int1.int1_mlc8) != PROPERTY_DISABLE)
 8002c66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c6a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
    if ((emb_func_int1.int1_fsm_lc
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <lsm6dsox_pin_int1_route_set+0x5ea>
    {
      md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8002c78:	7e3b      	ldrb	r3, [r7, #24]
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	763b      	strb	r3, [r7, #24]
 8002c80:	e003      	b.n	8002c8a <lsm6dsox_pin_int1_route_set+0x5f2>
    }

    else
    {
      md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8002c82:	7e3b      	ldrb	r3, [r7, #24]
 8002c84:	f023 0302 	bic.w	r3, r3, #2
 8002c88:	763b      	strb	r3, [r7, #24]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT1_CTRL,
 8002c8a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002c8e:	2301      	movs	r3, #1
 8002c90:	210d      	movs	r1, #13
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7fe ff9a 	bl	8001bcc <lsm6dsox_write_reg>
 8002c98:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <lsm6dsox_pin_int1_route_set+0x618>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002ca0:	f107 0218 	add.w	r2, r7, #24
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	215e      	movs	r1, #94	@ 0x5e
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe ff8f 	bl	8001bcc <lsm6dsox_write_reg>
 8002cae:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <lsm6dsox_pin_int1_route_set+0x62e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8002cb6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002cba:	2301      	movs	r3, #1
 8002cbc:	210e      	movs	r1, #14
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7fe ff66 	bl	8001b90 <lsm6dsox_read_reg>
 8002cc4:	6478      	str	r0, [r7, #68]	@ 0x44
                            (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <lsm6dsox_pin_int1_route_set+0x658>
  {
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8002ccc:	793b      	ldrb	r3, [r7, #4]
 8002cce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cd8:	f362 0382 	bfi	r3, r2, #2, #1
 8002cdc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_INT2_CTRL,
 8002ce0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	210e      	movs	r1, #14
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7fe ff6f 	bl	8001bcc <lsm6dsox_write_reg>
 8002cee:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *)&int2_ctrl, 1);
  }

  if (ret == 0)
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <lsm6dsox_pin_int1_route_set+0x66e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002cf6:	f107 021c 	add.w	r2, r7, #28
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	215f      	movs	r1, #95	@ 0x5f
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7fe ff46 	bl	8001b90 <lsm6dsox_read_reg>
 8002d04:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10f      	bne.n	8002d2c <lsm6dsox_pin_int1_route_set+0x694>
  {
    md2_cfg.int2_timestamp = val.timestamp;
 8002d0c:	797b      	ldrb	r3, [r7, #5]
 8002d0e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	7f3b      	ldrb	r3, [r7, #28]
 8002d16:	f362 0300 	bfi	r3, r2, #0, #1
 8002d1a:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002d1c:	f107 021c 	add.w	r2, r7, #28
 8002d20:	2301      	movs	r3, #1
 8002d22:	215f      	movs	r1, #95	@ 0x5f
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7fe ff51 	bl	8001bcc <lsm6dsox_write_reg>
 8002d2a:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <lsm6dsox_pin_int1_route_set+0x6aa>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8002d32:	f107 0220 	add.w	r2, r7, #32
 8002d36:	2301      	movs	r3, #1
 8002d38:	2158      	movs	r1, #88	@ 0x58
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7fe ff28 	bl	8001b90 <lsm6dsox_read_reg>
 8002d40:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <lsm6dsox_pin_int1_route_set+0x6c0>
  {
    ret = lsm6dsox_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8002d48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2100      	movs	r1, #0
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fb10 	bl	8003376 <lsm6dsox_pin_int2_route_get>
 8002d56:	6478      	str	r0, [r7, #68]	@ 0x44
  }

  if (ret == 0)
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 80d2 	bne.w	8002f04 <lsm6dsox_pin_int1_route_set+0x86c>
  {
    if ((pin_int2_route.fifo_bdr
 8002d60:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d68:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_g
 8002d6a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_temp
 8002d78:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	b2da      	uxtb	r2, r3
         | pin_int2_route.drdy_xl
 8002d86:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_full
 8002d94:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_ovr
 8002da2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002da6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
         | pin_int2_route.fifo_th
 8002db0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002db4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b2da      	uxtb	r2, r3
         | pin_int2_route.six_d
 8002dbe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002dc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b2da      	uxtb	r2, r3
         | pin_int2_route.double_tap
 8002dcc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002dd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
         | pin_int2_route.free_fall
 8002dda:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002dde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b2da      	uxtb	r2, r3
         | pin_int2_route.wake_up
 8002de8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002dec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b2da      	uxtb	r2, r3
         | pin_int2_route.single_tap
 8002df6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002dfa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b2da      	uxtb	r2, r3
         | pin_int2_route.sleep_change
 8002e04:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002e08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
         | int1_ctrl.den_drdy_flag
 8002e12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e16:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_boot
 8002e20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_cnt_bdr
 8002e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_g
 8002e3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_drdy_xl
 8002e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_full
 8002e58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_ovr
 8002e66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b2da      	uxtb	r2, r3
         | int1_ctrl.int1_fifo_th
 8002e74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_shub
 8002e82:	7e3b      	ldrb	r3, [r7, #24]
 8002e84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_6d
 8002e8e:	7e3b      	ldrb	r3, [r7, #24]
 8002e90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_double_tap
 8002e9a:	7e3b      	ldrb	r3, [r7, #24]
 8002e9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_ff
 8002ea6:	7e3b      	ldrb	r3, [r7, #24]
 8002ea8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_wu
 8002eb2:	7e3b      	ldrb	r3, [r7, #24]
 8002eb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_single_tap
 8002ebe:	7e3b      	ldrb	r3, [r7, #24]
 8002ec0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b2da      	uxtb	r2, r3
         | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8002eca:	7e3b      	ldrb	r3, [r7, #24]
 8002ecc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b2db      	uxtb	r3, r3
    if ((pin_int2_route.fifo_bdr
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <lsm6dsox_pin_int1_route_set+0x850>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8002eda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee2:	f887 3020 	strb.w	r3, [r7, #32]
 8002ee6:	e005      	b.n	8002ef4 <lsm6dsox_pin_int1_route_set+0x85c>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8002ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef0:	f887 3020 	strb.w	r3, [r7, #32]
    }

    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_TAP_CFG2,
 8002ef4:	f107 0220 	add.w	r2, r7, #32
 8002ef8:	2301      	movs	r3, #1
 8002efa:	2158      	movs	r1, #88	@ 0x58
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7fe fe65 	bl	8001bcc <lsm6dsox_write_reg>
 8002f02:	6478      	str	r0, [r7, #68]	@ 0x44
                             (uint8_t *) &tap_cfg2, 1);
  }

  return ret;
 8002f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3748      	adds	r7, #72	@ 0x48
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <lsm6dsox_pin_int1_route_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                    lsm6dsox_pin_int1_route_t *val)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08c      	sub	sp, #48	@ 0x30
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  lsm6dsox_mlc_int1_t        mlc_int1;
  lsm6dsox_md2_cfg_t         md2_cfg;
  lsm6dsox_md1_cfg_t         md1_cfg;
  lsm6dsox_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8002f18:	2102      	movs	r1, #2
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff f9b6 	bl	800228c <lsm6dsox_mem_bank_set>
 8002f20:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if (ret == 0)
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <lsm6dsox_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT1,
 8002f28:	f107 0214 	add.w	r2, r7, #20
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	210d      	movs	r1, #13
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fe2d 	bl	8001b90 <lsm6dsox_read_reg>
 8002f36:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&mlc_int1, 1);
  }

  if (ret == 0)
 8002f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <lsm6dsox_pin_int1_route_get+0x40>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT1,
 8002f3e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002f42:	2301      	movs	r3, #1
 8002f44:	210a      	movs	r1, #10
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fe22 	bl	8001b90 <lsm6dsox_read_reg>
 8002f4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0)
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <lsm6dsox_pin_int1_route_get+0x56>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_A,
 8002f54:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002f58:	2301      	movs	r3, #1
 8002f5a:	210b      	movs	r1, #11
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fe fe17 	bl	8001b90 <lsm6dsox_read_reg>
 8002f62:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0)
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <lsm6dsox_pin_int1_route_get+0x6c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT1_B,
 8002f6a:	f107 0220 	add.w	r2, r7, #32
 8002f6e:	2301      	movs	r3, #1
 8002f70:	210c      	movs	r1, #12
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fe0c 	bl	8001b90 <lsm6dsox_read_reg>
 8002f78:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0)
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <lsm6dsox_pin_int1_route_get+0x7c>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff f982 	bl	800228c <lsm6dsox_mem_bank_set>
 8002f88:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ret == 0)
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <lsm6dsox_pin_int1_route_get+0x92>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT1_CTRL,
 8002f90:	f107 021c 	add.w	r2, r7, #28
 8002f94:	2301      	movs	r3, #1
 8002f96:	210d      	movs	r1, #13
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fe fdf9 	bl	8001b90 <lsm6dsox_read_reg>
 8002f9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0)
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <lsm6dsox_pin_int1_route_get+0xa8>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002fa6:	f107 020c 	add.w	r2, r7, #12
 8002faa:	2301      	movs	r3, #1
 8002fac:	215e      	movs	r1, #94	@ 0x5e
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe fdee 	bl	8001b90 <lsm6dsox_read_reg>
 8002fb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ret == 0)
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <lsm6dsox_pin_int1_route_get+0xbe>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002fbc:	f107 0208 	add.w	r2, r7, #8
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	2113      	movs	r1, #19
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fde3 	bl	8001b90 <lsm6dsox_read_reg>
 8002fca:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE)
 8002fcc:	7a3b      	ldrb	r3, [r7, #8]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d028      	beq.n	800302a <lsm6dsox_pin_int1_route_get+0x11c>
  {
    if (ret == 0)
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d110      	bne.n	8003000 <lsm6dsox_pin_int1_route_get+0xf2>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8002fde:	f107 0218 	add.w	r2, r7, #24
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	210e      	movs	r1, #14
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe fdd2 	bl	8001b90 <lsm6dsox_read_reg>
 8002fec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                              (uint8_t *)&int2_ctrl, 1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8002fee:	7e3b      	ldrb	r3, [r7, #24]
 8002ff0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ff4:	b2d9      	uxtb	r1, r3
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	7813      	ldrb	r3, [r2, #0]
 8002ffa:	f361 0382 	bfi	r3, r1, #2, #1
 8002ffe:	7013      	strb	r3, [r2, #0]
    }

    if (ret == 0)
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11b      	bne.n	800303e <lsm6dsox_pin_int1_route_get+0x130>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003006:	f107 0210 	add.w	r2, r7, #16
 800300a:	2301      	movs	r3, #1
 800300c:	215f      	movs	r1, #95	@ 0x5f
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fdbe 	bl	8001b90 <lsm6dsox_read_reg>
 8003014:	62f8      	str	r0, [r7, #44]	@ 0x2c
      val->timestamp = md2_cfg.int2_timestamp;
 8003016:	7c3b      	ldrb	r3, [r7, #16]
 8003018:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800301c:	b2d9      	uxtb	r1, r3
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	7853      	ldrb	r3, [r2, #1]
 8003022:	f361 0382 	bfi	r3, r1, #2, #1
 8003026:	7053      	strb	r3, [r2, #1]
 8003028:	e009      	b.n	800303e <lsm6dsox_pin_int1_route_get+0x130>
    }
  }

  else
  {
    val->drdy_temp = PROPERTY_DISABLE;
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	7813      	ldrb	r3, [r2, #0]
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	7013      	strb	r3, [r2, #0]
    val->timestamp = PROPERTY_DISABLE;
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	7853      	ldrb	r3, [r2, #1]
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	7053      	strb	r3, [r2, #1]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 800303e:	7f3b      	ldrb	r3, [r7, #28]
 8003040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003044:	b2d9      	uxtb	r1, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	7813      	ldrb	r3, [r2, #0]
 800304a:	f361 0300 	bfi	r3, r1, #0, #1
 800304e:	7013      	strb	r3, [r2, #0]
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 8003050:	7f3b      	ldrb	r3, [r7, #28]
 8003052:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	7813      	ldrb	r3, [r2, #0]
 800305c:	f361 0341 	bfi	r3, r1, #1, #1
 8003060:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 8003062:	7f3b      	ldrb	r3, [r7, #28]
 8003064:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003068:	b2d9      	uxtb	r1, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	7813      	ldrb	r3, [r2, #0]
 800306e:	f361 03c3 	bfi	r3, r1, #3, #1
 8003072:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 8003074:	7f3b      	ldrb	r3, [r7, #28]
 8003076:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	7813      	ldrb	r3, [r2, #0]
 8003080:	f361 1304 	bfi	r3, r1, #4, #1
 8003084:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 8003086:	7f3b      	ldrb	r3, [r7, #28]
 8003088:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800308c:	b2d9      	uxtb	r1, r3
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	7813      	ldrb	r3, [r2, #0]
 8003092:	f361 1345 	bfi	r3, r1, #5, #1
 8003096:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 8003098:	7f3b      	ldrb	r3, [r7, #28]
 800309a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800309e:	b2d9      	uxtb	r1, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	7813      	ldrb	r3, [r2, #0]
 80030a4:	f361 1386 	bfi	r3, r1, #6, #1
 80030a8:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 80030aa:	7f3b      	ldrb	r3, [r7, #28]
 80030ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80030b0:	b2d9      	uxtb	r1, r3
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	7813      	ldrb	r3, [r2, #0]
 80030b6:	f361 13c7 	bfi	r3, r1, #7, #1
 80030ba:	7013      	strb	r3, [r2, #0]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80030bc:	7f3b      	ldrb	r3, [r7, #28]
 80030be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80030c2:	b2d9      	uxtb	r1, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	7853      	ldrb	r3, [r2, #1]
 80030c8:	f361 0300 	bfi	r3, r1, #0, #1
 80030cc:	7053      	strb	r3, [r2, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80030ce:	7b3b      	ldrb	r3, [r7, #12]
 80030d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030d4:	b2d9      	uxtb	r1, r3
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	7853      	ldrb	r3, [r2, #1]
 80030da:	f361 0341 	bfi	r3, r1, #1, #1
 80030de:	7053      	strb	r3, [r2, #1]
  val->six_d        = md1_cfg.int1_6d;
 80030e0:	7b3b      	ldrb	r3, [r7, #12]
 80030e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030e6:	b2d9      	uxtb	r1, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	7853      	ldrb	r3, [r2, #1]
 80030ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80030f0:	7053      	strb	r3, [r2, #1]
  val->double_tap   = md1_cfg.int1_double_tap;
 80030f2:	7b3b      	ldrb	r3, [r7, #12]
 80030f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80030f8:	b2d9      	uxtb	r1, r3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	7853      	ldrb	r3, [r2, #1]
 80030fe:	f361 1304 	bfi	r3, r1, #4, #1
 8003102:	7053      	strb	r3, [r2, #1]
  val->free_fall    = md1_cfg.int1_ff;
 8003104:	7b3b      	ldrb	r3, [r7, #12]
 8003106:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800310a:	b2d9      	uxtb	r1, r3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	7853      	ldrb	r3, [r2, #1]
 8003110:	f361 1345 	bfi	r3, r1, #5, #1
 8003114:	7053      	strb	r3, [r2, #1]
  val->wake_up      = md1_cfg.int1_wu;
 8003116:	7b3b      	ldrb	r3, [r7, #12]
 8003118:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	7853      	ldrb	r3, [r2, #1]
 8003122:	f361 1386 	bfi	r3, r1, #6, #1
 8003126:	7053      	strb	r3, [r2, #1]
  val->single_tap   = md1_cfg.int1_single_tap;
 8003128:	7b3b      	ldrb	r3, [r7, #12]
 800312a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	7853      	ldrb	r3, [r2, #1]
 8003134:	f361 13c7 	bfi	r3, r1, #7, #1
 8003138:	7053      	strb	r3, [r2, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 800313a:	7b3b      	ldrb	r3, [r7, #12]
 800313c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003140:	b2d9      	uxtb	r1, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	7893      	ldrb	r3, [r2, #2]
 8003146:	f361 0300 	bfi	r3, r1, #0, #1
 800314a:	7093      	strb	r3, [r2, #2]
  val->step_detector = emb_func_int1.int1_step_detector;
 800314c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003150:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003154:	b2d9      	uxtb	r1, r3
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	7893      	ldrb	r3, [r2, #2]
 800315a:	f361 0341 	bfi	r3, r1, #1, #1
 800315e:	7093      	strb	r3, [r2, #2]
  val->tilt          = emb_func_int1.int1_tilt;
 8003160:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003164:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003168:	b2d9      	uxtb	r1, r3
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	7893      	ldrb	r3, [r2, #2]
 800316e:	f361 0382 	bfi	r3, r1, #2, #1
 8003172:	7093      	strb	r3, [r2, #2]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8003174:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003178:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800317c:	b2d9      	uxtb	r1, r3
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	7893      	ldrb	r3, [r2, #2]
 8003182:	f361 03c3 	bfi	r3, r1, #3, #1
 8003186:	7093      	strb	r3, [r2, #2]
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8003188:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800318c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003190:	b2d9      	uxtb	r1, r3
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	7893      	ldrb	r3, [r2, #2]
 8003196:	f361 1304 	bfi	r3, r1, #4, #1
 800319a:	7093      	strb	r3, [r2, #2]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 800319c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031a4:	b2d9      	uxtb	r1, r3
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	7893      	ldrb	r3, [r2, #2]
 80031aa:	f361 1345 	bfi	r3, r1, #5, #1
 80031ae:	7093      	strb	r3, [r2, #2]
  val->fsm2 = fsm_int1_a.int1_fsm2;
 80031b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031b8:	b2d9      	uxtb	r1, r3
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	7893      	ldrb	r3, [r2, #2]
 80031be:	f361 1386 	bfi	r3, r1, #6, #1
 80031c2:	7093      	strb	r3, [r2, #2]
  val->fsm3 = fsm_int1_a.int1_fsm3;
 80031c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031cc:	b2d9      	uxtb	r1, r3
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	7893      	ldrb	r3, [r2, #2]
 80031d2:	f361 13c7 	bfi	r3, r1, #7, #1
 80031d6:	7093      	strb	r3, [r2, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80031d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031e0:	b2d9      	uxtb	r1, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	78d3      	ldrb	r3, [r2, #3]
 80031e6:	f361 0300 	bfi	r3, r1, #0, #1
 80031ea:	70d3      	strb	r3, [r2, #3]
  val->fsm5 = fsm_int1_a.int1_fsm5;
 80031ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031f4:	b2d9      	uxtb	r1, r3
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	78d3      	ldrb	r3, [r2, #3]
 80031fa:	f361 0341 	bfi	r3, r1, #1, #1
 80031fe:	70d3      	strb	r3, [r2, #3]
  val->fsm6 = fsm_int1_a.int1_fsm6;
 8003200:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003204:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003208:	b2d9      	uxtb	r1, r3
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	78d3      	ldrb	r3, [r2, #3]
 800320e:	f361 0382 	bfi	r3, r1, #2, #1
 8003212:	70d3      	strb	r3, [r2, #3]
  val->fsm7 = fsm_int1_a.int1_fsm7;
 8003214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003218:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800321c:	b2d9      	uxtb	r1, r3
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	78d3      	ldrb	r3, [r2, #3]
 8003222:	f361 03c3 	bfi	r3, r1, #3, #1
 8003226:	70d3      	strb	r3, [r2, #3]
  val->fsm8 = fsm_int1_a.int1_fsm8;
 8003228:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800322c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003230:	b2d9      	uxtb	r1, r3
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	78d3      	ldrb	r3, [r2, #3]
 8003236:	f361 1304 	bfi	r3, r1, #4, #1
 800323a:	70d3      	strb	r3, [r2, #3]
  val->fsm9  = fsm_int1_b.int1_fsm9;
 800323c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003240:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003244:	b2d9      	uxtb	r1, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	78d3      	ldrb	r3, [r2, #3]
 800324a:	f361 1345 	bfi	r3, r1, #5, #1
 800324e:	70d3      	strb	r3, [r2, #3]
  val->fsm10 = fsm_int1_b.int1_fsm10;
 8003250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003254:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003258:	b2d9      	uxtb	r1, r3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	78d3      	ldrb	r3, [r2, #3]
 800325e:	f361 1386 	bfi	r3, r1, #6, #1
 8003262:	70d3      	strb	r3, [r2, #3]
  val->fsm11 = fsm_int1_b.int1_fsm11;
 8003264:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003268:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800326c:	b2d9      	uxtb	r1, r3
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	78d3      	ldrb	r3, [r2, #3]
 8003272:	f361 13c7 	bfi	r3, r1, #7, #1
 8003276:	70d3      	strb	r3, [r2, #3]
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8003278:	f897 3020 	ldrb.w	r3, [r7, #32]
 800327c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003280:	b2d9      	uxtb	r1, r3
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	7913      	ldrb	r3, [r2, #4]
 8003286:	f361 0300 	bfi	r3, r1, #0, #1
 800328a:	7113      	strb	r3, [r2, #4]
  val->fsm13 = fsm_int1_b.int1_fsm13;
 800328c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003290:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003294:	b2d9      	uxtb	r1, r3
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	7913      	ldrb	r3, [r2, #4]
 800329a:	f361 0341 	bfi	r3, r1, #1, #1
 800329e:	7113      	strb	r3, [r2, #4]
  val->fsm14 = fsm_int1_b.int1_fsm14;
 80032a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032a8:	b2d9      	uxtb	r1, r3
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	7913      	ldrb	r3, [r2, #4]
 80032ae:	f361 0382 	bfi	r3, r1, #2, #1
 80032b2:	7113      	strb	r3, [r2, #4]
  val->fsm15 = fsm_int1_b.int1_fsm15;
 80032b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80032bc:	b2d9      	uxtb	r1, r3
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	7913      	ldrb	r3, [r2, #4]
 80032c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80032c6:	7113      	strb	r3, [r2, #4]
  val->fsm16 = fsm_int1_b.int1_fsm16;
 80032c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032d0:	b2d9      	uxtb	r1, r3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	7913      	ldrb	r3, [r2, #4]
 80032d6:	f361 1304 	bfi	r3, r1, #4, #1
 80032da:	7113      	strb	r3, [r2, #4]
  val->mlc1 = mlc_int1.int1_mlc1;
 80032dc:	7d3b      	ldrb	r3, [r7, #20]
 80032de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032e2:	b2d9      	uxtb	r1, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	7913      	ldrb	r3, [r2, #4]
 80032e8:	f361 1345 	bfi	r3, r1, #5, #1
 80032ec:	7113      	strb	r3, [r2, #4]
  val->mlc2 = mlc_int1.int1_mlc2;
 80032ee:	7d3b      	ldrb	r3, [r7, #20]
 80032f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80032f4:	b2d9      	uxtb	r1, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	7913      	ldrb	r3, [r2, #4]
 80032fa:	f361 1386 	bfi	r3, r1, #6, #1
 80032fe:	7113      	strb	r3, [r2, #4]
  val->mlc3 = mlc_int1.int1_mlc3;
 8003300:	7d3b      	ldrb	r3, [r7, #20]
 8003302:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003306:	b2d9      	uxtb	r1, r3
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	7913      	ldrb	r3, [r2, #4]
 800330c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003310:	7113      	strb	r3, [r2, #4]
  val->mlc4 = mlc_int1.int1_mlc4;
 8003312:	7d3b      	ldrb	r3, [r7, #20]
 8003314:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003318:	b2d9      	uxtb	r1, r3
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	7953      	ldrb	r3, [r2, #5]
 800331e:	f361 0300 	bfi	r3, r1, #0, #1
 8003322:	7153      	strb	r3, [r2, #5]
  val->mlc5 = mlc_int1.int1_mlc5;
 8003324:	7d3b      	ldrb	r3, [r7, #20]
 8003326:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800332a:	b2d9      	uxtb	r1, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	7953      	ldrb	r3, [r2, #5]
 8003330:	f361 0341 	bfi	r3, r1, #1, #1
 8003334:	7153      	strb	r3, [r2, #5]
  val->mlc6 = mlc_int1.int1_mlc6;
 8003336:	7d3b      	ldrb	r3, [r7, #20]
 8003338:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800333c:	b2d9      	uxtb	r1, r3
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	7953      	ldrb	r3, [r2, #5]
 8003342:	f361 0382 	bfi	r3, r1, #2, #1
 8003346:	7153      	strb	r3, [r2, #5]
  val->mlc7 = mlc_int1.int1_mlc7;
 8003348:	7d3b      	ldrb	r3, [r7, #20]
 800334a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800334e:	b2d9      	uxtb	r1, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	7953      	ldrb	r3, [r2, #5]
 8003354:	f361 03c3 	bfi	r3, r1, #3, #1
 8003358:	7153      	strb	r3, [r2, #5]
  val->mlc8 = mlc_int1.int1_mlc8;
 800335a:	7d3b      	ldrb	r3, [r7, #20]
 800335c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003360:	b2d9      	uxtb	r1, r3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	7953      	ldrb	r3, [r2, #5]
 8003366:	f361 1304 	bfi	r3, r1, #4, #1
 800336a:	7153      	strb	r3, [r2, #5]

  return ret;
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800336e:	4618      	mov	r0, r3
 8003370:	3730      	adds	r7, #48	@ 0x30
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <lsm6dsox_pin_int2_route_get>:
  *
  */
int32_t lsm6dsox_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                    stmdev_ctx_t *aux_ctx,
                                    lsm6dsox_pin_int2_route_t *val)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08e      	sub	sp, #56	@ 0x38
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  lsm6dsox_int2_ctrl_t      int2_ctrl;
  lsm6dsox_mlc_int2_t       mlc_int2;
  lsm6dsox_md2_cfg_t        md2_cfg;
  lsm6dsox_ctrl4_c_t        ctrl4_c;
  int32_t                   ret;
  ret = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34

  if (aux_ctx != NULL)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d011      	beq.n	80033b0 <lsm6dsox_pin_int2_route_get+0x3a>
  {
    ret = lsm6dsox_read_reg(aux_ctx, LSM6DSOX_SPI2_INT_OIS,
 800338c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003390:	2301      	movs	r3, #1
 8003392:	216f      	movs	r1, #111	@ 0x6f
 8003394:	68b8      	ldr	r0, [r7, #8]
 8003396:	f7fe fbfb 	bl	8001b90 <lsm6dsox_read_reg>
 800339a:	6378      	str	r0, [r7, #52]	@ 0x34
                            (uint8_t *)&spi2_int_ois, 1);
    val->drdy_ois = spi2_int_ois.int2_drdy_ois;
 800339c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80033a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033a4:	b2d9      	uxtb	r1, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	7813      	ldrb	r3, [r2, #0]
 80033aa:	f361 0300 	bfi	r3, r1, #0, #1
 80033ae:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8222 	beq.w	80037fc <lsm6dsox_pin_int2_route_get+0x486>
  {
    if (ret == 0)
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <lsm6dsox_pin_int2_route_get+0x52>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80033be:	2102      	movs	r1, #2
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7fe ff63 	bl	800228c <lsm6dsox_mem_bank_set>
 80033c6:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ret == 0)
 80033c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <lsm6dsox_pin_int2_route_get+0x68>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MLC_INT2,
 80033ce:	f107 021c 	add.w	r2, r7, #28
 80033d2:	2301      	movs	r3, #1
 80033d4:	2111      	movs	r1, #17
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7fe fbda 	bl	8001b90 <lsm6dsox_read_reg>
 80033dc:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&mlc_int2, 1);
    }

    if (ret == 0)
 80033de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <lsm6dsox_pin_int2_route_get+0x7e>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_INT2,
 80033e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80033e8:	2301      	movs	r3, #1
 80033ea:	210e      	movs	r1, #14
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7fe fbcf 	bl	8001b90 <lsm6dsox_read_reg>
 80033f2:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <lsm6dsox_pin_int2_route_get+0x94>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_A,
 80033fa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80033fe:	2301      	movs	r3, #1
 8003400:	210f      	movs	r1, #15
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fe fbc4 	bl	8001b90 <lsm6dsox_read_reg>
 8003408:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 800340a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d107      	bne.n	8003420 <lsm6dsox_pin_int2_route_get+0xaa>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_INT2_B,
 8003410:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003414:	2301      	movs	r3, #1
 8003416:	2110      	movs	r1, #16
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7fe fbb9 	bl	8001b90 <lsm6dsox_read_reg>
 800341e:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8003420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <lsm6dsox_pin_int2_route_get+0xba>
    {
      ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003426:	2100      	movs	r1, #0
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fe ff2f 	bl	800228c <lsm6dsox_mem_bank_set>
 800342e:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ret == 0)
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	2b00      	cmp	r3, #0
 8003434:	d107      	bne.n	8003446 <lsm6dsox_pin_int2_route_get+0xd0>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8003436:	f107 0220 	add.w	r2, r7, #32
 800343a:	2301      	movs	r3, #1
 800343c:	210e      	movs	r1, #14
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7fe fba6 	bl	8001b90 <lsm6dsox_read_reg>
 8003444:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <lsm6dsox_pin_int2_route_get+0xe6>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG,
 800344c:	f107 0218 	add.w	r2, r7, #24
 8003450:	2301      	movs	r3, #1
 8003452:	215f      	movs	r1, #95	@ 0x5f
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fe fb9b 	bl	8001b90 <lsm6dsox_read_reg>
 800345a:	6378      	str	r0, [r7, #52]	@ 0x34
                              (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 800345c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <lsm6dsox_pin_int2_route_get+0xfc>
    {
      ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003462:	f107 0214 	add.w	r2, r7, #20
 8003466:	2301      	movs	r3, #1
 8003468:	2113      	movs	r1, #19
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7fe fb90 	bl	8001b90 <lsm6dsox_read_reg>
 8003470:	6378      	str	r0, [r7, #52]	@ 0x34
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8003472:	7d3b      	ldrb	r3, [r7, #20]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d129      	bne.n	80034d2 <lsm6dsox_pin_int2_route_get+0x15c>
    {
      if (ret == 0)
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d111      	bne.n	80034a8 <lsm6dsox_pin_int2_route_get+0x132>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_INT2_CTRL,
 8003484:	f107 0220 	add.w	r2, r7, #32
 8003488:	2301      	movs	r3, #1
 800348a:	210e      	movs	r1, #14
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7fe fb7f 	bl	8001b90 <lsm6dsox_read_reg>
 8003492:	6378      	str	r0, [r7, #52]	@ 0x34
                                (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8003494:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003498:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800349c:	b2d9      	uxtb	r1, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	7813      	ldrb	r3, [r2, #0]
 80034a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80034a6:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 80034a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11b      	bne.n	80034e6 <lsm6dsox_pin_int2_route_get+0x170>
      {
        ret = lsm6dsox_read_reg(ctx, LSM6DSOX_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80034ae:	f107 0218 	add.w	r2, r7, #24
 80034b2:	2301      	movs	r3, #1
 80034b4:	215f      	movs	r1, #95	@ 0x5f
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7fe fb6a 	bl	8001b90 <lsm6dsox_read_reg>
 80034bc:	6378      	str	r0, [r7, #52]	@ 0x34
        val->timestamp = md2_cfg.int2_timestamp;
 80034be:	7e3b      	ldrb	r3, [r7, #24]
 80034c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034c4:	b2d9      	uxtb	r1, r3
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	7853      	ldrb	r3, [r2, #1]
 80034ca:	f361 0300 	bfi	r3, r1, #0, #1
 80034ce:	7053      	strb	r3, [r2, #1]
 80034d0:	e009      	b.n	80034e6 <lsm6dsox_pin_int2_route_get+0x170>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	7813      	ldrb	r3, [r2, #0]
 80034d6:	f023 0308 	bic.w	r3, r3, #8
 80034da:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	7853      	ldrb	r3, [r2, #1]
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 80034e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	7813      	ldrb	r3, [r2, #0]
 80034f4:	f361 0341 	bfi	r3, r1, #1, #1
 80034f8:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 80034fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003502:	b2d9      	uxtb	r1, r3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	7813      	ldrb	r3, [r2, #0]
 8003508:	f361 0382 	bfi	r3, r1, #2, #1
 800350c:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800350e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003512:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003516:	b2d9      	uxtb	r1, r3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	7813      	ldrb	r3, [r2, #0]
 800351c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003520:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8003522:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003526:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800352a:	b2d9      	uxtb	r1, r3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	7813      	ldrb	r3, [r2, #0]
 8003530:	f361 1304 	bfi	r3, r1, #4, #1
 8003534:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8003536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800353a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800353e:	b2d9      	uxtb	r1, r3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	7813      	ldrb	r3, [r2, #0]
 8003544:	f361 1345 	bfi	r3, r1, #5, #1
 8003548:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 800354a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800354e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003552:	b2d9      	uxtb	r1, r3
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	7813      	ldrb	r3, [r2, #0]
 8003558:	f361 1386 	bfi	r3, r1, #6, #1
 800355c:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800355e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003562:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003566:	b2d9      	uxtb	r1, r3
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	7813      	ldrb	r3, [r2, #0]
 800356c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003570:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 8003572:	7e3b      	ldrb	r3, [r7, #24]
 8003574:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003578:	b2d9      	uxtb	r1, r3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	7853      	ldrb	r3, [r2, #1]
 800357e:	f361 0300 	bfi	r3, r1, #0, #1
 8003582:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 8003584:	7e3b      	ldrb	r3, [r7, #24]
 8003586:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	7853      	ldrb	r3, [r2, #1]
 8003590:	f361 0341 	bfi	r3, r1, #1, #1
 8003594:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8003596:	7e3b      	ldrb	r3, [r7, #24]
 8003598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800359c:	b2d9      	uxtb	r1, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	7853      	ldrb	r3, [r2, #1]
 80035a2:	f361 0382 	bfi	r3, r1, #2, #1
 80035a6:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 80035a8:	7e3b      	ldrb	r3, [r7, #24]
 80035aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035ae:	b2d9      	uxtb	r1, r3
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	7853      	ldrb	r3, [r2, #1]
 80035b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80035b8:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 80035ba:	7e3b      	ldrb	r3, [r7, #24]
 80035bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	7853      	ldrb	r3, [r2, #1]
 80035c6:	f361 1304 	bfi	r3, r1, #4, #1
 80035ca:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 80035cc:	7e3b      	ldrb	r3, [r7, #24]
 80035ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80035d2:	b2d9      	uxtb	r1, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	7853      	ldrb	r3, [r2, #1]
 80035d8:	f361 1345 	bfi	r3, r1, #5, #1
 80035dc:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 80035de:	7e3b      	ldrb	r3, [r7, #24]
 80035e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80035e4:	b2d9      	uxtb	r1, r3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	7853      	ldrb	r3, [r2, #1]
 80035ea:	f361 1386 	bfi	r3, r1, #6, #1
 80035ee:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 80035f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80035f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035f8:	b2d9      	uxtb	r1, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	7853      	ldrb	r3, [r2, #1]
 80035fe:	f361 13c7 	bfi	r3, r1, #7, #1
 8003602:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8003604:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003608:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800360c:	b2d9      	uxtb	r1, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	7893      	ldrb	r3, [r2, #2]
 8003612:	f361 0300 	bfi	r3, r1, #0, #1
 8003616:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8003618:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800361c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003620:	b2d9      	uxtb	r1, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	7893      	ldrb	r3, [r2, #2]
 8003626:	f361 0382 	bfi	r3, r1, #2, #1
 800362a:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800362c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003630:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003634:	b2d9      	uxtb	r1, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	7893      	ldrb	r3, [r2, #2]
 800363a:	f361 03c3 	bfi	r3, r1, #3, #1
 800363e:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 8003640:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003644:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003648:	b2d9      	uxtb	r1, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	7893      	ldrb	r3, [r2, #2]
 800364e:	f361 1304 	bfi	r3, r1, #4, #1
 8003652:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 8003654:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003658:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800365c:	b2d9      	uxtb	r1, r3
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	7893      	ldrb	r3, [r2, #2]
 8003662:	f361 1345 	bfi	r3, r1, #5, #1
 8003666:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8003668:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800366c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	7893      	ldrb	r3, [r2, #2]
 8003676:	f361 1386 	bfi	r3, r1, #6, #1
 800367a:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 800367c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003680:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003684:	b2d9      	uxtb	r1, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	7893      	ldrb	r3, [r2, #2]
 800368a:	f361 13c7 	bfi	r3, r1, #7, #1
 800368e:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8003690:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003694:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003698:	b2d9      	uxtb	r1, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	78d3      	ldrb	r3, [r2, #3]
 800369e:	f361 0300 	bfi	r3, r1, #0, #1
 80036a2:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 80036a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80036ac:	b2d9      	uxtb	r1, r3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	78d3      	ldrb	r3, [r2, #3]
 80036b2:	f361 0341 	bfi	r3, r1, #1, #1
 80036b6:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 80036b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80036c0:	b2d9      	uxtb	r1, r3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	78d3      	ldrb	r3, [r2, #3]
 80036c6:	f361 0382 	bfi	r3, r1, #2, #1
 80036ca:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 80036cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036d4:	b2d9      	uxtb	r1, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	78d3      	ldrb	r3, [r2, #3]
 80036da:	f361 03c3 	bfi	r3, r1, #3, #1
 80036de:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 80036e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036e8:	b2d9      	uxtb	r1, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	78d3      	ldrb	r3, [r2, #3]
 80036ee:	f361 1304 	bfi	r3, r1, #4, #1
 80036f2:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 80036f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036fc:	b2d9      	uxtb	r1, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	78d3      	ldrb	r3, [r2, #3]
 8003702:	f361 1345 	bfi	r3, r1, #5, #1
 8003706:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8003708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800370c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003710:	b2d9      	uxtb	r1, r3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	78d3      	ldrb	r3, [r2, #3]
 8003716:	f361 1386 	bfi	r3, r1, #6, #1
 800371a:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800371c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003720:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003724:	b2d9      	uxtb	r1, r3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	78d3      	ldrb	r3, [r2, #3]
 800372a:	f361 13c7 	bfi	r3, r1, #7, #1
 800372e:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 8003730:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003734:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003738:	b2d9      	uxtb	r1, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	7913      	ldrb	r3, [r2, #4]
 800373e:	f361 0300 	bfi	r3, r1, #0, #1
 8003742:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 8003744:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003748:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800374c:	b2d9      	uxtb	r1, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	7913      	ldrb	r3, [r2, #4]
 8003752:	f361 0341 	bfi	r3, r1, #1, #1
 8003756:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8003758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800375c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003760:	b2d9      	uxtb	r1, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	7913      	ldrb	r3, [r2, #4]
 8003766:	f361 0382 	bfi	r3, r1, #2, #1
 800376a:	7113      	strb	r3, [r2, #4]
    val->mlc1 = mlc_int2.int2_mlc1;
 800376c:	7f3b      	ldrb	r3, [r7, #28]
 800376e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	7913      	ldrb	r3, [r2, #4]
 8003778:	f361 03c3 	bfi	r3, r1, #3, #1
 800377c:	7113      	strb	r3, [r2, #4]
    val->mlc2 = mlc_int2.int2_mlc2;
 800377e:	7f3b      	ldrb	r3, [r7, #28]
 8003780:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003784:	b2d9      	uxtb	r1, r3
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	7913      	ldrb	r3, [r2, #4]
 800378a:	f361 1304 	bfi	r3, r1, #4, #1
 800378e:	7113      	strb	r3, [r2, #4]
    val->mlc3 = mlc_int2.int2_mlc3;
 8003790:	7f3b      	ldrb	r3, [r7, #28]
 8003792:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003796:	b2d9      	uxtb	r1, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	7913      	ldrb	r3, [r2, #4]
 800379c:	f361 1345 	bfi	r3, r1, #5, #1
 80037a0:	7113      	strb	r3, [r2, #4]
    val->mlc4 = mlc_int2.int2_mlc4;
 80037a2:	7f3b      	ldrb	r3, [r7, #28]
 80037a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037a8:	b2d9      	uxtb	r1, r3
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	7913      	ldrb	r3, [r2, #4]
 80037ae:	f361 1386 	bfi	r3, r1, #6, #1
 80037b2:	7113      	strb	r3, [r2, #4]
    val->mlc5 = mlc_int2.int2_mlc5;
 80037b4:	7f3b      	ldrb	r3, [r7, #28]
 80037b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037ba:	b2d9      	uxtb	r1, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	7913      	ldrb	r3, [r2, #4]
 80037c0:	f361 13c7 	bfi	r3, r1, #7, #1
 80037c4:	7113      	strb	r3, [r2, #4]
    val->mlc6 = mlc_int2.int2_mlc6;
 80037c6:	7f3b      	ldrb	r3, [r7, #28]
 80037c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037cc:	b2d9      	uxtb	r1, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	7953      	ldrb	r3, [r2, #5]
 80037d2:	f361 0300 	bfi	r3, r1, #0, #1
 80037d6:	7153      	strb	r3, [r2, #5]
    val->mlc7 = mlc_int2.int2_mlc7;
 80037d8:	7f3b      	ldrb	r3, [r7, #28]
 80037da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037de:	b2d9      	uxtb	r1, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	7953      	ldrb	r3, [r2, #5]
 80037e4:	f361 0341 	bfi	r3, r1, #1, #1
 80037e8:	7153      	strb	r3, [r2, #5]
    val->mlc8 = mlc_int2.int2_mlc8;
 80037ea:	7f3b      	ldrb	r3, [r7, #28]
 80037ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037f0:	b2d9      	uxtb	r1, r3
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	7953      	ldrb	r3, [r2, #5]
 80037f6:	f361 0382 	bfi	r3, r1, #2, #1
 80037fa:	7153      	strb	r3, [r2, #5]
  }

  return ret;
 80037fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3738      	adds	r7, #56	@ 0x38
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <lsm6dsox_all_sources_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_all_sources_get(const stmdev_ctx_t *ctx,
                                 lsm6dsox_all_sources_t *val)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b094      	sub	sp, #80	@ 0x50
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  lsm6dsox_tap_src_t                  tap_src;
  lsm6dsox_d6d_src_t                  d6d_src;
  lsm6dsox_ctrl5_c_t                  ctrl5_c;
  uint8_t                             reg[12];
  int32_t                             ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 8003810:	f107 0218 	add.w	r2, r7, #24
 8003814:	2301      	movs	r3, #1
 8003816:	2114      	movs	r1, #20
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fe f9b9 	bl	8001b90 <lsm6dsox_read_reg>
 800381e:	64f8      	str	r0, [r7, #76]	@ 0x4c

  if (ret == 0)
 8003820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <lsm6dsox_all_sources_get+0x38>
  {
    ctrl5_c.rounding_status = PROPERTY_ENABLE;
 8003826:	7e3b      	ldrb	r3, [r7, #24]
 8003828:	f043 0310 	orr.w	r3, r3, #16
 800382c:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 800382e:	f107 0218 	add.w	r2, r7, #24
 8003832:	2301      	movs	r3, #1
 8003834:	2114      	movs	r1, #20
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f9c8 	bl	8001bcc <lsm6dsox_write_reg>
 800383c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  }

  if (ret == 0)
 800383e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <lsm6dsox_all_sources_get+0x4e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_ALL_INT_SRC, reg, 12);
 8003844:	f107 020c 	add.w	r2, r7, #12
 8003848:	230c      	movs	r3, #12
 800384a:	211a      	movs	r1, #26
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fe f99f 	bl	8001b90 <lsm6dsox_read_reg>
 8003852:	64f8      	str	r0, [r7, #76]	@ 0x4c
  }

  if (ret == 0)
 8003854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 8309 	bne.w	8003e6e <lsm6dsox_all_sources_get+0x668>
  {
    bytecpy((uint8_t *)&all_int_src, &reg[0]);
 800385c:	f107 020c 	add.w	r2, r7, #12
 8003860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe f9ce 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&wake_up_src, &reg[1]);
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe f9c5 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&tap_src, &reg[2]);
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	f107 0320 	add.w	r3, r7, #32
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe f9bc 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&d6d_src, &reg[3]);
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	1cda      	adds	r2, r3, #3
 8003896:	f107 031c 	add.w	r3, r7, #28
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe f9b3 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&status_reg, &reg[4]);
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe f9aa 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&emb_func_status_mainpage, &reg[5]);
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	1d5a      	adds	r2, r3, #5
 80038ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe f9a1 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&fsm_status_a_mainpage, &reg[6]);
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	1d9a      	adds	r2, r3, #6
 80038cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe f998 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&fsm_status_b_mainpage, &reg[7]);
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	1dda      	adds	r2, r3, #7
 80038de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe f98f 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&mlc_status_mainpage, &reg[8]);
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	f103 0208 	add.w	r2, r3, #8
 80038f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe f985 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&status_master_mainpage, &reg[9]);
 80038fe:	f107 030c 	add.w	r3, r7, #12
 8003902:	f103 0209 	add.w	r2, r3, #9
 8003906:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe f97b 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&fifo_status1, &reg[10]);
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	f103 020a 	add.w	r2, r3, #10
 800391a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe f971 	bl	8001c08 <bytecpy>
    bytecpy((uint8_t *)&fifo_status2, &reg[11]);
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	f103 020b 	add.w	r2, r3, #11
 800392e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe f967 	bl	8001c08 <bytecpy>
    val->timestamp = all_int_src.timestamp_endcount;
 800393a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800393e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003942:	b2d9      	uxtb	r1, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	7813      	ldrb	r3, [r2, #0]
 8003948:	f361 1304 	bfi	r3, r1, #4, #1
 800394c:	7013      	strb	r3, [r2, #0]
    val->wake_up_z    = wake_up_src.z_wu;
 800394e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003956:	b2d9      	uxtb	r1, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	7813      	ldrb	r3, [r2, #0]
 800395c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003960:	7013      	strb	r3, [r2, #0]
    val->wake_up_y    = wake_up_src.y_wu;
 8003962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800396a:	b2d9      	uxtb	r1, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	7853      	ldrb	r3, [r2, #1]
 8003970:	f361 0300 	bfi	r3, r1, #0, #1
 8003974:	7053      	strb	r3, [r2, #1]
    val->wake_up_x    = wake_up_src.x_wu;
 8003976:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800397a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800397e:	b2d9      	uxtb	r1, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	7853      	ldrb	r3, [r2, #1]
 8003984:	f361 0341 	bfi	r3, r1, #1, #1
 8003988:	7053      	strb	r3, [r2, #1]
    val->wake_up      = wake_up_src.wu_ia;
 800398a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800398e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003992:	b2d9      	uxtb	r1, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	7813      	ldrb	r3, [r2, #0]
 8003998:	f361 1386 	bfi	r3, r1, #6, #1
 800399c:	7013      	strb	r3, [r2, #0]
    val->sleep_state  = wake_up_src.sleep_state;
 800399e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039a6:	b2d9      	uxtb	r1, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	78d3      	ldrb	r3, [r2, #3]
 80039ac:	f361 0300 	bfi	r3, r1, #0, #1
 80039b0:	70d3      	strb	r3, [r2, #3]
    val->free_fall    = wake_up_src.ff_ia;
 80039b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039ba:	b2d9      	uxtb	r1, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	7813      	ldrb	r3, [r2, #0]
 80039c0:	f361 1345 	bfi	r3, r1, #5, #1
 80039c4:	7013      	strb	r3, [r2, #0]
    val->sleep_change = wake_up_src.sleep_change_ia;
 80039c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039ca:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2d9      	uxtb	r1, r3
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	7893      	ldrb	r3, [r2, #2]
 80039da:	f361 13c7 	bfi	r3, r1, #7, #1
 80039de:	7093      	strb	r3, [r2, #2]
    val->tap_x      = tap_src.x_tap;
 80039e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039e8:	b2d9      	uxtb	r1, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	7853      	ldrb	r3, [r2, #1]
 80039ee:	f361 1386 	bfi	r3, r1, #6, #1
 80039f2:	7053      	strb	r3, [r2, #1]
    val->tap_y      = tap_src.y_tap;
 80039f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	7853      	ldrb	r3, [r2, #1]
 8003a02:	f361 1345 	bfi	r3, r1, #5, #1
 8003a06:	7053      	strb	r3, [r2, #1]
    val->tap_z      = tap_src.z_tap;
 8003a08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a10:	b2d9      	uxtb	r1, r3
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	7853      	ldrb	r3, [r2, #1]
 8003a16:	f361 1304 	bfi	r3, r1, #4, #1
 8003a1a:	7053      	strb	r3, [r2, #1]
    val->tap_sign   = tap_src.tap_sign;
 8003a1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a24:	b2d9      	uxtb	r1, r3
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	7853      	ldrb	r3, [r2, #1]
 8003a2a:	f361 13c7 	bfi	r3, r1, #7, #1
 8003a2e:	7053      	strb	r3, [r2, #1]
    val->double_tap = tap_src.double_tap;
 8003a30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a38:	b2d9      	uxtb	r1, r3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	7853      	ldrb	r3, [r2, #1]
 8003a3e:	f361 03c3 	bfi	r3, r1, #3, #1
 8003a42:	7053      	strb	r3, [r2, #1]
    val->single_tap = tap_src.single_tap;
 8003a44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a4c:	b2d9      	uxtb	r1, r3
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	7853      	ldrb	r3, [r2, #1]
 8003a52:	f361 0382 	bfi	r3, r1, #2, #1
 8003a56:	7053      	strb	r3, [r2, #1]
    val->six_d_xl = d6d_src.xl;
 8003a58:	7f3b      	ldrb	r3, [r7, #28]
 8003a5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a5e:	b2d9      	uxtb	r1, r3
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	7893      	ldrb	r3, [r2, #2]
 8003a64:	f361 0341 	bfi	r3, r1, #1, #1
 8003a68:	7093      	strb	r3, [r2, #2]
    val->six_d_xh = d6d_src.xh;
 8003a6a:	7f3b      	ldrb	r3, [r7, #28]
 8003a6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a70:	b2d9      	uxtb	r1, r3
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	7893      	ldrb	r3, [r2, #2]
 8003a76:	f361 0382 	bfi	r3, r1, #2, #1
 8003a7a:	7093      	strb	r3, [r2, #2]
    val->six_d_yl = d6d_src.yl;
 8003a7c:	7f3b      	ldrb	r3, [r7, #28]
 8003a7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	7893      	ldrb	r3, [r2, #2]
 8003a88:	f361 03c3 	bfi	r3, r1, #3, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
    val->six_d_yh = d6d_src.yh;
 8003a8e:	7f3b      	ldrb	r3, [r7, #28]
 8003a90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	7893      	ldrb	r3, [r2, #2]
 8003a9a:	f361 1304 	bfi	r3, r1, #4, #1
 8003a9e:	7093      	strb	r3, [r2, #2]
    val->six_d_zl = d6d_src.zl;
 8003aa0:	7f3b      	ldrb	r3, [r7, #28]
 8003aa2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003aa6:	b2d9      	uxtb	r1, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	7893      	ldrb	r3, [r2, #2]
 8003aac:	f361 1345 	bfi	r3, r1, #5, #1
 8003ab0:	7093      	strb	r3, [r2, #2]
    val->six_d_zh = d6d_src.zh;
 8003ab2:	7f3b      	ldrb	r3, [r7, #28]
 8003ab4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ab8:	b2d9      	uxtb	r1, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	7893      	ldrb	r3, [r2, #2]
 8003abe:	f361 1386 	bfi	r3, r1, #6, #1
 8003ac2:	7093      	strb	r3, [r2, #2]
    val->six_d    = d6d_src.d6d_ia;
 8003ac4:	7f3b      	ldrb	r3, [r7, #28]
 8003ac6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003aca:	b2d9      	uxtb	r1, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	7893      	ldrb	r3, [r2, #2]
 8003ad0:	f361 0300 	bfi	r3, r1, #0, #1
 8003ad4:	7093      	strb	r3, [r2, #2]
    val->den_flag = d6d_src.den_drdy;
 8003ad6:	7f3b      	ldrb	r3, [r7, #28]
 8003ad8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003adc:	b2d9      	uxtb	r1, r3
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	7813      	ldrb	r3, [r2, #0]
 8003ae2:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ae6:	7013      	strb	r3, [r2, #0]
    val->drdy_xl   = status_reg.xlda;
 8003ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003af0:	b2d9      	uxtb	r1, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	7813      	ldrb	r3, [r2, #0]
 8003af6:	f361 0300 	bfi	r3, r1, #0, #1
 8003afa:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = status_reg.gda;
 8003afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	7813      	ldrb	r3, [r2, #0]
 8003b0a:	f361 0341 	bfi	r3, r1, #1, #1
 8003b0e:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = status_reg.tda;
 8003b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b18:	b2d9      	uxtb	r1, r3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	7813      	ldrb	r3, [r2, #0]
 8003b1e:	f361 0382 	bfi	r3, r1, #2, #1
 8003b22:	7013      	strb	r3, [r2, #0]
    val->step_detector = emb_func_status_mainpage.is_step_det;
 8003b24:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003b28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b2c:	b2d9      	uxtb	r1, r3
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	78d3      	ldrb	r3, [r2, #3]
 8003b32:	f361 0341 	bfi	r3, r1, #1, #1
 8003b36:	70d3      	strb	r3, [r2, #3]
    val->tilt          = emb_func_status_mainpage.is_tilt;
 8003b38:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003b3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b40:	b2d9      	uxtb	r1, r3
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	78d3      	ldrb	r3, [r2, #3]
 8003b46:	f361 0382 	bfi	r3, r1, #2, #1
 8003b4a:	70d3      	strb	r3, [r2, #3]
    val->sig_mot       = emb_func_status_mainpage.is_sigmot;
 8003b4c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003b50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b54:	b2d9      	uxtb	r1, r3
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	78d3      	ldrb	r3, [r2, #3]
 8003b5a:	f361 03c3 	bfi	r3, r1, #3, #1
 8003b5e:	70d3      	strb	r3, [r2, #3]
    val->fsm_lc        = emb_func_status_mainpage.is_fsm_lc;
 8003b60:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003b64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b68:	b2d9      	uxtb	r1, r3
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	78d3      	ldrb	r3, [r2, #3]
 8003b6e:	f361 1304 	bfi	r3, r1, #4, #1
 8003b72:	70d3      	strb	r3, [r2, #3]
    val->fsm1 = fsm_status_a_mainpage.is_fsm1;
 8003b74:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003b78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b7c:	b2d9      	uxtb	r1, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	78d3      	ldrb	r3, [r2, #3]
 8003b82:	f361 1345 	bfi	r3, r1, #5, #1
 8003b86:	70d3      	strb	r3, [r2, #3]
    val->fsm2 = fsm_status_a_mainpage.is_fsm2;
 8003b88:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003b8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b90:	b2d9      	uxtb	r1, r3
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	78d3      	ldrb	r3, [r2, #3]
 8003b96:	f361 1386 	bfi	r3, r1, #6, #1
 8003b9a:	70d3      	strb	r3, [r2, #3]
    val->fsm3 = fsm_status_a_mainpage.is_fsm3;
 8003b9c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003ba0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ba4:	b2d9      	uxtb	r1, r3
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	78d3      	ldrb	r3, [r2, #3]
 8003baa:	f361 13c7 	bfi	r3, r1, #7, #1
 8003bae:	70d3      	strb	r3, [r2, #3]
    val->fsm4 = fsm_status_a_mainpage.is_fsm4;
 8003bb0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003bb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003bb8:	b2d9      	uxtb	r1, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	7913      	ldrb	r3, [r2, #4]
 8003bbe:	f361 0300 	bfi	r3, r1, #0, #1
 8003bc2:	7113      	strb	r3, [r2, #4]
    val->fsm5 = fsm_status_a_mainpage.is_fsm5;
 8003bc4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003bc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003bcc:	b2d9      	uxtb	r1, r3
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	7913      	ldrb	r3, [r2, #4]
 8003bd2:	f361 0341 	bfi	r3, r1, #1, #1
 8003bd6:	7113      	strb	r3, [r2, #4]
    val->fsm6 = fsm_status_a_mainpage.is_fsm6;
 8003bd8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003bdc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003be0:	b2d9      	uxtb	r1, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	7913      	ldrb	r3, [r2, #4]
 8003be6:	f361 0382 	bfi	r3, r1, #2, #1
 8003bea:	7113      	strb	r3, [r2, #4]
    val->fsm7 = fsm_status_a_mainpage.is_fsm7;
 8003bec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003bf0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003bf4:	b2d9      	uxtb	r1, r3
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	7913      	ldrb	r3, [r2, #4]
 8003bfa:	f361 03c3 	bfi	r3, r1, #3, #1
 8003bfe:	7113      	strb	r3, [r2, #4]
    val->fsm8 = fsm_status_a_mainpage.is_fsm8;
 8003c00:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003c04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003c08:	b2d9      	uxtb	r1, r3
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	7913      	ldrb	r3, [r2, #4]
 8003c0e:	f361 1304 	bfi	r3, r1, #4, #1
 8003c12:	7113      	strb	r3, [r2, #4]
    val->fsm9  = fsm_status_b_mainpage.is_fsm9;
 8003c14:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c1c:	b2d9      	uxtb	r1, r3
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	7913      	ldrb	r3, [r2, #4]
 8003c22:	f361 1345 	bfi	r3, r1, #5, #1
 8003c26:	7113      	strb	r3, [r2, #4]
    val->fsm10 = fsm_status_b_mainpage.is_fsm10;
 8003c28:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c30:	b2d9      	uxtb	r1, r3
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	7913      	ldrb	r3, [r2, #4]
 8003c36:	f361 1386 	bfi	r3, r1, #6, #1
 8003c3a:	7113      	strb	r3, [r2, #4]
    val->fsm11 = fsm_status_b_mainpage.is_fsm11;
 8003c3c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003c44:	b2d9      	uxtb	r1, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	7913      	ldrb	r3, [r2, #4]
 8003c4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c4e:	7113      	strb	r3, [r2, #4]
    val->fsm12 = fsm_status_b_mainpage.is_fsm12;
 8003c50:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c58:	b2d9      	uxtb	r1, r3
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	7953      	ldrb	r3, [r2, #5]
 8003c5e:	f361 0300 	bfi	r3, r1, #0, #1
 8003c62:	7153      	strb	r3, [r2, #5]
    val->fsm13 = fsm_status_b_mainpage.is_fsm13;
 8003c64:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c6c:	b2d9      	uxtb	r1, r3
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	7953      	ldrb	r3, [r2, #5]
 8003c72:	f361 0341 	bfi	r3, r1, #1, #1
 8003c76:	7153      	strb	r3, [r2, #5]
    val->fsm14 = fsm_status_b_mainpage.is_fsm14;
 8003c78:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c80:	b2d9      	uxtb	r1, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	7953      	ldrb	r3, [r2, #5]
 8003c86:	f361 0382 	bfi	r3, r1, #2, #1
 8003c8a:	7153      	strb	r3, [r2, #5]
    val->fsm15 = fsm_status_b_mainpage.is_fsm15;
 8003c8c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003c90:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003c94:	b2d9      	uxtb	r1, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	7953      	ldrb	r3, [r2, #5]
 8003c9a:	f361 03c3 	bfi	r3, r1, #3, #1
 8003c9e:	7153      	strb	r3, [r2, #5]
    val->fsm16 = fsm_status_b_mainpage.is_fsm16;
 8003ca0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003ca4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ca8:	b2d9      	uxtb	r1, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	7953      	ldrb	r3, [r2, #5]
 8003cae:	f361 1304 	bfi	r3, r1, #4, #1
 8003cb2:	7153      	strb	r3, [r2, #5]
    val->mlc1 = mlc_status_mainpage.is_mlc1;
 8003cb4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003cb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cbc:	b2d9      	uxtb	r1, r3
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	7953      	ldrb	r3, [r2, #5]
 8003cc2:	f361 1345 	bfi	r3, r1, #5, #1
 8003cc6:	7153      	strb	r3, [r2, #5]
    val->mlc2 = mlc_status_mainpage.is_mlc2;
 8003cc8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003ccc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003cd0:	b2d9      	uxtb	r1, r3
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	7953      	ldrb	r3, [r2, #5]
 8003cd6:	f361 1386 	bfi	r3, r1, #6, #1
 8003cda:	7153      	strb	r3, [r2, #5]
    val->mlc3 = mlc_status_mainpage.is_mlc3;
 8003cdc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003ce0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ce4:	b2d9      	uxtb	r1, r3
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	7953      	ldrb	r3, [r2, #5]
 8003cea:	f361 13c7 	bfi	r3, r1, #7, #1
 8003cee:	7153      	strb	r3, [r2, #5]
    val->mlc4 = mlc_status_mainpage.is_mlc4;
 8003cf0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	7993      	ldrb	r3, [r2, #6]
 8003cfe:	f361 0300 	bfi	r3, r1, #0, #1
 8003d02:	7193      	strb	r3, [r2, #6]
    val->mlc5 = mlc_status_mainpage.is_mlc5;
 8003d04:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003d08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d0c:	b2d9      	uxtb	r1, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	7993      	ldrb	r3, [r2, #6]
 8003d12:	f361 0341 	bfi	r3, r1, #1, #1
 8003d16:	7193      	strb	r3, [r2, #6]
    val->mlc6 = mlc_status_mainpage.is_mlc6;
 8003d18:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003d1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d20:	b2d9      	uxtb	r1, r3
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	7993      	ldrb	r3, [r2, #6]
 8003d26:	f361 0382 	bfi	r3, r1, #2, #1
 8003d2a:	7193      	strb	r3, [r2, #6]
    val->mlc7 = mlc_status_mainpage.is_mlc7;
 8003d2c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003d30:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d34:	b2d9      	uxtb	r1, r3
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	7993      	ldrb	r3, [r2, #6]
 8003d3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8003d3e:	7193      	strb	r3, [r2, #6]
    val->mlc8 = mlc_status_mainpage.is_mlc8;
 8003d40:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003d44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d48:	b2d9      	uxtb	r1, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	7993      	ldrb	r3, [r2, #6]
 8003d4e:	f361 1304 	bfi	r3, r1, #4, #1
 8003d52:	7193      	strb	r3, [r2, #6]
    val->sh_endop       = status_master_mainpage.sens_hub_endop;
 8003d54:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003d58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d5c:	b2d9      	uxtb	r1, r3
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	7993      	ldrb	r3, [r2, #6]
 8003d62:	f361 1345 	bfi	r3, r1, #5, #1
 8003d66:	7193      	strb	r3, [r2, #6]
    val->sh_slave0_nack = status_master_mainpage.slave0_nack;
 8003d68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003d6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d70:	b2d9      	uxtb	r1, r3
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	7993      	ldrb	r3, [r2, #6]
 8003d76:	f361 1386 	bfi	r3, r1, #6, #1
 8003d7a:	7193      	strb	r3, [r2, #6]
    val->sh_slave1_nack = status_master_mainpage.slave1_nack;
 8003d7c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003d80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d84:	b2d9      	uxtb	r1, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	7993      	ldrb	r3, [r2, #6]
 8003d8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8003d8e:	7193      	strb	r3, [r2, #6]
    val->sh_slave2_nack = status_master_mainpage.slave2_nack;
 8003d90:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003d94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d98:	b2d9      	uxtb	r1, r3
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	79d3      	ldrb	r3, [r2, #7]
 8003d9e:	f361 0300 	bfi	r3, r1, #0, #1
 8003da2:	71d3      	strb	r3, [r2, #7]
    val->sh_slave3_nack = status_master_mainpage.slave3_nack;
 8003da4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003da8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003dac:	b2d9      	uxtb	r1, r3
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	79d3      	ldrb	r3, [r2, #7]
 8003db2:	f361 0341 	bfi	r3, r1, #1, #1
 8003db6:	71d3      	strb	r3, [r2, #7]
    val->sh_wr_once     = status_master_mainpage.wr_once_done;
 8003db8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003dbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	79d3      	ldrb	r3, [r2, #7]
 8003dc6:	f361 0382 	bfi	r3, r1, #2, #1
 8003dca:	71d3      	strb	r3, [r2, #7]
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8003dcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003dd0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
                     fifo_status1.diff_fifo;
 8003dda:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
    val->fifo_diff = (256U * fifo_status2.diff_fifo) +
 8003dde:	4413      	add	r3, r2
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de6:	b299      	uxth	r1, r3
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	8913      	ldrh	r3, [r2, #8]
 8003dec:	f361 0309 	bfi	r3, r1, #0, #10
 8003df0:	8113      	strh	r3, [r2, #8]
    val->fifo_ovr_latched = fifo_status2.over_run_latched;
 8003df2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003df6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dfa:	b2d9      	uxtb	r1, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	7a53      	ldrb	r3, [r2, #9]
 8003e00:	f361 0382 	bfi	r3, r1, #2, #1
 8003e04:	7253      	strb	r3, [r2, #9]
    val->fifo_bdr         = fifo_status2.counter_bdr_ia;
 8003e06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e0e:	b2d9      	uxtb	r1, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	7a53      	ldrb	r3, [r2, #9]
 8003e14:	f361 03c3 	bfi	r3, r1, #3, #1
 8003e18:	7253      	strb	r3, [r2, #9]
    val->fifo_full        = fifo_status2.fifo_full_ia;
 8003e1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e22:	b2d9      	uxtb	r1, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	7a53      	ldrb	r3, [r2, #9]
 8003e28:	f361 1304 	bfi	r3, r1, #4, #1
 8003e2c:	7253      	strb	r3, [r2, #9]
    val->fifo_ovr         = fifo_status2.fifo_ovr_ia;
 8003e2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e32:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e36:	b2d9      	uxtb	r1, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	7a53      	ldrb	r3, [r2, #9]
 8003e3c:	f361 1345 	bfi	r3, r1, #5, #1
 8003e40:	7253      	strb	r3, [r2, #9]
    val->fifo_th          = fifo_status2.fifo_wtm_ia;
 8003e42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003e46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e4a:	b2d9      	uxtb	r1, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	7a53      	ldrb	r3, [r2, #9]
 8003e50:	f361 1386 	bfi	r3, r1, #6, #1
 8003e54:	7253      	strb	r3, [r2, #9]
    ctrl5_c.rounding_status = PROPERTY_DISABLE;
 8003e56:	7e3b      	ldrb	r3, [r7, #24]
 8003e58:	f023 0310 	bic.w	r3, r3, #16
 8003e5c:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
 8003e5e:	f107 0218 	add.w	r2, r7, #24
 8003e62:	2301      	movs	r3, #1
 8003e64:	2114      	movs	r1, #20
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd feb0 	bl	8001bcc <lsm6dsox_write_reg>
 8003e6c:	64f8      	str	r0, [r7, #76]	@ 0x4c
  }

  return ret;
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3750      	adds	r7, #80	@ 0x50
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e82:	2102      	movs	r1, #2
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fe fa01 	bl	800228c <lsm6dsox_mem_bank_set>
 8003e8a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8003e92:	f107 0210 	add.w	r2, r7, #16
 8003e96:	2301      	movs	r3, #1
 8003e98:	2104      	movs	r1, #4
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fe78 	bl	8001b90 <lsm6dsox_read_reg>
 8003ea0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13d      	bne.n	8003f24 <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8003ea8:	f107 020c 	add.w	r2, r7, #12
 8003eac:	2301      	movs	r3, #1
 8003eae:	2105      	movs	r1, #5
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fd fe6d 	bl	8001b90 <lsm6dsox_read_reg>
 8003eb6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8003eb8:	7b3b      	ldrb	r3, [r7, #12]
 8003eba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ebe:	b2d9      	uxtb	r1, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	7813      	ldrb	r3, [r2, #0]
 8003ec4:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ec8:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8003eca:	7b3b      	ldrb	r3, [r7, #12]
 8003ecc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ed0:	b2d9      	uxtb	r1, r3
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	7813      	ldrb	r3, [r2, #0]
 8003ed6:	f361 1304 	bfi	r3, r1, #4, #1
 8003eda:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8003edc:	7c3b      	ldrb	r3, [r7, #16]
 8003ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ee2:	b2d9      	uxtb	r1, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	7813      	ldrb	r3, [r2, #0]
 8003ee8:	f361 0341 	bfi	r3, r1, #1, #1
 8003eec:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8003eee:	7c3b      	ldrb	r3, [r7, #16]
 8003ef0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ef4:	b2d9      	uxtb	r1, r3
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	7813      	ldrb	r3, [r2, #0]
 8003efa:	f361 0382 	bfi	r3, r1, #2, #1
 8003efe:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8003f00:	7c3b      	ldrb	r3, [r7, #16]
 8003f02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f06:	b2d9      	uxtb	r1, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	7813      	ldrb	r3, [r2, #0]
 8003f0c:	f361 0300 	bfi	r3, r1, #0, #1
 8003f10:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8003f12:	7b3b      	ldrb	r3, [r7, #12]
 8003f14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f18:	b2d9      	uxtb	r1, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	7813      	ldrb	r3, [r2, #0]
 8003f1e:	f361 1345 	bfi	r3, r1, #5, #1
 8003f22:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe f9ad 	bl	800228c <lsm6dsox_mem_bank_set>
 8003f32:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003f34:	697b      	ldr	r3, [r7, #20]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f023 0218 	bic.w	r2, r3, #24
 8003f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <main>:

#define BOOT_TIME            			10 //ms

static int send_interval = 5; // 5 minutes

int main(void) {
 8003f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f6c:	b092      	sub	sp, #72	@ 0x48
 8003f6e:	af02      	add	r7, sp, #8
  HAL_Init();
 8003f70:	f000 fb5e 	bl	8004630 <HAL_Init>

  SystemClock_Config(); //check exact configurations
 8003f74:	f000 fafc 	bl	8004570 <SystemClock_Config>

  // LoRa setup
  lora_init();
 8003f78:	f7fd fc14 	bl	80017a4 <lora_init>
  lora_setFrequency(902.5);
 8003f7c:	4850      	ldr	r0, [pc, #320]	@ (80040c0 <main+0x158>)
 8003f7e:	f7fd fd4f 	bl	8001a20 <lora_setFrequency>
  lora_setTxPower(17); // 14-22
 8003f82:	2011      	movs	r0, #17
 8003f84:	f7fd fd92 	bl	8001aac <lora_setTxPower>

  // GPS setup
  HAL_UART_MspInit(&huart1);
 8003f88:	484e      	ldr	r0, [pc, #312]	@ (80040c4 <main+0x15c>)
 8003f8a:	f001 fb5f 	bl	800564c <HAL_UART_MspInit>

  M20071_GPS_Init(&hGps, &huart1);
 8003f8e:	494d      	ldr	r1, [pc, #308]	@ (80040c4 <main+0x15c>)
 8003f90:	484d      	ldr	r0, [pc, #308]	@ (80040c8 <main+0x160>)
 8003f92:	f7fc ffbf 	bl	8000f14 <M20071_GPS_Init>
  GPS_powerOn(&hGps);
 8003f96:	484c      	ldr	r0, [pc, #304]	@ (80040c8 <main+0x160>)
 8003f98:	f7fd f83a 	bl	8001010 <GPS_powerOn>
  setGPS(&hGps);
 8003f9c:	484a      	ldr	r0, [pc, #296]	@ (80040c8 <main+0x160>)
 8003f9e:	f000 f8e1 	bl	8004164 <setGPS>

  // IMU setup
  stmdev_ctx_t dev_ctx;
  lsm6dsox_activity_init(dev_ctx);
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa8:	f000 f9d8 	bl	800435c <lsm6dsox_activity_init>

  // General setup
  time_t timer;
  timer = time(NULL);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f004 fdc3 	bl	8008b38 <time>
 8003fb2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38

  bool sleep = false;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  int messageID = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	633b      	str	r3, [r7, #48]	@ 0x30


  while(1) {
	  if (time(NULL) - timer > (send_interval*60*60)) {
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f004 fdb9 	bl	8008b38 <time>
 8003fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fca:	1a84      	subs	r4, r0, r2
 8003fcc:	eb61 0503 	sbc.w	r5, r1, r3
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <main+0x164>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	17da      	asrs	r2, r3, #31
 8003fde:	4698      	mov	r8, r3
 8003fe0:	4691      	mov	r9, r2
 8003fe2:	45a0      	cmp	r8, r4
 8003fe4:	eb79 0305 	sbcs.w	r3, r9, r5
 8003fe8:	da4b      	bge.n	8004082 <main+0x11a>
		  timer = time(NULL);
 8003fea:	2000      	movs	r0, #0
 8003fec:	f004 fda4 	bl	8008b38 <time>
 8003ff0:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		  if (lsm6dsox_get_event(&hi2c3, dev_ctx)) { // activity detected
 8003ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ffe:	4834      	ldr	r0, [pc, #208]	@ (80040d0 <main+0x168>)
 8004000:	f000 fa24 	bl	800444c <lsm6dsox_get_event>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <main+0xd6>
			  while(!sendSingleGPS(messageID, &hGps)) {
 800400a:	e00a      	b.n	8004022 <main+0xba>
				  messageID++;
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	3301      	adds	r3, #1
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
				  HAL_Delay(getRandomBackoff(10, 100));
 8004012:	2164      	movs	r1, #100	@ 0x64
 8004014:	200a      	movs	r0, #10
 8004016:	f000 f988 	bl	800432a <getRandomBackoff>
 800401a:	4603      	mov	r3, r0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fb6b 	bl	80046f8 <HAL_Delay>
			  while(!sendSingleGPS(messageID, &hGps)) {
 8004022:	4929      	ldr	r1, [pc, #164]	@ (80040c8 <main+0x160>)
 8004024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004026:	f000 f901 	bl	800422c <sendSingleGPS>
 800402a:	4603      	mov	r3, r0
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ea      	bne.n	800400c <main+0xa4>
			  }
			  messageID++;
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	3301      	adds	r3, #1
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30
 800403c:	e021      	b.n	8004082 <main+0x11a>
		  }
		  else if (sleep == 0) {
 800403e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004042:	f083 0301 	eor.w	r3, r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <main+0x11a>
			  sleep = true;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  while(!sendSleep(messageID)) {
 8004052:	e00a      	b.n	800406a <main+0x102>
				  messageID++;
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	3301      	adds	r3, #1
 8004058:	633b      	str	r3, [r7, #48]	@ 0x30
				  HAL_Delay(getRandomBackoff(10, 100));
 800405a:	2164      	movs	r1, #100	@ 0x64
 800405c:	200a      	movs	r0, #10
 800405e:	f000 f964 	bl	800432a <getRandomBackoff>
 8004062:	4603      	mov	r3, r0
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fb47 	bl	80046f8 <HAL_Delay>
			  while(!sendSleep(messageID)) {
 800406a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800406c:	f000 f908 	bl	8004280 <sendSleep>
 8004070:	4603      	mov	r3, r0
 8004072:	f083 0301 	eor.w	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1eb      	bne.n	8004054 <main+0xec>
			  }
			  messageID++;
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	3301      	adds	r3, #1
 8004080:	633b      	str	r3, [r7, #48]	@ 0x30
		  }
	  }

	  if (lora_available()) {
 8004082:	f7fd fd37 	bl	8001af4 <lora_available>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d099      	beq.n	8003fc0 <main+0x58>
		  uint8_t buf[LORA_MAX_MESSAGE_LEN];
		  uint8_t len = LORA_MAX_MESSAGE_LEN;
 800408c:	2319      	movs	r3, #25
 800408e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  if (lora_receive(buf, len)) {
 8004092:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004096:	463b      	mov	r3, r7
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd fc28 	bl	80018f0 <lora_receive>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d08c      	beq.n	8003fc0 <main+0x58>
			  sendACK(messageID);
 80040a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a8:	f000 f904 	bl	80042b4 <sendACK>
			  messageID++;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	3301      	adds	r3, #1
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
			  parseMessage(buf[1], messageID, &hGps);
 80040b2:	787b      	ldrb	r3, [r7, #1]
 80040b4:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <main+0x160>)
 80040b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f80b 	bl	80040d4 <parseMessage>
	  if (time(NULL) - timer > (send_interval*60*60)) {
 80040be:	e77f      	b.n	8003fc0 <main+0x58>
 80040c0:	4461a000 	.word	0x4461a000
 80040c4:	20000200 	.word	0x20000200
 80040c8:	20000294 	.word	0x20000294
 80040cc:	20000000 	.word	0x20000000
 80040d0:	200003ac 	.word	0x200003ac

080040d4 <parseMessage>:
	  }
  }
  return 1;
}

static void parseMessage(int messageType, int messageID, M20071_GPS_HandleTypeDef *hGps) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
	switch (messageType) {
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d836      	bhi.n	8004156 <parseMessage+0x82>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <parseMessage+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004139 	.word	0x08004139
 80040f4:	08004105 	.word	0x08004105
 80040f8:	08004155 	.word	0x08004155
 80040fc:	08004157 	.word	0x08004157
 8004100:	08004155 	.word	0x08004155
		case SEARCH_MODE_MESSAGE_TYPE:
			if (send_interval == 5) {
 8004104:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <parseMessage+0x8c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d103      	bne.n	8004114 <parseMessage+0x40>
				send_interval = 1;
 800410c:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <parseMessage+0x8c>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e002      	b.n	800411a <parseMessage+0x46>
			}
			else {
				send_interval = 5;
 8004114:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <parseMessage+0x8c>)
 8004116:	2205      	movs	r2, #5
 8004118:	601a      	str	r2, [r3, #0]
			}
			lora_setTxPower(22);
 800411a:	2016      	movs	r0, #22
 800411c:	f7fd fcc6 	bl	8001aac <lora_setTxPower>
			// change SF
			break;
 8004120:	e019      	b.n	8004156 <parseMessage+0x82>
		case GPS_REQUEST_MESSAGE_TYPE:
			while(!sendSingleGPS(messageID, hGps)) {
				messageID++;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3301      	adds	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
				HAL_Delay(getRandomBackoff(10, 100));
 8004128:	2164      	movs	r1, #100	@ 0x64
 800412a:	200a      	movs	r0, #10
 800412c:	f000 f8fd 	bl	800432a <getRandomBackoff>
 8004130:	4603      	mov	r3, r0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fae0 	bl	80046f8 <HAL_Delay>
			while(!sendSingleGPS(messageID, hGps)) {
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	68b8      	ldr	r0, [r7, #8]
 800413c:	f000 f876 	bl	800422c <sendSingleGPS>
 8004140:	4603      	mov	r3, r0
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ea      	bne.n	8004122 <parseMessage+0x4e>
			}
			messageID++;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3301      	adds	r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
			break;
 8004152:	e000      	b.n	8004156 <parseMessage+0x82>
	//		}
	//		messageID++;
			break;
		case SPEAKER_MESSAGE_TYPE:
			// can't do anything lmao
			break;
 8004154:	bf00      	nop
	}
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000000 	.word	0x20000000

08004164 <setGPS>:

static void setGPS(M20071_GPS_HandleTypeDef *hGps) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	GPS_openIOPort(hGps, 1); // check port index and baud rate
 800416c:	2101      	movs	r1, #1
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc ffc8 	bl	8001104 <GPS_openIOPort>

	for (int i = 0; i <= 8; i++) {
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e009      	b.n	800418e <setGPS+0x2a>
		GPS_setNMEARate(hGps, i, 0);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2200      	movs	r2, #0
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc ff6c 	bl	8001060 <GPS_setNMEARate>
	for (int i = 0; i <= 8; i++) {
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b08      	cmp	r3, #8
 8004192:	ddf2      	ble.n	800417a <setGPS+0x16>
	}
	GPS_setNMEARate(hGps, 4, 1);
 8004194:	2201      	movs	r2, #1
 8004196:	2104      	movs	r1, #4
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fc ff61 	bl	8001060 <GPS_setNMEARate>
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <getGPS>:

static void getGPS(uint8_t dataGPS[], M20071_GPS_HandleTypeDef *hGps) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	// wake up GPS (pull RTC_EINT high for 1ms)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // RTS high
 80041b2:	2201      	movs	r2, #1
 80041b4:	2108      	movs	r1, #8
 80041b6:	481c      	ldr	r0, [pc, #112]	@ (8004228 <getGPS+0x80>)
 80041b8:	f000 fd04 	bl	8004bc4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80041bc:	2001      	movs	r0, #1
 80041be:	f000 fa9b 	bl	80046f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // RTS low
 80041c2:	2200      	movs	r2, #0
 80041c4:	2108      	movs	r1, #8
 80041c6:	4818      	ldr	r0, [pc, #96]	@ (8004228 <getGPS+0x80>)
 80041c8:	f000 fcfc 	bl	8004bc4 <HAL_GPIO_WritePin>
	setGPS(hGps); // need to re-initialize I think
 80041cc:	6838      	ldr	r0, [r7, #0]
 80041ce:	f7ff ffc9 	bl	8004164 <setGPS>

	while (M20071_GPS_Receive(hGps) == HAL_ERROR); // this is dumb but probably works
 80041d2:	bf00      	nop
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f7fc ffb9 	bl	800114c <M20071_GPS_Receive>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d0f9      	beq.n	80041d4 <getGPS+0x2c>

	while (GPS_Parse(hGps) != 1) { // check to make sure we received proper NMEA
 80041e0:	e006      	b.n	80041f0 <getGPS+0x48>
		while (M20071_GPS_Receive(hGps) == HAL_ERROR);
 80041e2:	bf00      	nop
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f7fc ffb1 	bl	800114c <M20071_GPS_Receive>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d0f9      	beq.n	80041e4 <getGPS+0x3c>
	while (GPS_Parse(hGps) != 1) { // check to make sure we received proper NMEA
 80041f0:	6838      	ldr	r0, [r7, #0]
 80041f2:	f7fd f841 	bl	8001278 <GPS_Parse>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d1f2      	bne.n	80041e2 <getGPS+0x3a>
	}

	// put GPS to sleep
	while(!GPS_enterRTC(hGps));
 80041fc:	bf00      	nop
 80041fe:	6838      	ldr	r0, [r7, #0]
 8004200:	f7fc ff54 	bl	80010ac <GPS_enterRTC>
 8004204:	4603      	mov	r3, r0
 8004206:	f083 0301 	eor.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f6      	bne.n	80041fe <getGPS+0x56>

	GPS_FormatData(dataGPS, hGps);
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd fa18 	bl	8001648 <GPS_FormatData>
	dataGPS[15] = 100;  // battery status
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	330f      	adds	r3, #15
 800421c:	2264      	movs	r2, #100	@ 0x64
 800421e:	701a      	strb	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	48000400 	.word	0x48000400

0800422c <sendSingleGPS>:

static bool sendSingleGPS(int messageID, M20071_GPS_HandleTypeDef *hGps) {
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b08c      	sub	sp, #48	@ 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	uint8_t message[18];
	message[0] = messageID;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	773b      	strb	r3, [r7, #28]
	message[1] = GPS_SEND_MESSAGE_TYPE;
 800423c:	2301      	movs	r3, #1
 800423e:	777b      	strb	r3, [r7, #29]
	uint8_t dataGPS[GPS_SIZE];
	getGPS(dataGPS, hGps);
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ffae 	bl	80041a8 <getGPS>
	memcpy(&message[2], dataGPS, GPS_SIZE);
 800424c:	f107 041e 	add.w	r4, r7, #30
 8004250:	f107 050c 	add.w	r5, r7, #12
 8004254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004256:	6020      	str	r0, [r4, #0]
 8004258:	6061      	str	r1, [r4, #4]
 800425a:	60a2      	str	r2, [r4, #8]
 800425c:	60e3      	str	r3, [r4, #12]

	lora_send(message, 18);
 800425e:	f107 031c 	add.w	r3, r7, #28
 8004262:	2112      	movs	r1, #18
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd fb11 	bl	800188c <lora_send>
	lora_waitPacketSent(2000);
 800426a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800426e:	f7fd fb7b 	bl	8001968 <lora_waitPacketSent>

	return waitForACK();
 8004272:	f000 f837 	bl	80042e4 <waitForACK>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3730      	adds	r7, #48	@ 0x30
 800427c:	46bd      	mov	sp, r7
 800427e:	bdb0      	pop	{r4, r5, r7, pc}

08004280 <sendSleep>:

static bool sendSleep(int messageID) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	uint8_t toSend[] = {messageID, SLEEP_MESSAGE_TYPE};
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	733b      	strb	r3, [r7, #12]
 800428e:	2307      	movs	r3, #7
 8004290:	737b      	strb	r3, [r7, #13]
	lora_send(toSend, sizeof(toSend));
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f7fd faf7 	bl	800188c <lora_send>
	lora_waitPacketSent(2000);
 800429e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042a2:	f7fd fb61 	bl	8001968 <lora_waitPacketSent>

	return waitForACK();
 80042a6:	f000 f81d 	bl	80042e4 <waitForACK>
 80042aa:	4603      	mov	r3, r0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <sendACK>:

bool sendACK(int messageID) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint8_t toSend[] = {messageID, ACK_MESSAGE_TYPE};
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	733b      	strb	r3, [r7, #12]
 80042c2:	2300      	movs	r3, #0
 80042c4:	737b      	strb	r3, [r7, #13]
  lora_send(toSend, sizeof(toSend));
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fadd 	bl	800188c <lora_send>
  lora_waitPacketSent(2000);
 80042d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042d6:	f7fd fb47 	bl	8001968 <lora_waitPacketSent>

  return true;
 80042da:	2301      	movs	r3, #1
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <waitForACK>:

bool waitForACK() {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
  uint8_t buf[LORA_MAX_MESSAGE_LEN];
  uint8_t len = LORA_MAX_MESSAGE_LEN;
 80042ea:	2319      	movs	r3, #25
 80042ec:	77fb      	strb	r3, [r7, #31]

  if (lora_waitAvailableTimeout(2000)) {
 80042ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042f2:	f7fd fb6d 	bl	80019d0 <lora_waitAvailableTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d011      	beq.n	8004320 <waitForACK+0x3c>
    if (lora_receive(buf, len)) {
 80042fc:	7ffa      	ldrb	r2, [r7, #31]
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd faf4 	bl	80018f0 <lora_receive>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <waitForACK+0x38>
    	if (buf[1] == ACK_MESSAGE_TYPE) {
 800430e:	797b      	ldrb	r3, [r7, #5]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <waitForACK+0x34>
    		return true;
 8004314:	2301      	movs	r3, #1
 8004316:	e004      	b.n	8004322 <waitForACK+0x3e>
    	}
    	return false;
 8004318:	2300      	movs	r3, #0
 800431a:	e002      	b.n	8004322 <waitForACK+0x3e>
    } else {
    	return false;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <waitForACK+0x3e>
    }
  } else {
    return false;
 8004320:	2300      	movs	r3, #0
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <getRandomBackoff>:

static uint32_t getRandomBackoff(uint32_t min_ms, uint32_t max_ms) {
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
    return (rand() % (max_ms - min_ms + 1)) + min_ms;
 8004334:	f003 fb2e 	bl	8007994 <rand>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1acb      	subs	r3, r1, r3
 8004342:	3301      	adds	r3, #1
 8004344:	fbb2 f1f3 	udiv	r1, r2, r3
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <lsm6dsox_activity_init>:

static void lsm6dsox_activity_init(stmdev_ctx_t dev_ctx)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	463c      	mov	r4, r7
 8004364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  lsm6dsox_pin_int1_route_t int1_route;

  uint8_t dummy;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = lsm6dsox_write;
 8004368:	4b34      	ldr	r3, [pc, #208]	@ (800443c <lsm6dsox_activity_init+0xe0>)
 800436a:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = lsm6dsox_read;
 800436c:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <lsm6dsox_activity_init+0xe4>)
 800436e:	607b      	str	r3, [r7, #4]
  dev_ctx.mdelay = lsm6dsox_delay;
 8004370:	4b34      	ldr	r3, [pc, #208]	@ (8004444 <lsm6dsox_activity_init+0xe8>)
 8004372:	60bb      	str	r3, [r7, #8]
  dev_ctx.handle = &hi2c3;
 8004374:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <lsm6dsox_activity_init+0xec>)
 8004376:	60fb      	str	r3, [r7, #12]
  /* Wait Boot Time */
 lsm6dsox_delay(BOOT_TIME);
 8004378:	200a      	movs	r0, #10
 800437a:	f000 f8ed 	bl	8004558 <lsm6dsox_delay>
  /* Check device ID */
  lsm6dsox_device_id_get(&dev_ctx, &dummy);
 800437e:	f107 0217 	add.w	r2, r7, #23
 8004382:	463b      	mov	r3, r7
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd ffa6 	bl	80022d8 <lsm6dsox_device_id_get>

  if (dummy != LSM6DSOX_ID)
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004390:	d001      	beq.n	8004396 <lsm6dsox_activity_init+0x3a>
    while (1);
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <lsm6dsox_activity_init+0x36>

  /* Restore default configuration */
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8004396:	463b      	mov	r3, r7
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd ffad 	bl	80022fa <lsm6dsox_reset_set>

  do {
    lsm6dsox_reset_get(&dev_ctx, &dummy);
 80043a0:	f107 0217 	add.w	r2, r7, #23
 80043a4:	463b      	mov	r3, r7
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd ffcc 	bl	8002346 <lsm6dsox_reset_get>
  } while (dummy);
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f5      	bne.n	80043a0 <lsm6dsox_activity_init+0x44>

  /* Disable I3C interface */
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 80043b4:	463b      	mov	r3, r7
 80043b6:	2180      	movs	r1, #128	@ 0x80
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd ffdd 	bl	8002378 <lsm6dsox_i3c_disable_set>
  /* Set XL and Gyro Output Data Rate */
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_208Hz);
 80043be:	463b      	mov	r3, r7
 80043c0:	2105      	movs	r1, #5
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fd fc5a 	bl	8001c7c <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_104Hz);
 80043c8:	463b      	mov	r3, r7
 80043ca:	2104      	movs	r1, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fd fdeb 	bl	8001fa8 <lsm6dsox_gy_data_rate_set>
  /* Set 2g full XL scale and 250 dps full Gyro */
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_2g);
 80043d2:	463b      	mov	r3, r7
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fc2a 	bl	8001c30 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_250dps);
 80043dc:	463b      	mov	r3, r7
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fd fdbb 	bl	8001f5c <lsm6dsox_gy_full_scale_set>
  /* Set duration for Activity detection to 9.62 ms (= 2 * 1 / ODR_XL) */
  lsm6dsox_wkup_dur_set(&dev_ctx, 0x02);
 80043e6:	463b      	mov	r3, r7
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f830 	bl	8002450 <lsm6dsox_wkup_dur_set>
  /* Set duration for Inactivity detection to 4.92 s (= 2 * 512 / ODR_XL) */
  lsm6dsox_act_sleep_dur_set(&dev_ctx, 0x02);
 80043f0:	463b      	mov	r3, r7
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe f877 	bl	80024e8 <lsm6dsox_act_sleep_dur_set>
  /* Set Activity/Inactivity threshold to 62.5 mg */
  lsm6dsox_wkup_threshold_set(&dev_ctx, 0x02);
 80043fa:	463b      	mov	r3, r7
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe f800 	bl	8002404 <lsm6dsox_wkup_threshold_set>
  /* Inactivity configuration: XL to 12.5 in LP, gyro to Power-Down */
  lsm6dsox_act_mode_set(&dev_ctx, LSM6DSOX_XL_12Hz5_GY_PD);
 8004404:	463b      	mov	r3, r7
 8004406:	2103      	movs	r1, #3
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f847 	bl	800249c <lsm6dsox_act_mode_set>
  /* Enable interrupt generation on Inactivity INT1 pin */
  lsm6dsox_pin_int1_route_get(&dev_ctx, &int1_route);
 800440e:	f107 0218 	add.w	r2, r7, #24
 8004412:	463b      	mov	r3, r7
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fd79 	bl	8002f0e <lsm6dsox_pin_int1_route_get>
  int1_route.sleep_change = PROPERTY_ENABLE;
 800441c:	7ebb      	ldrb	r3, [r7, #26]
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	76bb      	strb	r3, [r7, #26]
  lsm6dsox_pin_int1_route_set(&dev_ctx, int1_route);
 8004424:	4638      	mov	r0, r7
 8004426:	f107 0318 	add.w	r3, r7, #24
 800442a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800442e:	f7fe f933 	bl	8002698 <lsm6dsox_pin_int1_route_set>
}
 8004432:	bf00      	nop
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	0800448f 	.word	0x0800448f
 8004440:	080044ef 	.word	0x080044ef
 8004444:	08004559 	.word	0x08004559
 8004448:	200003ac 	.word	0x200003ac

0800444c <lsm6dsox_get_event>:

/*
* Get activity event
* @return : True if awake, False if asleep
*/
static bool lsm6dsox_get_event(void *handle, stmdev_ctx_t dev_ctx) {
 800444c:	b084      	sub	sp, #16
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800445a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	lsm6dsox_all_sources_t all_source;

	/* Check if Activity/Inactivity events */
	lsm6dsox_all_sources_get(&dev_ctx, &all_source);
 800445e:	f107 020c 	add.w	r2, r7, #12
 8004462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff f9cc 	bl	8003806 <lsm6dsox_all_sources_get>

	if (all_source.wake_up) {
 800446e:	7b3b      	ldrb	r3, [r7, #12]
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <lsm6dsox_get_event+0x32>
    // TODO: do something if in wakeup
    // snprintf((char *)tx_buffer, sizeof(tx_buffer), "Activity Detected\r\n");
		return 1;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <lsm6dsox_get_event+0x34>
	}
	else{
		return 0;
 800447e:	2300      	movs	r3, #0
	}
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800448a:	b004      	add	sp, #16
 800448c:	4770      	bx	lr

0800448e <lsm6dsox_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t lsm6dsox_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af02      	add	r7, sp, #8
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	461a      	mov	r2, r3
 800449a:	460b      	mov	r3, r1
 800449c:	72fb      	strb	r3, [r7, #11]
 800449e:	4613      	mov	r3, r2
 80044a0:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80044a2:	2200      	movs	r2, #0
 80044a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ac:	f000 fb8a 	bl	8004bc4 <HAL_GPIO_WritePin>
  HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, &reg, 1, 1000);
 80044b0:	f107 020b 	add.w	r2, r7, #11
 80044b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2301      	movs	r3, #1
 80044bc:	21d5      	movs	r1, #213	@ 0xd5
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fb98 	bl	8004bf4 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, (uint8_t*) bufp, len, 1000);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	21d5      	movs	r1, #213	@ 0xd5
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fb8f 	bl	8004bf4 <HAL_I2C_Master_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80044d6:	2201      	movs	r2, #1
 80044d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e0:	f000 fb70 	bl	8004bc4 <HAL_GPIO_WritePin>
  return 0;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <lsm6dsox_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsox_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af02      	add	r7, sp, #8
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	461a      	mov	r2, r3
 80044fa:	460b      	mov	r3, r1
 80044fc:	72fb      	strb	r3, [r7, #11]
 80044fe:	4613      	mov	r3, r2
 8004500:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004508:	b2db      	uxtb	r3, r3
 800450a:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004516:	f000 fb55 	bl	8004bc4 <HAL_GPIO_WritePin>
  HAL_I2C_Master_Transmit(handle, LSM6DSOX_I2C_ADD_L, &reg, 1, 1000);
 800451a:	f107 020b 	add.w	r2, r7, #11
 800451e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2301      	movs	r3, #1
 8004526:	21d5      	movs	r1, #213	@ 0xd5
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fb63 	bl	8004bf4 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(handle, LSM6DSOX_I2C_ADD_L, bufp, len, 1000);
 800452e:	893b      	ldrh	r3, [r7, #8]
 8004530:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	21d5      	movs	r1, #213	@ 0xd5
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fc72 	bl	8004e24 <HAL_I2C_Master_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8004540:	2201      	movs	r2, #1
 8004542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800454a:	f000 fb3b 	bl	8004bc4 <HAL_GPIO_WritePin>
  return 0;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <lsm6dsox_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void lsm6dsox_delay(uint32_t ms)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8c9 	bl	80046f8 <HAL_Delay>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
 void SystemClock_Config(void)
 {
 8004570:	b580      	push	{r7, lr}
 8004572:	b09a      	sub	sp, #104	@ 0x68
 8004574:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004576:	f107 0320 	add.w	r3, r7, #32
 800457a:	2248      	movs	r2, #72	@ 0x48
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f004 fa9f 	bl	8008ac2 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
 8004594:	615a      	str	r2, [r3, #20]

   /** Configure LSE Drive Capability
   */
   HAL_PWR_EnableBkUpAccess();
 8004596:	f001 f8c3 	bl	8005720 <HAL_PWR_EnableBkUpAccess>
   __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800459a:	2000      	movs	r0, #0
 800459c:	f7ff fccf 	bl	8003f3e <LL_RCC_LSE_SetDriveCapability>

   /** Configure the main internal regulator output voltage
   */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004620 <SystemClock_Config+0xb0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <SystemClock_Config+0xb0>)
 80045aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <SystemClock_Config+0xb0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]

   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80045bc:	2324      	movs	r3, #36	@ 0x24
 80045be:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80045c0:	2381      	movs	r3, #129	@ 0x81
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80045c4:	2301      	movs	r3, #1
 80045c6:	643b      	str	r3, [r7, #64]	@ 0x40
   RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80045c8:	2300      	movs	r3, #0
 80045ca:	647b      	str	r3, [r7, #68]	@ 0x44
   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80045cc:	23b0      	movs	r3, #176	@ 0xb0
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d4:	f107 0320 	add.w	r3, r7, #32
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fb35 	bl	8005c48 <HAL_RCC_OscConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <SystemClock_Config+0x78>
   {
     Error_Handler();
 80045e4:	f000 f81e 	bl	8004624 <Error_Handler>
   }
     /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80045e8:	234f      	movs	r3, #79	@ 0x4f
 80045ea:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                                |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004600:	f107 0308 	add.w	r3, r7, #8
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fea0 	bl	800634c <HAL_RCC_ClockConfig>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <SystemClock_Config+0xa6>
  {
  Error_Handler();
 8004612:	f000 f807 	bl	8004624 <Error_Handler>
  }
}
 8004616:	bf00      	nop
 8004618:	3768      	adds	r7, #104	@ 0x68
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	58000400 	.word	0x58000400

08004624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
 void Error_Handler(void)
 {
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004628:	b672      	cpsid	i
}
 800462a:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while (1)
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <Error_Handler+0x8>

08004630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800463a:	2003      	movs	r0, #3
 800463c:	f000 f930 	bl	80048a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004640:	f002 f848 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 8004644:	4603      	mov	r3, r0
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <HAL_Init+0x3c>)
 8004648:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800464a:	200f      	movs	r0, #15
 800464c:	f000 f810 	bl	8004670 <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	71fb      	strb	r3, [r7, #7]
 800465a:	e001      	b.n	8004660 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800465c:	f000 ffef 	bl	800563e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004660:	79fb      	ldrb	r3, [r7, #7]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800467c:	4b17      	ldr	r3, [pc, #92]	@ (80046dc <HAL_InitTick+0x6c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d024      	beq.n	80046ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004684:	f002 f826 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b14      	ldr	r3, [pc, #80]	@ (80046dc <HAL_InitTick+0x6c>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004694:	fbb3 f3f1 	udiv	r3, r3, r1
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f924 	bl	80048ea <HAL_SYSTICK_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d809      	bhi.n	80046c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046ae:	2200      	movs	r2, #0
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	f04f 30ff 	mov.w	r0, #4294967295
 80046b6:	f000 f8fe 	bl	80048b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ba:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <HAL_InitTick+0x70>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e007      	b.n	80046d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e004      	b.n	80046d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e001      	b.n	80046d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000008 	.word	0x20000008
 80046e0:	20000004 	.word	0x20000004

080046e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b02      	ldr	r3, [pc, #8]	@ (80046f4 <HAL_GetTick+0x10>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	20000400 	.word	0x20000400

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff fff0 	bl	80046e4 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d005      	beq.n	800471e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_Delay+0x44>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800471e:	bf00      	nop
 8004720:	f7ff ffe0 	bl	80046e4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d8f7      	bhi.n	8004720 <HAL_Delay+0x28>
  {
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000008 	.word	0x20000008

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800476c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004772:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	60d3      	str	r3, [r2, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db0a      	blt.n	80047ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	490c      	ldr	r1, [pc, #48]	@ (80047f0 <__NVIC_SetPriority+0x4c>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047cc:	e00a      	b.n	80047e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4908      	ldr	r1, [pc, #32]	@ (80047f4 <__NVIC_SetPriority+0x50>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3b04      	subs	r3, #4
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	761a      	strb	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e100 	.word	0xe000e100
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf28      	it	cs
 8004816:	2304      	movcs	r3, #4
 8004818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3304      	adds	r3, #4
 800481e:	2b06      	cmp	r3, #6
 8004820:	d902      	bls.n	8004828 <NVIC_EncodePriority+0x30>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3b03      	subs	r3, #3
 8004826:	e000      	b.n	800482a <NVIC_EncodePriority+0x32>
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	f04f 32ff 	mov.w	r2, #4294967295
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004840:	f04f 31ff 	mov.w	r1, #4294967295
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43d9      	mvns	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	4313      	orrs	r3, r2
         );
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	@ 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800486c:	d301      	bcc.n	8004872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800486e:	2301      	movs	r3, #1
 8004870:	e00f      	b.n	8004892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004872:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <SysTick_Config+0x40>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487a:	210f      	movs	r1, #15
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	f7ff ff90 	bl	80047a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <SysTick_Config+0x40>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488a:	4b04      	ldr	r3, [pc, #16]	@ (800489c <SysTick_Config+0x40>)
 800488c:	2207      	movs	r2, #7
 800488e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000e010 	.word	0xe000e010

080048a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff49 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c4:	f7ff ff60 	bl	8004788 <__NVIC_GetPriorityGrouping>
 80048c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7ff ff92 	bl	80047f8 <NVIC_EncodePriority>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff61 	bl	80047a4 <__NVIC_SetPriority>
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffb2 	bl	800485c <SysTick_Config>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004912:	e140      	b.n	8004b96 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8132 	beq.w	8004b90 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d005      	beq.n	8004944 <HAL_GPIO_Init+0x40>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d130      	bne.n	80049a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800497a:	2201      	movs	r2, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0201 	and.w	r2, r3, #1
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d017      	beq.n	80049e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	6939      	ldr	r1, [r7, #16]
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 808c 	beq.w	8004b90 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a78:	4a4e      	ldr	r2, [pc, #312]	@ (8004bb4 <HAL_GPIO_Init+0x2b0>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	2207      	movs	r2, #7
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_GPIO_Init+0x1bc>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a44      	ldr	r2, [pc, #272]	@ (8004bb8 <HAL_GPIO_Init+0x2b4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <HAL_GPIO_Init+0x1b8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a43      	ldr	r2, [pc, #268]	@ (8004bbc <HAL_GPIO_Init+0x2b8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_GPIO_Init+0x1b4>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e004      	b.n	8004ac2 <HAL_GPIO_Init+0x1be>
 8004ab8:	2307      	movs	r3, #7
 8004aba:	e002      	b.n	8004ac2 <HAL_GPIO_Init+0x1be>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_GPIO_Init+0x1be>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4093      	lsls	r3, r2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ad2:	4938      	ldr	r1, [pc, #224]	@ (8004bb4 <HAL_GPIO_Init+0x2b0>)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae0:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b2e:	4a24      	ldr	r2, [pc, #144]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004b34:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b3a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b5a:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b62:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b68:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4013      	ands	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004b88:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <HAL_GPIO_Init+0x2bc>)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3301      	adds	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f aeb7 	bne.w	8004914 <HAL_GPIO_Init+0x10>
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	48000400 	.word	0x48000400
 8004bbc:	48000800 	.word	0x48000800
 8004bc0:	58000800 	.word	0x58000800

08004bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be0:	e002      	b.n	8004be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be2:	887a      	ldrh	r2, [r7, #2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	817b      	strh	r3, [r7, #10]
 8004c04:	4613      	mov	r3, r2
 8004c06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	f040 80fd 	bne.w	8004e10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_Master_Transmit+0x30>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0f6      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c2c:	f7ff fd5a 	bl	80046e4 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2319      	movs	r3, #25
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa09 	bl	8005056 <I2C_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0e1      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2221      	movs	r2, #33	@ 0x21
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	893a      	ldrh	r2, [r7, #8]
 8004c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2bff      	cmp	r3, #255	@ 0xff
 8004c7e:	d906      	bls.n	8004c8e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	22ff      	movs	r2, #255	@ 0xff
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e007      	b.n	8004c9e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c9c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d024      	beq.n	8004cf0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e1c <HAL_I2C_Master_Transmit+0x228>)
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fc03 	bl	80054f4 <I2C_TransferConfig>
 8004cee:	e066      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	8979      	ldrh	r1, [r7, #10]
 8004cf8:	4b48      	ldr	r3, [pc, #288]	@ (8004e1c <HAL_I2C_Master_Transmit+0x228>)
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fbf8 	bl	80054f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d04:	e05b      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9fc 	bl	8005108 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07b      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d034      	beq.n	8004dbe <HAL_I2C_Master_Transmit+0x1ca>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d130      	bne.n	8004dbe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2180      	movs	r1, #128	@ 0x80
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f975 	bl	8005056 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e04d      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2bff      	cmp	r3, #255	@ 0xff
 8004d7e:	d90e      	bls.n	8004d9e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	22ff      	movs	r2, #255	@ 0xff
 8004d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fbac 	bl	80054f4 <I2C_TransferConfig>
 8004d9c:	e00f      	b.n	8004dbe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fb9b 	bl	80054f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d19e      	bne.n	8004d06 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	6a39      	ldr	r1, [r7, #32]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f9e2 	bl	8005196 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e01a      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2220      	movs	r2, #32
 8004de2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <HAL_I2C_Master_Transmit+0x22c>)
 8004df0:	400b      	ands	r3, r1
 8004df2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	80002000 	.word	0x80002000
 8004e20:	fe00e800 	.word	0xfe00e800

08004e24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	817b      	strh	r3, [r7, #10]
 8004e34:	4613      	mov	r3, r2
 8004e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 80db 	bne.w	8004ffc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Receive+0x30>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0d4      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e5c:	f7ff fc42 	bl	80046e4 <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2319      	movs	r3, #25
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8f1 	bl	8005056 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0bf      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2222      	movs	r2, #34	@ 0x22
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2bff      	cmp	r3, #255	@ 0xff
 8004eae:	d90e      	bls.n	8004ece <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	22ff      	movs	r2, #255	@ 0xff
 8004eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	4b52      	ldr	r3, [pc, #328]	@ (8005008 <HAL_I2C_Master_Receive+0x1e4>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fb14 	bl	80054f4 <I2C_TransferConfig>
 8004ecc:	e06d      	b.n	8004faa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	4b49      	ldr	r3, [pc, #292]	@ (8005008 <HAL_I2C_Master_Receive+0x1e4>)
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb03 	bl	80054f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004eee:	e05c      	b.n	8004faa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6a39      	ldr	r1, [r7, #32]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f991 	bl	800521c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e07c      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d034      	beq.n	8004faa <HAL_I2C_Master_Receive+0x186>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d130      	bne.n	8004faa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	@ 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f87f 	bl	8005056 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e04d      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2bff      	cmp	r3, #255	@ 0xff
 8004f6a:	d90e      	bls.n	8004f8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	22ff      	movs	r2, #255	@ 0xff
 8004f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	8979      	ldrh	r1, [r7, #10]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fab6 	bl	80054f4 <I2C_TransferConfig>
 8004f88:	e00f      	b.n	8004faa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 faa5 	bl	80054f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d19d      	bne.n	8004ef0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	6a39      	ldr	r1, [r7, #32]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f8ec 	bl	8005196 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01a      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <HAL_I2C_Master_Receive+0x1e8>)
 8004fdc:	400b      	ands	r3, r1
 8004fde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	80002400 	.word	0x80002400
 800500c:	fe00e800 	.word	0xfe00e800

08005010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d103      	bne.n	800502e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d007      	beq.n	800504c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	619a      	str	r2, [r3, #24]
  }
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005066:	e03b      	b.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f961 	bl	8005334 <I2C_IsErrorOccurred>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e041      	b.n	8005100 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d02d      	beq.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7ff fb2e 	bl	80046e4 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <I2C_WaitOnFlagUntilTimeout+0x44>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d122      	bne.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4013      	ands	r3, r2
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d113      	bne.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e00f      	b.n	8005100 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d0b4      	beq.n	8005068 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005114:	e033      	b.n	800517e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f90a 	bl	8005334 <I2C_IsErrorOccurred>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e031      	b.n	800518e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d025      	beq.n	800517e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7ff fad7 	bl	80046e4 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11a      	bne.n	800517e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d013      	beq.n	800517e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e007      	b.n	800518e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d1c4      	bne.n	8005116 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a2:	e02f      	b.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f8c3 	bl	8005334 <I2C_IsErrorOccurred>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e02d      	b.n	8005214 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b8:	f7ff fa94 	bl	80046e4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11a      	bne.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d013      	beq.n	8005204 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e007      	b.n	8005214 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b20      	cmp	r3, #32
 8005210:	d1c8      	bne.n	80051a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800522c:	e071      	b.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f87e 	bl	8005334 <I2C_IsErrorOccurred>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b20      	cmp	r3, #32
 800524e:	d13b      	bne.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d138      	bne.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b04      	cmp	r3, #4
 8005262:	d105      	bne.n	8005270 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d121      	bne.n	80052c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2210      	movs	r2, #16
 8005284:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2204      	movs	r2, #4
 800528a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80052a0:	400b      	ands	r3, r1
 80052a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
 80052c0:	e002      	b.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80052c8:	f7ff fa0c 	bl	80046e4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d116      	bne.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00f      	beq.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f043 0220 	orr.w	r2, r3, #32
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b04      	cmp	r3, #4
 800531e:	d002      	beq.n	8005326 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d083      	beq.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	fe00e800 	.word	0xfe00e800

08005334 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	@ 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	d068      	beq.n	8005432 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2210      	movs	r2, #16
 8005366:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005368:	e049      	b.n	80053fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d045      	beq.n	80053fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7ff f9b7 	bl	80046e4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_IsErrorOccurred+0x54>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d13a      	bne.n	80053fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005392:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800539a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053aa:	d121      	bne.n	80053f0 <I2C_IsErrorOccurred+0xbc>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b2:	d01d      	beq.n	80053f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d01a      	beq.n	80053f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053ca:	f7ff f98b 	bl	80046e4 <HAL_GetTick>
 80053ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d0:	e00e      	b.n	80053f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053d2:	f7ff f987 	bl	80046e4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b19      	cmp	r3, #25
 80053de:	d907      	bls.n	80053f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053ee:	e006      	b.n	80053fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d1e9      	bne.n	80053d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b20      	cmp	r3, #32
 800540a:	d003      	beq.n	8005414 <I2C_IsErrorOccurred+0xe0>
 800540c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0aa      	beq.n	800536a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2220      	movs	r2, #32
 8005422:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f043 0308 	orr.w	r3, r3, #8
 800546c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005476:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	f043 0302 	orr.w	r3, r3, #2
 800548e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005498:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01c      	beq.n	80054e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fdb1 	bl	8005010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <I2C_IsErrorOccurred+0x1bc>)
 80054ba:	400b      	ands	r3, r1
 80054bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	@ 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	fe00e800 	.word	0xfe00e800

080054f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	817b      	strh	r3, [r7, #10]
 8005502:	4613      	mov	r3, r2
 8005504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800550c:	7a7b      	ldrb	r3, [r7, #9]
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005514:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	4313      	orrs	r3, r2
 800551e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005522:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	0d5b      	lsrs	r3, r3, #21
 800552e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <I2C_TransferConfig+0x5c>)
 8005534:	430b      	orrs	r3, r1
 8005536:	43db      	mvns	r3, r3
 8005538:	ea02 0103 	and.w	r1, r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	03ff63ff 	.word	0x03ff63ff

08005554 <LL_RCC_HSE_EnableTcxo>:
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005566:	6013      	str	r3, [r2, #0]
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <LL_RCC_HSE_Enable>:
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800557e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005582:	6013      	str	r3, [r2, #0]
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <LL_RCC_HSE_IsReady>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800559e:	d101      	bne.n	80055a4 <LL_RCC_HSE_IsReady+0x18>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <LL_RCC_HSE_IsReady+0x1a>
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4013      	ands	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80055e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80055f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800561a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800561c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4313      	orrs	r3, r2
 8005624:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4013      	ands	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005632:	68fb      	ldr	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0

}
 8005642:	bf00      	nop
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr
	...

0800564c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b096      	sub	sp, #88	@ 0x58
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005654:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005664:	f107 030c 	add.w	r3, r7, #12
 8005668:	2238      	movs	r2, #56	@ 0x38
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fa28 	bl	8008ac2 <memset>
  if(huart->Instance==USART1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <HAL_UART_MspInit+0xa0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d133      	bne.n	80056e4 <HAL_UART_MspInit+0x98>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005680:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005684:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f9dc 	bl	8006a48 <HAL_RCCEx_PeriphCLKConfig>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005696:	f7fe ffc5 	bl	8004624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800569a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800569e:	f7ff ff9e 	bl	80055de <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a2:	2002      	movs	r0, #2
 80056a4:	f7ff ff83 	bl	80055ae <LL_AHB2_GRP1_EnableClock>
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    PB3     ------> USART1_RTS
    */
    /** Configure PB7 as USART1_RX, PB6 as USART1_TX */
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 80056a8:	23c0      	movs	r3, #192	@ 0xc0
 80056aa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ac:	2302      	movs	r3, #2
 80056ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056b0:	2301      	movs	r3, #1
 80056b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b4:	2300      	movs	r3, #0
 80056b6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056b8:	2307      	movs	r3, #7
 80056ba:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80056c0:	4619      	mov	r1, r3
 80056c2:	480b      	ldr	r0, [pc, #44]	@ (80056f0 <HAL_UART_MspInit+0xa4>)
 80056c4:	f7ff f91e 	bl	8004904 <HAL_GPIO_Init>

    /** Configure PB3 as a General-Purpose Output (Manual RTS Control) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056c8:	2308      	movs	r3, #8
 80056ca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Set as output
 80056cc:	2301      	movs	r3, #1
 80056ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d4:	2300      	movs	r3, #0
 80056d6:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80056dc:	4619      	mov	r1, r3
 80056de:	4804      	ldr	r0, [pc, #16]	@ (80056f0 <HAL_UART_MspInit+0xa4>)
 80056e0:	f7ff f910 	bl	8004904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80056e4:	bf00      	nop
 80056e6:	3758      	adds	r7, #88	@ 0x58
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40013800 	.word	0x40013800
 80056f0:	48000400 	.word	0x48000400

080056f4 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80056fc:	2001      	movs	r0, #1
 80056fe:	f7ff ff86 	bl	800560e <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */
  LL_RCC_HSE_EnableTcxo();
 8005702:	f7ff ff27 	bl	8005554 <LL_RCC_HSE_EnableTcxo>

  LL_RCC_HSE_Enable();
 8005706:	f7ff ff33 	bl	8005570 <LL_RCC_HSE_Enable>

  while (LL_RCC_HSE_IsReady() == 0)
 800570a:	bf00      	nop
 800570c:	f7ff ff3e 	bl	800558c <LL_RCC_HSE_IsReady>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0fa      	beq.n	800570c <HAL_SUBGHZ_MspInit+0x18>
  {}
  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a03      	ldr	r2, [pc, #12]	@ (8005738 <HAL_PWR_EnableBkUpAccess+0x18>)
 800572a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	58000400 	.word	0x58000400

0800573c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <HAL_PWREx_GetVoltageRange+0x14>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	58000400 	.word	0x58000400

08005754 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005758:	4b06      	ldr	r3, [pc, #24]	@ (8005774 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005764:	d101      	bne.n	800576a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	58000400 	.word	0x58000400

08005778 <LL_RCC_HSE_EnableTcxo>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800578a:	6013      	str	r3, [r2, #0]
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <LL_RCC_HSE_DisableTcxo>:
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c2:	d101      	bne.n	80057c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_HSE_Enable>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <LL_RCC_HSE_Disable>:
{
 80057ee:	b480      	push	{r7}
 80057f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005800:	6013      	str	r3, [r2, #0]
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <LL_RCC_HSE_IsReady>:
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800581c:	d101      	bne.n	8005822 <LL_RCC_HSE_IsReady+0x18>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <LL_RCC_HSE_IsReady+0x1a>
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <LL_RCC_HSI_Enable>:
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800583a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <LL_RCC_HSI_Disable>:
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <LL_RCC_HSI_IsReady>:
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005876:	d101      	bne.n	800587c <LL_RCC_HSI_IsReady+0x18>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <LL_RCC_HSI_IsReady+0x1a>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80058ae:	b480      	push	{r7}
 80058b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d101      	bne.n	80058c6 <LL_RCC_LSE_IsReady+0x18>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_RCC_LSE_IsReady+0x1a>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80058e8:	bf00      	nop
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d101      	bne.n	8005928 <LL_RCC_LSI_IsReady+0x18>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <LL_RCC_LSI_IsReady+0x1a>
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6013      	str	r3, [r2, #0]
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800594e:	b480      	push	{r7}
 8005950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6013      	str	r3, [r2, #0]
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d101      	bne.n	8005980 <LL_RCC_MSI_IsReady+0x16>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <LL_RCC_MSI_IsReady+0x18>
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d101      	bne.n	80059a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059f2:	4313      	orrs	r3, r2
 80059f4:	604b      	str	r3, [r1, #4]
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 030c 	and.w	r3, r3, #12
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr

08005a62 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005a72:	f023 020f 	bic.w	r2, r3, #15
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b1c:	6013      	str	r3, [r2, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b38:	6013      	str	r3, [r2, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b54:	d101      	bne.n	8005b5a <LL_RCC_PLL_IsReady+0x18>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <LL_RCC_PLL_IsReady+0x1a>
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr

08005b92 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd0:	d101      	bne.n	8005bd6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf4:	d101      	bne.n	8005bfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c16:	d101      	bne.n	8005c1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005c26:	b480      	push	{r7}
 8005c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c38:	d101      	bne.n	8005c3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e36f      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5a:	f7ff fee4 	bl	8005a26 <LL_RCC_GetSysClkSource>
 8005c5e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c60:	f7ff ffa2 	bl	8005ba8 <LL_RCC_PLL_GetMainSource>
 8005c64:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80c4 	beq.w	8005dfc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_RCC_OscConfig+0x3e>
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	d176      	bne.n	8005d6e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d173      	bne.n	8005d6e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e353      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x68>
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cae:	e006      	b.n	8005cbe <HAL_RCC_OscConfig+0x76>
 8005cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d222      	bcs.n	8005d08 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd18 	bl	80066fc <RCC_SetFlashLatencyFromMSIRange>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e331      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce0:	f043 0308 	orr.w	r3, r3, #8
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fe69 	bl	80059d8 <LL_RCC_MSI_SetCalibTrimming>
 8005d06:	e021      	b.n	8005d4c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d12:	f043 0308 	orr.w	r3, r3, #8
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fe50 	bl	80059d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fcdd 	bl	80066fc <RCC_SetFlashLatencyFromMSIRange>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e2f6      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d4c:	f000 fcc2 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4aa7      	ldr	r2, [pc, #668]	@ (8005ff0 <HAL_RCC_OscConfig+0x3a8>)
 8005d54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005d56:	4ba7      	ldr	r3, [pc, #668]	@ (8005ff4 <HAL_RCC_OscConfig+0x3ac>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fc88 	bl	8004670 <HAL_InitTick>
 8005d60:	4603      	mov	r3, r0
 8005d62:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d047      	beq.n	8005dfa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	e2e5      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d02c      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d76:	f7ff fddc 	bl	8005932 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d7a:	f7fe fcb3 	bl	80046e4 <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d82:	f7fe fcaf 	bl	80046e4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e2d2      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d94:	f7ff fde9 	bl	800596a <LL_RCC_MSI_IsReady>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0f1      	beq.n	8005d82 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fe05 	bl	80059d8 <LL_RCC_MSI_SetCalibTrimming>
 8005dce:	e015      	b.n	8005dfc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005dd0:	f7ff fdbd 	bl	800594e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fc86 	bl	80046e4 <HAL_GetTick>
 8005dd8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ddc:	f7fe fc82 	bl	80046e4 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e2a5      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005dee:	f7ff fdbc 	bl	800596a <LL_RCC_MSI_IsReady>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f1      	bne.n	8005ddc <HAL_RCC_OscConfig+0x194>
 8005df8:	e000      	b.n	8005dfc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005dfa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d058      	beq.n	8005eba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x1d2>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d108      	bne.n	8005e26 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d105      	bne.n	8005e26 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d14b      	bne.n	8005eba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e289      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d102      	bne.n	8005e4c <HAL_RCC_OscConfig+0x204>
 8005e46:	f7ff fcc4 	bl	80057d2 <LL_RCC_HSE_Enable>
 8005e4a:	e00d      	b.n	8005e68 <HAL_RCC_OscConfig+0x220>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005e54:	d104      	bne.n	8005e60 <HAL_RCC_OscConfig+0x218>
 8005e56:	f7ff fc8f 	bl	8005778 <LL_RCC_HSE_EnableTcxo>
 8005e5a:	f7ff fcba 	bl	80057d2 <LL_RCC_HSE_Enable>
 8005e5e:	e003      	b.n	8005e68 <HAL_RCC_OscConfig+0x220>
 8005e60:	f7ff fcc5 	bl	80057ee <LL_RCC_HSE_Disable>
 8005e64:	f7ff fc96 	bl	8005794 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d012      	beq.n	8005e96 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fe fc38 	bl	80046e4 <HAL_GetTick>
 8005e74:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fe fc34 	bl	80046e4 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	@ 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e257      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e8a:	f7ff fcbe 	bl	800580a <LL_RCC_HSE_IsReady>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0f1      	beq.n	8005e78 <HAL_RCC_OscConfig+0x230>
 8005e94:	e011      	b.n	8005eba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fe fc25 	bl	80046e4 <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9e:	f7fe fc21 	bl	80046e4 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	@ 0x64
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e244      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005eb0:	f7ff fcab 	bl	800580a <LL_RCC_HSE_IsReady>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f1      	bne.n	8005e9e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d046      	beq.n	8005f54 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x290>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e22a      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fccc 	bl	8005886 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005eee:	e031      	b.n	8005f54 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ef8:	f7ff fc98 	bl	800582c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fe fbf2 	bl	80046e4 <HAL_GetTick>
 8005f00:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fe fbee 	bl	80046e4 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e211      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005f16:	f7ff fca5 	bl	8005864 <LL_RCC_HSI_IsReady>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f1      	beq.n	8005f04 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fcae 	bl	8005886 <LL_RCC_HSI_SetCalibTrimming>
 8005f2a:	e013      	b.n	8005f54 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2c:	f7ff fc8c 	bl	8005848 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fe fbd8 	bl	80046e4 <HAL_GetTick>
 8005f34:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fe fbd4 	bl	80046e4 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1f7      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f4a:	f7ff fc8b 	bl	8005864 <LL_RCC_HSI_IsReady>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f1      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d06e      	beq.n	800603e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d056      	beq.n	8006016 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f70:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d031      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e1d0      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d013      	beq.n	8005fca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005fa2:	f7ff fca5 	bl	80058f0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fa6:	f7fe fb9d 	bl	80046e4 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fae:	f7fe fb99 	bl	80046e4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b11      	cmp	r3, #17
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e1bc      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005fc0:	f7ff fca6 	bl	8005910 <LL_RCC_LSI_IsReady>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f1      	bne.n	8005fae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd2:	f023 0210 	bic.w	r2, r3, #16
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe4:	f7ff fc74 	bl	80058d0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fe fb7c 	bl	80046e4 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005fee:	e00c      	b.n	800600a <HAL_RCC_OscConfig+0x3c2>
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fe fb74 	bl	80046e4 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b11      	cmp	r3, #17
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e197      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800600a:	f7ff fc81 	bl	8005910 <LL_RCC_LSI_IsReady>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f1      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x3b0>
 8006014:	e013      	b.n	800603e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006016:	f7ff fc6b 	bl	80058f0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800601a:	f7fe fb63 	bl	80046e4 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006022:	f7fe fb5f 	bl	80046e4 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b11      	cmp	r3, #17
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e182      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006034:	f7ff fc6c 	bl	8005910 <LL_RCC_LSI_IsReady>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f1      	bne.n	8006022 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80d8 	beq.w	80061fc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800604c:	f7ff fb82 	bl	8005754 <LL_PWR_IsEnabledBkUpAccess>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006056:	f7ff fb63 	bl	8005720 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800605a:	f7fe fb43 	bl	80046e4 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006062:	f7fe fb3f 	bl	80046e4 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e162      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006074:	f7ff fb6e 	bl	8005754 <LL_PWR_IsEnabledBkUpAccess>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f1      	beq.n	8006062 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d07b      	beq.n	800617e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b85      	cmp	r3, #133	@ 0x85
 800608c:	d003      	beq.n	8006096 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d109      	bne.n	80060aa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060aa:	f7fe fb1b 	bl	80046e4 <HAL_GetTick>
 80060ae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060c4:	e00a      	b.n	80060dc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fe fb0d 	bl	80046e4 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e12e      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060dc:	f7ff fbe7 	bl	80058ae <LL_RCC_LSE_IsReady>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0ef      	beq.n	80060c6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b81      	cmp	r3, #129	@ 0x81
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b85      	cmp	r3, #133	@ 0x85
 80060f4:	d121      	bne.n	800613a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f6:	f7fe faf5 	bl	80046e4 <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006110:	e00a      	b.n	8006128 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006112:	f7fe fae7 	bl	80046e4 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e108      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ec      	beq.n	8006112 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006138:	e060      	b.n	80061fc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613a:	f7fe fad3 	bl	80046e4 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800614c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fe fac5 	bl	80046e4 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0e6      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800616c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ec      	bne.n	8006156 <HAL_RCC_OscConfig+0x50e>
 800617c:	e03e      	b.n	80061fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800617e:	f7fe fab1 	bl	80046e4 <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006198:	e00a      	b.n	80061b0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fe faa3 	bl	80046e4 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0c4      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ec      	bne.n	800619a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c0:	f7fe fa90 	bl	80046e4 <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80061da:	e00a      	b.n	80061f2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061dc:	f7fe fa82 	bl	80046e4 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e0a3      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80061f2:	f7ff fb5c 	bl	80058ae <LL_RCC_LSE_IsReady>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ef      	bne.n	80061dc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8099 	beq.w	8006338 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b0c      	cmp	r3, #12
 800620a:	d06c      	beq.n	80062e6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	2b02      	cmp	r3, #2
 8006212:	d14b      	bne.n	80062ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006214:	f7ff fc87 	bl	8005b26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006218:	f7fe fa64 	bl	80046e4 <HAL_GetTick>
 800621c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006220:	f7fe fa60 	bl	80046e4 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b0a      	cmp	r3, #10
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e083      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006232:	f7ff fc86 	bl	8005b42 <LL_RCC_PLL_IsReady>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f1      	bne.n	8006220 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800623c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	4b40      	ldr	r3, [pc, #256]	@ (8006344 <HAL_RCC_OscConfig+0x6fc>)
 8006244:	4013      	ands	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006254:	0212      	lsls	r2, r2, #8
 8006256:	4311      	orrs	r1, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800625c:	4311      	orrs	r1, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006262:	4311      	orrs	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006268:	430a      	orrs	r2, r1
 800626a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800626e:	4313      	orrs	r3, r2
 8006270:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006272:	f7ff fc4a 	bl	8005b0a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006284:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7fe fa2d 	bl	80046e4 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628e:	f7fe fa29 	bl	80046e4 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b0a      	cmp	r3, #10
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e04c      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80062a0:	f7ff fc4f 	bl	8005b42 <LL_RCC_PLL_IsReady>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f1      	beq.n	800628e <HAL_RCC_OscConfig+0x646>
 80062aa:	e045      	b.n	8006338 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ac:	f7ff fc3b 	bl	8005b26 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7fe fa18 	bl	80046e4 <HAL_GetTick>
 80062b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fe fa14 	bl	80046e4 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b0a      	cmp	r3, #10
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e037      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062ca:	f7ff fc3a 	bl	8005b42 <LL_RCC_PLL_IsReady>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f1      	bne.n	80062b8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062de:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <HAL_RCC_OscConfig+0x700>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	60cb      	str	r3, [r1, #12]
 80062e4:	e028      	b.n	8006338 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e023      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f003 0203 	and.w	r2, r3, #3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	429a      	cmp	r2, r3
 8006306:	d115      	bne.n	8006334 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006312:	429a      	cmp	r2, r3
 8006314:	d10e      	bne.n	8006334 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	429a      	cmp	r2, r3
 8006324:	d106      	bne.n	8006334 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	11c1808c 	.word	0x11c1808c
 8006348:	eefefffc 	.word	0xeefefffc

0800634c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e10f      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006360:	4b89      	ldr	r3, [pc, #548]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d91b      	bls.n	80063a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b86      	ldr	r3, [pc, #536]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 0207 	bic.w	r2, r3, #7
 8006376:	4984      	ldr	r1, [pc, #528]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800637e:	f7fe f9b1 	bl	80046e4 <HAL_GetTick>
 8006382:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006384:	e008      	b.n	8006398 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006386:	f7fe f9ad 	bl	80046e4 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0f3      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006398:	4b7b      	ldr	r3, [pc, #492]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d1ef      	bne.n	8006386 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fb40 	bl	8005a3c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063bc:	f7fe f992 	bl	80046e4 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063c4:	f7fe f98e 	bl	80046e4 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e0d4      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063d6:	f7ff fbf2 	bl	8005bbe <LL_RCC_IsActiveFlag_HPRE>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f1      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d016      	beq.n	800641a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fb36 	bl	8005a62 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063f6:	f7fe f975 	bl	80046e4 <HAL_GetTick>
 80063fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063fe:	f7fe f971 	bl	80046e4 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e0b7      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006410:	f7ff fbe6 	bl	8005be0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f1      	beq.n	80063fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fb2f 	bl	8005a8e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006430:	f7fe f958 	bl	80046e4 <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006438:	f7fe f954 	bl	80046e4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e09a      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800644a:	f7ff fbdb 	bl	8005c04 <LL_RCC_IsActiveFlag_PPRE1>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f1      	beq.n	8006438 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d017      	beq.n	8006490 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fb24 	bl	8005ab4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800646c:	f7fe f93a 	bl	80046e4 <HAL_GetTick>
 8006470:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006474:	f7fe f936 	bl	80046e4 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e07c      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006486:	f7ff fbce 	bl	8005c26 <LL_RCC_IsActiveFlag_PPRE2>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f1      	beq.n	8006474 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d043      	beq.n	8006524 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d106      	bne.n	80064b2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064a4:	f7ff f9b1 	bl	800580a <LL_RCC_HSE_IsReady>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d11e      	bne.n	80064ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e066      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d106      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064ba:	f7ff fb42 	bl	8005b42 <LL_RCC_PLL_IsReady>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e05b      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064d0:	f7ff fa4b 	bl	800596a <LL_RCC_MSI_IsReady>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d108      	bne.n	80064ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e050      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064de:	f7ff f9c1 	bl	8005864 <LL_RCC_HSI_IsReady>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e049      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fa85 	bl	8005a00 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064f6:	f7fe f8f5 	bl	80046e4 <HAL_GetTick>
 80064fa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fe:	f7fe f8f1 	bl	80046e4 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e035      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006514:	f7ff fa87 	bl	8005a26 <LL_RCC_GetSysClkSource>
 8006518:	4602      	mov	r2, r0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	429a      	cmp	r2, r3
 8006522:	d1ec      	bne.n	80064fe <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006524:	4b18      	ldr	r3, [pc, #96]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d21b      	bcs.n	800656a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 0207 	bic.w	r2, r3, #7
 800653a:	4913      	ldr	r1, [pc, #76]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006542:	f7fe f8cf 	bl	80046e4 <HAL_GetTick>
 8006546:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006548:	e008      	b.n	800655c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800654a:	f7fe f8cb 	bl	80046e4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e011      	b.n	8006580 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655c:	4b0a      	ldr	r3, [pc, #40]	@ (8006588 <HAL_RCC_ClockConfig+0x23c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d1ef      	bne.n	800654a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800656a:	f000 f8b3 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 800656e:	4603      	mov	r3, r0
 8006570:	4a06      	ldr	r2, [pc, #24]	@ (800658c <HAL_RCC_ClockConfig+0x240>)
 8006572:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006574:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <HAL_RCC_ClockConfig+0x244>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe f879 	bl	8004670 <HAL_InitTick>
 800657e:	4603      	mov	r3, r0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	58004000 	.word	0x58004000
 800658c:	2000000c 	.word	0x2000000c
 8006590:	20000004 	.word	0x20000004

08006594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065a2:	f7ff fa40 	bl	8005a26 <LL_RCC_GetSysClkSource>
 80065a6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065a8:	f7ff fafe 	bl	8005ba8 <LL_RCC_PLL_GetMainSource>
 80065ac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b0c      	cmp	r3, #12
 80065b8:	d139      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d136      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065c0:	f7ff f9e3 	bl	800598a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d115      	bne.n	80065f6 <HAL_RCC_GetSysClockFreq+0x62>
 80065ca:	f7ff f9de 	bl	800598a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_GetSysClockFreq+0x4e>
 80065d4:	f7ff f9e9 	bl	80059aa <LL_RCC_MSI_GetRange>
 80065d8:	4603      	mov	r3, r0
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	e005      	b.n	80065ee <HAL_RCC_GetSysClockFreq+0x5a>
 80065e2:	f7ff f9ed 	bl	80059c0 <LL_RCC_MSI_GetRangeAfterStandby>
 80065e6:	4603      	mov	r3, r0
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	4a36      	ldr	r2, [pc, #216]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x134>)
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	e014      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x8c>
 80065f6:	f7ff f9c8 	bl	800598a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <HAL_RCC_GetSysClockFreq+0x7a>
 8006600:	f7ff f9d3 	bl	80059aa <LL_RCC_MSI_GetRange>
 8006604:	4603      	mov	r3, r0
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	e005      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x86>
 800660e:	f7ff f9d7 	bl	80059c0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006612:	4603      	mov	r3, r0
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	4a2b      	ldr	r2, [pc, #172]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d115      	bne.n	8006654 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800662c:	e012      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b04      	cmp	r3, #4
 8006632:	d102      	bne.n	800663a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006634:	4b25      	ldr	r3, [pc, #148]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e00c      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d109      	bne.n	8006654 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006640:	f7ff f8b6 	bl	80057b0 <LL_RCC_HSE_IsEnabledDiv2>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d102      	bne.n	8006650 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800664a:	4b20      	ldr	r3, [pc, #128]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x138>)
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	e001      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006650:	4b1f      	ldr	r3, [pc, #124]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006652:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006654:	f7ff f9e7 	bl	8005a26 <LL_RCC_GetSysClkSource>
 8006658:	4603      	mov	r3, r0
 800665a:	2b0c      	cmp	r3, #12
 800665c:	d12f      	bne.n	80066be <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800665e:	f7ff faa3 	bl	8005ba8 <LL_RCC_PLL_GetMainSource>
 8006662:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0xde>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d003      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0xe4>
 8006670:	e00d      	b.n	800668e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006672:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006674:	60fb      	str	r3, [r7, #12]
        break;
 8006676:	e00d      	b.n	8006694 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006678:	f7ff f89a 	bl	80057b0 <LL_RCC_HSE_IsEnabledDiv2>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006682:	4b12      	ldr	r3, [pc, #72]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006684:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006686:	e005      	b.n	8006694 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800668a:	60fb      	str	r3, [r7, #12]
        break;
 800668c:	e002      	b.n	8006694 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	60fb      	str	r3, [r7, #12]
        break;
 8006692:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006694:	f7ff fa66 	bl	8005b64 <LL_RCC_PLL_GetN>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	fb03 f402 	mul.w	r4, r3, r2
 80066a0:	f7ff fa77 	bl	8005b92 <LL_RCC_PLL_GetDivider>
 80066a4:	4603      	mov	r3, r0
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	3301      	adds	r3, #1
 80066aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80066ae:	f7ff fa65 	bl	8005b7c <LL_RCC_PLL_GetR>
 80066b2:	4603      	mov	r3, r0
 80066b4:	0f5b      	lsrs	r3, r3, #29
 80066b6:	3301      	adds	r3, #1
 80066b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80066bc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}
 80066c8:	0800b538 	.word	0x0800b538
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	01e84800 	.word	0x01e84800

080066d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d4:	b598      	push	{r3, r4, r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066d8:	f7ff ff5c 	bl	8006594 <HAL_RCC_GetSysClockFreq>
 80066dc:	4604      	mov	r4, r0
 80066de:	f7ff f9fc 	bl	8005ada <LL_RCC_GetAHBPrescaler>
 80066e2:	4603      	mov	r3, r0
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	4a03      	ldr	r2, [pc, #12]	@ (80066f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80066ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd98      	pop	{r3, r4, r7, pc}
 80066f8:	0800b4f8 	.word	0x0800b4f8

080066fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	4a10      	ldr	r2, [pc, #64]	@ (8006750 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006712:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006714:	f7ff f9ec 	bl	8005af0 <LL_RCC_GetAHB3Prescaler>
 8006718:	4603      	mov	r3, r0
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	4a0c      	ldr	r2, [pc, #48]	@ (8006754 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a09      	ldr	r2, [pc, #36]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	0c9c      	lsrs	r4, r3, #18
 8006738:	f7ff f800 	bl	800573c <HAL_PWREx_GetVoltageRange>
 800673c:	4603      	mov	r3, r0
 800673e:	4619      	mov	r1, r3
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f80b 	bl	800675c <RCC_SetFlashLatency>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	0800b538 	.word	0x0800b538
 8006754:	0800b4f8 	.word	0x0800b4f8
 8006758:	431bde83 	.word	0x431bde83

0800675c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08e      	sub	sp, #56	@ 0x38
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006766:	4a3a      	ldr	r2, [pc, #232]	@ (8006850 <RCC_SetFlashLatency+0xf4>)
 8006768:	f107 0320 	add.w	r3, r7, #32
 800676c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	3304      	adds	r3, #4
 8006774:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006776:	4a37      	ldr	r2, [pc, #220]	@ (8006854 <RCC_SetFlashLatency+0xf8>)
 8006778:	f107 0318 	add.w	r3, r7, #24
 800677c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	3304      	adds	r3, #4
 8006784:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006786:	4a34      	ldr	r2, [pc, #208]	@ (8006858 <RCC_SetFlashLatency+0xfc>)
 8006788:	f107 030c 	add.w	r3, r7, #12
 800678c:	ca07      	ldmia	r2, {r0, r1, r2}
 800678e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006792:	2300      	movs	r3, #0
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679c:	d11b      	bne.n	80067d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800679e:	2300      	movs	r3, #0
 80067a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a2:	e014      	b.n	80067ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	3338      	adds	r3, #56	@ 0x38
 80067aa:	443b      	add	r3, r7
 80067ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d807      	bhi.n	80067c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	3338      	adds	r3, #56	@ 0x38
 80067be:	443b      	add	r3, r7
 80067c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c6:	e021      	b.n	800680c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	3301      	adds	r3, #1
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d9e7      	bls.n	80067a4 <RCC_SetFlashLatency+0x48>
 80067d4:	e01a      	b.n	800680c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067da:	e014      	b.n	8006806 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	3338      	adds	r3, #56	@ 0x38
 80067e2:	443b      	add	r3, r7
 80067e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d807      	bhi.n	8006800 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	3338      	adds	r3, #56	@ 0x38
 80067f6:	443b      	add	r3, r7
 80067f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067fe:	e005      	b.n	800680c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006802:	3301      	adds	r3, #1
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006808:	2b02      	cmp	r3, #2
 800680a:	d9e7      	bls.n	80067dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800680c:	4b13      	ldr	r3, [pc, #76]	@ (800685c <RCC_SetFlashLatency+0x100>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 0207 	bic.w	r2, r3, #7
 8006814:	4911      	ldr	r1, [pc, #68]	@ (800685c <RCC_SetFlashLatency+0x100>)
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800681c:	f7fd ff62 	bl	80046e4 <HAL_GetTick>
 8006820:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006822:	e008      	b.n	8006836 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006824:	f7fd ff5e 	bl	80046e4 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e007      	b.n	8006846 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006836:	4b09      	ldr	r3, [pc, #36]	@ (800685c <RCC_SetFlashLatency+0x100>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006840:	429a      	cmp	r2, r3
 8006842:	d1ef      	bne.n	8006824 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3738      	adds	r7, #56	@ 0x38
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	0800b4d0 	.word	0x0800b4d0
 8006854:	0800b4d8 	.word	0x0800b4d8
 8006858:	0800b4e0 	.word	0x0800b4e0
 800685c:	58004000 	.word	0x58004000

08006860 <LL_RCC_LSE_IsReady>:
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b02      	cmp	r3, #2
 8006872:	d101      	bne.n	8006878 <LL_RCC_LSE_IsReady+0x18>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <LL_RCC_LSE_IsReady+0x1a>
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <LL_RCC_SetUSARTClockSource>:
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0c1b      	lsrs	r3, r3, #16
 8006896:	43db      	mvns	r3, r3
 8006898:	401a      	ands	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <LL_RCC_SetI2SClockSource>:
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80068ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <LL_RCC_SetLPUARTClockSource>:
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr

08006906 <LL_RCC_SetI2CClockSource>:
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800690e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006912:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800691e:	43db      	mvns	r3, r3
 8006920:	401a      	ands	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800692a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <LL_RCC_SetLPTIMClockSource>:
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <LL_RCC_SetRNGClockSource>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006980:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <LL_RCC_SetADCClockSource>:
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80069a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <LL_RCC_SetRTCClockSource>:
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80069cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <LL_RCC_GetRTCClockSource>:
{
 80069ee:	b480      	push	{r7}
 80069f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80069f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <LL_RCC_ForceBackupDomainReset>:
{
 8006a06:	b480      	push	{r7}
 8006a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a1e:	bf00      	nop
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006a26:	b480      	push	{r7}
 8006a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006a54:	2300      	movs	r3, #0
 8006a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006a58:	2300      	movs	r3, #0
 8006a5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d058      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006a68:	f7fe fe5a 	bl	8005720 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a6c:	f7fd fe3a 	bl	80046e4 <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006a72:	e009      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a74:	f7fd fe36 	bl	80046e4 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d902      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	74fb      	strb	r3, [r7, #19]
        break;
 8006a86:	e006      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006a88:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a94:	d1ee      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006a96:	7cfb      	ldrb	r3, [r7, #19]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d13c      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006a9c:	f7ff ffa7 	bl	80069ee <LL_RCC_GetRTCClockSource>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d00f      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ab8:	f7ff ffa5 	bl	8006a06 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006abc:	f7ff ffb3 	bl	8006a26 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ac0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d014      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fd fe06 	bl	80046e4 <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006ada:	e00b      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006adc:	f7fd fe02 	bl	80046e4 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d902      	bls.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	74fb      	strb	r3, [r7, #19]
            break;
 8006af2:	e004      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006af4:	f7ff feb4 	bl	8006860 <LL_RCC_LSE_IsReady>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d1ee      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006afe:	7cfb      	ldrb	r3, [r7, #19]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff ff5b 	bl	80069c4 <LL_RCC_SetRTCClockSource>
 8006b0e:	e004      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	74bb      	strb	r3, [r7, #18]
 8006b14:	e001      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b16:	7cfb      	ldrb	r3, [r7, #19]
 8006b18:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fea9 	bl	8006882 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fe9e 	bl	8006882 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fec0 	bl	80068dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fee6 	bl	800693e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fedb 	bl	800693e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fed0 	bl	800693e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fea9 	bl	8006906 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff fe9e 	bl	8006906 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fe93 	bl	8006906 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fe5e 	bl	80068b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fea5 	bl	8006970 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d011      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fea3 	bl	800699a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c5c:	d107      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	58000400 	.word	0x58000400

08006c7c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c8c:	4904      	ldr	r1, [pc, #16]	@ (8006ca0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	608b      	str	r3, [r1, #8]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	58000400 	.word	0x58000400

08006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	@ (8006cc0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cae:	4a04      	ldr	r2, [pc, #16]	@ (8006cc0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006cb8:	bf00      	nop
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr
 8006cc0:	58000400 	.word	0x58000400

08006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cc8:	4b05      	ldr	r3, [pc, #20]	@ (8006ce0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cce:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006cd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006cd8:	bf00      	nop
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr
 8006ce0:	58000400 	.word	0x58000400

08006ce4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ce8:	4b03      	ldr	r3, [pc, #12]	@ (8006cf8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cee:	619a      	str	r2, [r3, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr
 8006cf8:	58000400 	.word	0x58000400

08006cfc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d00:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d101      	bne.n	8006d10 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	58000400 	.word	0x58000400

08006d20 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d101      	bne.n	8006d34 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	58000400 	.word	0x58000400

08006d44 <LL_RCC_RF_DisableReset>:
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <LL_RCC_IsRFUnderReset>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d78:	d101      	bne.n	8006d7e <LL_RCC_IsRFUnderReset+0x1a>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <LL_RCC_IsRFUnderReset+0x1c>
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006d90:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <LL_EXTI_EnableIT_32_63+0x24>)
 8006d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006d96:	4905      	ldr	r1, [pc, #20]	@ (8006dac <LL_EXTI_EnableIT_32_63+0x24>)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	58000800 	.word	0x58000800

08006db0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
    return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	e052      	b.n	8006e6c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	799b      	ldrb	r3, [r3, #6]
 8006dce:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_SUBGHZ_Init+0x2c>
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d109      	bne.n	8006df0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fe fc86 	bl	80056f4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006de8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006dec:	f7ff ffcc 	bl	8006d88 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d126      	bne.n	8006e44 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006dfc:	f7ff ffa2 	bl	8006d44 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e00:	4b1c      	ldr	r3, [pc, #112]	@ (8006e74 <HAL_SUBGHZ_Init+0xc4>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	0cdb      	lsrs	r3, r3, #19
 8006e0e:	2264      	movs	r2, #100	@ 0x64
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	609a      	str	r2, [r3, #8]
        break;
 8006e26:	e007      	b.n	8006e38 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006e2e:	f7ff ff99 	bl	8006d64 <LL_RCC_IsRFUnderReset>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1ee      	bne.n	8006e16 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e38:	f7ff ff34 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006e3c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006e40:	f7ff ff1c 	bl	8006c7c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006e44:	f7ff ff4e 	bl	8006ce4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 f96e 	bl	8007134 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	719a      	strb	r2, [r3, #6]

  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	2000000c 	.word	0x2000000c

08006e78 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	461a      	mov	r2, r3
 8006e84:	460b      	mov	r3, r1
 8006e86:	72fb      	strb	r3, [r7, #11]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	799b      	ldrb	r3, [r3, #6]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d14a      	bne.n	8006f2c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	795b      	ldrb	r3, [r3, #5]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e045      	b.n	8006f2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fa11 	bl	80072d0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006eae:	7afb      	ldrb	r3, [r7, #11]
 8006eb0:	2b84      	cmp	r3, #132	@ 0x84
 8006eb2:	d002      	beq.n	8006eba <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	2b94      	cmp	r3, #148	@ 0x94
 8006eb8:	d103      	bne.n	8006ec2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	711a      	strb	r2, [r3, #4]
 8006ec0:	e002      	b.n	8006ec8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ec8:	f7ff fefc 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f94f 	bl	8007174 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	82bb      	strh	r3, [r7, #20]
 8006eda:	e00a      	b.n	8006ef2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006edc:	8abb      	ldrh	r3, [r7, #20]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f944 	bl	8007174 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006eec:	8abb      	ldrh	r3, [r7, #20]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	82bb      	strh	r3, [r7, #20]
 8006ef2:	8aba      	ldrh	r2, [r7, #20]
 8006ef4:	893b      	ldrh	r3, [r7, #8]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d3f0      	bcc.n	8006edc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006efa:	f7ff fed3 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b84      	cmp	r3, #132	@ 0x84
 8006f02:	d002      	beq.n	8006f0a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fa07 	bl	8007318 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
 8006f16:	e001      	b.n	8006f1c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	715a      	strb	r2, [r3, #5]

    return status;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	e000      	b.n	8006f2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006f2c:	2302      	movs	r3, #2
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b088      	sub	sp, #32
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	461a      	mov	r2, r3
 8006f42:	460b      	mov	r3, r1
 8006f44:	72fb      	strb	r3, [r7, #11]
 8006f46:	4613      	mov	r3, r2
 8006f48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	799b      	ldrb	r3, [r3, #6]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d13d      	bne.n	8006fd4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	795b      	ldrb	r3, [r3, #5]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e038      	b.n	8006fd6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f9b0 	bl	80072d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f70:	f7ff fea8 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	4619      	mov	r1, r3
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f8fb 	bl	8007174 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f8f7 	bl	8007174 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f86:	2300      	movs	r3, #0
 8006f88:	82fb      	strh	r3, [r7, #22]
 8006f8a:	e009      	b.n	8006fa0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f946 	bl	8007220 <SUBGHZSPI_Receive>
      pData++;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f9a:	8afb      	ldrh	r3, [r7, #22]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	82fb      	strh	r3, [r7, #22]
 8006fa0:	8afa      	ldrh	r2, [r7, #22]
 8006fa2:	893b      	ldrh	r3, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d3f1      	bcc.n	8006f8c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006fa8:	f7ff fe7c 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f9b3 	bl	8007318 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e001      	b.n	8006fc4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	715a      	strb	r2, [r3, #5]

    return status;
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
 8006fd2:	e000      	b.n	8006fd6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	460b      	mov	r3, r1
 8006fec:	72fb      	strb	r3, [r7, #11]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	799b      	ldrb	r3, [r3, #6]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d13e      	bne.n	800707a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	795b      	ldrb	r3, [r3, #5]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007004:	2302      	movs	r3, #2
 8007006:	e039      	b.n	800707c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f95e 	bl	80072d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007014:	f7ff fe56 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007018:	210e      	movs	r1, #14
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f8aa 	bl	8007174 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	4619      	mov	r1, r3
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f8a5 	bl	8007174 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800702a:	2300      	movs	r3, #0
 800702c:	82bb      	strh	r3, [r7, #20]
 800702e:	e00a      	b.n	8007046 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007030:	8abb      	ldrh	r3, [r7, #20]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f89a 	bl	8007174 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007040:	8abb      	ldrh	r3, [r7, #20]
 8007042:	3301      	adds	r3, #1
 8007044:	82bb      	strh	r3, [r7, #20]
 8007046:	8aba      	ldrh	r2, [r7, #20]
 8007048:	893b      	ldrh	r3, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3f0      	bcc.n	8007030 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800704e:	f7ff fe29 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f960 	bl	8007318 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
 8007064:	e001      	b.n	800706a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	715a      	strb	r2, [r3, #5]

    return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	e000      	b.n	800707c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800707a:	2302      	movs	r3, #2
  }
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	461a      	mov	r2, r3
 8007090:	460b      	mov	r3, r1
 8007092:	72fb      	strb	r3, [r7, #11]
 8007094:	4613      	mov	r3, r2
 8007096:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	799b      	ldrb	r3, [r3, #6]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d141      	bne.n	800712a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	795b      	ldrb	r3, [r3, #5]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e03c      	b.n	800712c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f909 	bl	80072d0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070be:	f7ff fe01 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80070c2:	211e      	movs	r1, #30
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f855 	bl	8007174 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	4619      	mov	r1, r3
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 f850 	bl	8007174 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f84c 	bl	8007174 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070dc:	2300      	movs	r3, #0
 80070de:	82fb      	strh	r3, [r7, #22]
 80070e0:	e009      	b.n	80070f6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070e2:	69b9      	ldr	r1, [r7, #24]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f89b 	bl	8007220 <SUBGHZSPI_Receive>
      pData++;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	3301      	adds	r3, #1
 80070ee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80070f0:	8afb      	ldrh	r3, [r7, #22]
 80070f2:	3301      	adds	r3, #1
 80070f4:	82fb      	strh	r3, [r7, #22]
 80070f6:	8afa      	ldrh	r2, [r7, #22]
 80070f8:	893b      	ldrh	r3, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3f1      	bcc.n	80070e2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070fe:	f7ff fdd1 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f908 	bl	8007318 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	77fb      	strb	r3, [r7, #31]
 8007114:	e001      	b.n	800711a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	715a      	strb	r2, [r3, #5]

    return status;
 8007126:	7ffb      	ldrb	r3, [r7, #31]
 8007128:	e000      	b.n	800712c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800712a:	2302      	movs	r3, #2
  }
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0b      	ldr	r2, [pc, #44]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 8007142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007146:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007148:	4a09      	ldr	r2, [pc, #36]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007150:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007152:	4b07      	ldr	r3, [pc, #28]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 8007154:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007158:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800715a:	4b05      	ldr	r3, [pc, #20]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a04      	ldr	r2, [pc, #16]	@ (8007170 <SUBGHZSPI_Init+0x3c>)
 8007160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007164:	6013      	str	r3, [r2, #0]
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	58010000 	.word	0x58010000

08007174 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007184:	4b23      	ldr	r3, [pc, #140]	@ (8007214 <SUBGHZSPI_Transmit+0xa0>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	0cdb      	lsrs	r3, r3, #19
 8007192:	2264      	movs	r2, #100	@ 0x64
 8007194:	fb02 f303 	mul.w	r3, r2, r3
 8007198:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d105      	bne.n	80071ac <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	609a      	str	r2, [r3, #8]
      break;
 80071aa:	e008      	b.n	80071be <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80071b2:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <SUBGHZSPI_Transmit+0xa4>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d1ed      	bne.n	800719a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80071be:	4b17      	ldr	r3, [pc, #92]	@ (800721c <SUBGHZSPI_Transmit+0xa8>)
 80071c0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071c8:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <SUBGHZSPI_Transmit+0xa0>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	0cdb      	lsrs	r3, r3, #19
 80071d6:	2264      	movs	r2, #100	@ 0x64
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d105      	bne.n	80071f0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	609a      	str	r2, [r3, #8]
      break;
 80071ee:	e008      	b.n	8007202 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80071f6:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <SUBGHZSPI_Transmit+0xa4>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d1ed      	bne.n	80071de <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007202:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <SUBGHZSPI_Transmit+0xa4>)
 8007204:	68db      	ldr	r3, [r3, #12]

  return status;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c
 8007218:	58010000 	.word	0x58010000
 800721c:	5801000c 	.word	0x5801000c

08007220 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800722e:	4b25      	ldr	r3, [pc, #148]	@ (80072c4 <SUBGHZSPI_Receive+0xa4>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	0cdb      	lsrs	r3, r3, #19
 800723c:	2264      	movs	r2, #100	@ 0x64
 800723e:	fb02 f303 	mul.w	r3, r2, r3
 8007242:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	609a      	str	r2, [r3, #8]
      break;
 8007254:	e008      	b.n	8007268 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800725c:	4b1a      	ldr	r3, [pc, #104]	@ (80072c8 <SUBGHZSPI_Receive+0xa8>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d1ed      	bne.n	8007244 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007268:	4b18      	ldr	r3, [pc, #96]	@ (80072cc <SUBGHZSPI_Receive+0xac>)
 800726a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	22ff      	movs	r2, #255	@ 0xff
 8007270:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007272:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <SUBGHZSPI_Receive+0xa4>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4613      	mov	r3, r2
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	0cdb      	lsrs	r3, r3, #19
 8007280:	2264      	movs	r2, #100	@ 0x64
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	609a      	str	r2, [r3, #8]
      break;
 8007298:	e008      	b.n	80072ac <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3b01      	subs	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80072a0:	4b09      	ldr	r3, [pc, #36]	@ (80072c8 <SUBGHZSPI_Receive+0xa8>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d1ed      	bne.n	8007288 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80072ac:	4b06      	ldr	r3, [pc, #24]	@ (80072c8 <SUBGHZSPI_Receive+0xa8>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	701a      	strb	r2, [r3, #0]

  return status;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c
 80072c8:	58010000 	.word	0x58010000
 80072cc:	5801000c 	.word	0x5801000c

080072d0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d111      	bne.n	8007304 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80072e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <SUBGHZ_CheckDeviceReady+0x44>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4413      	add	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072f0:	f7ff fce8 	bl	8006cc4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1f9      	bne.n	80072f4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007300:	f7ff fcd0 	bl	8006ca4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f807 	bl	8007318 <SUBGHZ_WaitOnBusy>
 800730a:	4603      	mov	r3, r0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	2000000c 	.word	0x2000000c

08007318 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007324:	4b12      	ldr	r3, [pc, #72]	@ (8007370 <SUBGHZ_WaitOnBusy+0x58>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	0d1b      	lsrs	r3, r3, #20
 8007332:	2264      	movs	r2, #100	@ 0x64
 8007334:	fb02 f303 	mul.w	r3, r2, r3
 8007338:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800733a:	f7ff fcf1 	bl	8006d20 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800733e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d105      	bne.n	8007352 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e009      	b.n	8007366 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b01      	subs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007358:	f7ff fcd0 	bl	8006cfc <LL_PWR_IsActiveFlag_RFBUSYS>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4013      	ands	r3, r2
 8007362:	2b01      	cmp	r3, #1
 8007364:	d0e9      	beq.n	800733a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	2000000c 	.word	0x2000000c

08007374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	@ 0x28
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	2b20      	cmp	r3, #32
 800738c:	d173      	bne.n	8007476 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_Transmit+0x26>
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e06c      	b.n	8007478 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2221      	movs	r2, #33	@ 0x21
 80073aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ae:	f7fd f999 	bl	80046e4 <HAL_GetTick>
 80073b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	88fa      	ldrh	r2, [r7, #6]
 80073b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073cc:	d108      	bne.n	80073e0 <HAL_UART_Transmit+0x6c>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e003      	b.n	80073e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073e8:	e02c      	b.n	8007444 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	2180      	movs	r1, #128	@ 0x80
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f907 	bl	8007608 <UART_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e039      	b.n	8007478 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007418:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	3302      	adds	r3, #2
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e007      	b.n	8007432 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	3301      	adds	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1cc      	bne.n	80073ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2200      	movs	r2, #0
 8007458:	2140      	movs	r1, #64	@ 0x40
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 f8d4 	bl	8007608 <UART_WaitOnFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e006      	b.n	8007478 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e000      	b.n	8007478 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007476:	2302      	movs	r3, #2
  }
}
 8007478:	4618      	mov	r0, r3
 800747a:	3720      	adds	r7, #32
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	@ 0x28
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007496:	2b20      	cmp	r3, #32
 8007498:	f040 80b1 	bne.w	80075fe <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Receive+0x28>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0a9      	b.n	8007600 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2222      	movs	r2, #34	@ 0x22
 80074b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074c2:	f7fd f90f 	bl	80046e4 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e0:	d10e      	bne.n	8007500 <HAL_UART_Receive+0x80>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d105      	bne.n	80074f6 <HAL_UART_Receive+0x76>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074f4:	e02d      	b.n	8007552 <HAL_UART_Receive+0xd2>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074fe:	e028      	b.n	8007552 <HAL_UART_Receive+0xd2>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <HAL_UART_Receive+0xa4>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_UART_Receive+0x9a>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	22ff      	movs	r2, #255	@ 0xff
 8007514:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007518:	e01b      	b.n	8007552 <HAL_UART_Receive+0xd2>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	227f      	movs	r2, #127	@ 0x7f
 800751e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007522:	e016      	b.n	8007552 <HAL_UART_Receive+0xd2>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800752c:	d10d      	bne.n	800754a <HAL_UART_Receive+0xca>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <HAL_UART_Receive+0xc0>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	227f      	movs	r2, #127	@ 0x7f
 800753a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800753e:	e008      	b.n	8007552 <HAL_UART_Receive+0xd2>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	223f      	movs	r2, #63	@ 0x3f
 8007544:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007548:	e003      	b.n	8007552 <HAL_UART_Receive+0xd2>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007558:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007562:	d108      	bne.n	8007576 <HAL_UART_Receive+0xf6>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	e003      	b.n	800757e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800757e:	e032      	b.n	80075e6 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	2120      	movs	r1, #32
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f83c 	bl	8007608 <UART_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e032      	b.n	8007600 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10c      	bne.n	80075ba <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	8a7b      	ldrh	r3, [r7, #18]
 80075aa:	4013      	ands	r3, r2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	3302      	adds	r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e00c      	b.n	80075d4 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	8a7b      	ldrh	r3, [r7, #18]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4013      	ands	r3, r2
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	3301      	adds	r3, #1
 80075d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1c6      	bne.n	8007580 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e000      	b.n	8007600 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80075fe:	2302      	movs	r3, #2
  }
}
 8007600:	4618      	mov	r0, r3
 8007602:	3720      	adds	r7, #32
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b09c      	sub	sp, #112	@ 0x70
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007618:	e0af      	b.n	800777a <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	f000 80ab 	beq.w	800777a <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007624:	f7fd f85e 	bl	80046e4 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007630:	429a      	cmp	r2, r3
 8007632:	d302      	bcc.n	800763a <UART_WaitOnFlagUntilTimeout+0x32>
 8007634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007636:	2b00      	cmp	r3, #0
 8007638:	d140      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800764a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800764e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800765a:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800765e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	663b      	str	r3, [r7, #96]	@ 0x60
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800768c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800768e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800769a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e06f      	b.n	800779c <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d057      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x172>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b80      	cmp	r3, #128	@ 0x80
 80076ce:	d054      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x172>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b40      	cmp	r3, #64	@ 0x40
 80076d4:	d051      	beq.n	800777a <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076e4:	d149      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007704:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007710:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	613b      	str	r3, [r7, #16]
   return(result);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007742:	623a      	str	r2, [r7, #32]
 8007744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	69f9      	ldr	r1, [r7, #28]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e010      	b.n	800779c <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	429a      	cmp	r2, r3
 8007796:	f43f af40 	beq.w	800761a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3770      	adds	r7, #112	@ 0x70
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return 1;
 80077a8:	2301      	movs	r3, #1
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <_kill>:

int _kill(int pid, int sig)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80077bc:	f001 fa30 	bl	8008c20 <__errno>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2216      	movs	r2, #22
 80077c4:	601a      	str	r2, [r3, #0]
  return -1;
 80077c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <_exit>:

void _exit (int status)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80077da:	f04f 31ff 	mov.w	r1, #4294967295
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7ff ffe7 	bl	80077b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <_exit+0x12>

080077e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e00a      	b.n	8007810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80077fa:	f3af 8000 	nop.w
 80077fe:	4601      	mov	r1, r0
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	60ba      	str	r2, [r7, #8]
 8007806:	b2ca      	uxtb	r2, r1
 8007808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	3301      	adds	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	dbf0      	blt.n	80077fa <_read+0x12>
  }

  return len;
 8007818:	687b      	ldr	r3, [r7, #4]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e009      	b.n	8007848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	60ba      	str	r2, [r7, #8]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3301      	adds	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	dbf1      	blt.n	8007834 <_write+0x12>
  }
  return len;
 8007850:	687b      	ldr	r3, [r7, #4]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <_close>:

int _close(int file)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr

08007870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007880:	605a      	str	r2, [r3, #4]
  return 0;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <_isatty>:

int _isatty(int file)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007896:	2301      	movs	r3, #1
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	bc80      	pop	{r7}
 80078a0:	4770      	bx	lr

080078a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr
	...

080078bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078c4:	4a14      	ldr	r2, [pc, #80]	@ (8007918 <_sbrk+0x5c>)
 80078c6:	4b15      	ldr	r3, [pc, #84]	@ (800791c <_sbrk+0x60>)
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078d0:	4b13      	ldr	r3, [pc, #76]	@ (8007920 <_sbrk+0x64>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <_sbrk+0x64>)
 80078da:	4a12      	ldr	r2, [pc, #72]	@ (8007924 <_sbrk+0x68>)
 80078dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078de:	4b10      	ldr	r3, [pc, #64]	@ (8007920 <_sbrk+0x64>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d207      	bcs.n	80078fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078ec:	f001 f998 	bl	8008c20 <__errno>
 80078f0:	4603      	mov	r3, r0
 80078f2:	220c      	movs	r2, #12
 80078f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	e009      	b.n	8007910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078fc:	4b08      	ldr	r3, [pc, #32]	@ (8007920 <_sbrk+0x64>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007902:	4b07      	ldr	r3, [pc, #28]	@ (8007920 <_sbrk+0x64>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	4a05      	ldr	r2, [pc, #20]	@ (8007920 <_sbrk+0x64>)
 800790c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20010000 	.word	0x20010000
 800791c:	00000400 	.word	0x00000400
 8007920:	20000404 	.word	0x20000404
 8007924:	20000558 	.word	0x20000558

08007928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007934:	480d      	ldr	r0, [pc, #52]	@ (800796c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007938:	f7ff fff6 	bl	8007928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800793c:	480c      	ldr	r0, [pc, #48]	@ (8007970 <LoopForever+0x6>)
  ldr r1, =_edata
 800793e:	490d      	ldr	r1, [pc, #52]	@ (8007974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007940:	4a0d      	ldr	r2, [pc, #52]	@ (8007978 <LoopForever+0xe>)
  movs r3, #0
 8007942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007944:	e002      	b.n	800794c <LoopCopyDataInit>

08007946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800794a:	3304      	adds	r3, #4

0800794c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800794c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800794e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007950:	d3f9      	bcc.n	8007946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007952:	4a0a      	ldr	r2, [pc, #40]	@ (800797c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007954:	4c0a      	ldr	r4, [pc, #40]	@ (8007980 <LoopForever+0x16>)
  movs r3, #0
 8007956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007958:	e001      	b.n	800795e <LoopFillZerobss>

0800795a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800795a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800795c:	3204      	adds	r2, #4

0800795e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800795e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007960:	d3fb      	bcc.n	800795a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007962:	f001 f963 	bl	8008c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007966:	f7fc faff 	bl	8003f68 <main>

0800796a <LoopForever>:

LoopForever:
  b LoopForever
 800796a:	e7fe      	b.n	800796a <LoopForever>
  ldr   r0, =_estack
 800796c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007974:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8007978:	0800b9b8 	.word	0x0800b9b8
  ldr r2, =_sbss
 800797c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007980:	20000554 	.word	0x20000554

08007984 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007984:	e7fe      	b.n	8007984 <ADC_IRQHandler>

08007986 <atof>:
 8007986:	2100      	movs	r1, #0
 8007988:	f000 be3a 	b.w	8008600 <strtod>

0800798c <atol>:
 800798c:	220a      	movs	r2, #10
 800798e:	2100      	movs	r1, #0
 8007990:	f000 bebe 	b.w	8008710 <strtol>

08007994 <rand>:
 8007994:	4b16      	ldr	r3, [pc, #88]	@ (80079f0 <rand+0x5c>)
 8007996:	b510      	push	{r4, lr}
 8007998:	681c      	ldr	r4, [r3, #0]
 800799a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800799c:	b9b3      	cbnz	r3, 80079cc <rand+0x38>
 800799e:	2018      	movs	r0, #24
 80079a0:	f001 fd22 	bl	80093e8 <malloc>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80079a8:	b920      	cbnz	r0, 80079b4 <rand+0x20>
 80079aa:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <rand+0x60>)
 80079ac:	4812      	ldr	r0, [pc, #72]	@ (80079f8 <rand+0x64>)
 80079ae:	2152      	movs	r1, #82	@ 0x52
 80079b0:	f001 f978 	bl	8008ca4 <__assert_func>
 80079b4:	4911      	ldr	r1, [pc, #68]	@ (80079fc <rand+0x68>)
 80079b6:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <rand+0x6c>)
 80079b8:	e9c0 1300 	strd	r1, r3, [r0]
 80079bc:	4b11      	ldr	r3, [pc, #68]	@ (8007a04 <rand+0x70>)
 80079be:	6083      	str	r3, [r0, #8]
 80079c0:	230b      	movs	r3, #11
 80079c2:	8183      	strh	r3, [r0, #12]
 80079c4:	2100      	movs	r1, #0
 80079c6:	2001      	movs	r0, #1
 80079c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80079cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079ce:	480e      	ldr	r0, [pc, #56]	@ (8007a08 <rand+0x74>)
 80079d0:	690b      	ldr	r3, [r1, #16]
 80079d2:	694c      	ldr	r4, [r1, #20]
 80079d4:	4a0d      	ldr	r2, [pc, #52]	@ (8007a0c <rand+0x78>)
 80079d6:	4358      	muls	r0, r3
 80079d8:	fb02 0004 	mla	r0, r2, r4, r0
 80079dc:	fba3 3202 	umull	r3, r2, r3, r2
 80079e0:	3301      	adds	r3, #1
 80079e2:	eb40 0002 	adc.w	r0, r0, r2
 80079e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80079ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80079ee:	bd10      	pop	{r4, pc}
 80079f0:	20000188 	.word	0x20000188
 80079f4:	0800b578 	.word	0x0800b578
 80079f8:	0800b58f 	.word	0x0800b58f
 80079fc:	abcd330e 	.word	0xabcd330e
 8007a00:	e66d1234 	.word	0xe66d1234
 8007a04:	0005deec 	.word	0x0005deec
 8007a08:	5851f42d 	.word	0x5851f42d
 8007a0c:	4c957f2d 	.word	0x4c957f2d

08007a10 <sulp>:
 8007a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a14:	460f      	mov	r7, r1
 8007a16:	4690      	mov	r8, r2
 8007a18:	f002 f918 	bl	8009c4c <__ulp>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	d011      	beq.n	8007a4a <sulp+0x3a>
 8007a26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd0b      	ble.n	8007a4a <sulp+0x3a>
 8007a32:	051b      	lsls	r3, r3, #20
 8007a34:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a38:	2400      	movs	r4, #0
 8007a3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	f7f8 fdb1 	bl	80005a8 <__aeabi_dmul>
 8007a46:	4604      	mov	r4, r0
 8007a48:	460d      	mov	r5, r1
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a52:	0000      	movs	r0, r0
 8007a54:	0000      	movs	r0, r0
	...

08007a58 <_strtod_l>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	b09f      	sub	sp, #124	@ 0x7c
 8007a5e:	460c      	mov	r4, r1
 8007a60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007a62:	2200      	movs	r2, #0
 8007a64:	921a      	str	r2, [sp, #104]	@ 0x68
 8007a66:	9005      	str	r0, [sp, #20]
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	f04f 0b00 	mov.w	fp, #0
 8007a70:	460a      	mov	r2, r1
 8007a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a74:	7811      	ldrb	r1, [r2, #0]
 8007a76:	292b      	cmp	r1, #43	@ 0x2b
 8007a78:	d048      	beq.n	8007b0c <_strtod_l+0xb4>
 8007a7a:	d836      	bhi.n	8007aea <_strtod_l+0x92>
 8007a7c:	290d      	cmp	r1, #13
 8007a7e:	d830      	bhi.n	8007ae2 <_strtod_l+0x8a>
 8007a80:	2908      	cmp	r1, #8
 8007a82:	d830      	bhi.n	8007ae6 <_strtod_l+0x8e>
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d039      	beq.n	8007afc <_strtod_l+0xa4>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007a8e:	782a      	ldrb	r2, [r5, #0]
 8007a90:	2a30      	cmp	r2, #48	@ 0x30
 8007a92:	f040 80b0 	bne.w	8007bf6 <_strtod_l+0x19e>
 8007a96:	786a      	ldrb	r2, [r5, #1]
 8007a98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a9c:	2a58      	cmp	r2, #88	@ 0x58
 8007a9e:	d16c      	bne.n	8007b7a <_strtod_l+0x122>
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	ab1a      	add	r3, sp, #104	@ 0x68
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4a8e      	ldr	r2, [pc, #568]	@ (8007ce4 <_strtod_l+0x28c>)
 8007aac:	9805      	ldr	r0, [sp, #20]
 8007aae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ab0:	a919      	add	r1, sp, #100	@ 0x64
 8007ab2:	f001 f9c7 	bl	8008e44 <__gethex>
 8007ab6:	f010 060f 	ands.w	r6, r0, #15
 8007aba:	4604      	mov	r4, r0
 8007abc:	d005      	beq.n	8007aca <_strtod_l+0x72>
 8007abe:	2e06      	cmp	r6, #6
 8007ac0:	d126      	bne.n	8007b10 <_strtod_l+0xb8>
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9519      	str	r5, [sp, #100]	@ 0x64
 8007ac8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007aca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f040 857e 	bne.w	80085ce <_strtod_l+0xb76>
 8007ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ad4:	b1bb      	cbz	r3, 8007b06 <_strtod_l+0xae>
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007adc:	b01f      	add	sp, #124	@ 0x7c
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	2920      	cmp	r1, #32
 8007ae4:	d1d0      	bne.n	8007a88 <_strtod_l+0x30>
 8007ae6:	3201      	adds	r2, #1
 8007ae8:	e7c3      	b.n	8007a72 <_strtod_l+0x1a>
 8007aea:	292d      	cmp	r1, #45	@ 0x2d
 8007aec:	d1cc      	bne.n	8007a88 <_strtod_l+0x30>
 8007aee:	2101      	movs	r1, #1
 8007af0:	910e      	str	r1, [sp, #56]	@ 0x38
 8007af2:	1c51      	adds	r1, r2, #1
 8007af4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007af6:	7852      	ldrb	r2, [r2, #1]
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	d1c7      	bne.n	8007a8c <_strtod_l+0x34>
 8007afc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007afe:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8562 	bne.w	80085ca <_strtod_l+0xb72>
 8007b06:	4650      	mov	r0, sl
 8007b08:	4659      	mov	r1, fp
 8007b0a:	e7e7      	b.n	8007adc <_strtod_l+0x84>
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	e7ef      	b.n	8007af0 <_strtod_l+0x98>
 8007b10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b12:	b13a      	cbz	r2, 8007b24 <_strtod_l+0xcc>
 8007b14:	2135      	movs	r1, #53	@ 0x35
 8007b16:	a81c      	add	r0, sp, #112	@ 0x70
 8007b18:	f002 f98a 	bl	8009e30 <__copybits>
 8007b1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	f001 fd6a 	bl	80095f8 <_Bfree>
 8007b24:	3e01      	subs	r6, #1
 8007b26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b28:	2e04      	cmp	r6, #4
 8007b2a:	d806      	bhi.n	8007b3a <_strtod_l+0xe2>
 8007b2c:	e8df f006 	tbb	[pc, r6]
 8007b30:	201d0314 	.word	0x201d0314
 8007b34:	14          	.byte	0x14
 8007b35:	00          	.byte	0x00
 8007b36:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b3a:	05e1      	lsls	r1, r4, #23
 8007b3c:	bf48      	it	mi
 8007b3e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b46:	0d1b      	lsrs	r3, r3, #20
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1bd      	bne.n	8007aca <_strtod_l+0x72>
 8007b4e:	f001 f867 	bl	8008c20 <__errno>
 8007b52:	2322      	movs	r3, #34	@ 0x22
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	e7b8      	b.n	8007aca <_strtod_l+0x72>
 8007b58:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007b5c:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b64:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b68:	e7e7      	b.n	8007b3a <_strtod_l+0xe2>
 8007b6a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007ce8 <_strtod_l+0x290>
 8007b6e:	e7e4      	b.n	8007b3a <_strtod_l+0xe2>
 8007b70:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007b74:	f04f 3aff 	mov.w	sl, #4294967295
 8007b78:	e7df      	b.n	8007b3a <_strtod_l+0xe2>
 8007b7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2b30      	cmp	r3, #48	@ 0x30
 8007b84:	d0f9      	beq.n	8007b7a <_strtod_l+0x122>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d09f      	beq.n	8007aca <_strtod_l+0x72>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	2700      	movs	r7, #0
 8007b8e:	9308      	str	r3, [sp, #32]
 8007b90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b92:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b94:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007b96:	46b9      	mov	r9, r7
 8007b98:	220a      	movs	r2, #10
 8007b9a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007b9c:	7805      	ldrb	r5, [r0, #0]
 8007b9e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007ba2:	b2d9      	uxtb	r1, r3
 8007ba4:	2909      	cmp	r1, #9
 8007ba6:	d928      	bls.n	8007bfa <_strtod_l+0x1a2>
 8007ba8:	4950      	ldr	r1, [pc, #320]	@ (8007cec <_strtod_l+0x294>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	f000 ff9e 	bl	8008aec <strncmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d032      	beq.n	8007c1a <_strtod_l+0x1c2>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bba:	464d      	mov	r5, r9
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2a65      	cmp	r2, #101	@ 0x65
 8007bc0:	d001      	beq.n	8007bc6 <_strtod_l+0x16e>
 8007bc2:	2a45      	cmp	r2, #69	@ 0x45
 8007bc4:	d114      	bne.n	8007bf0 <_strtod_l+0x198>
 8007bc6:	b91d      	cbnz	r5, 8007bd0 <_strtod_l+0x178>
 8007bc8:	9a08      	ldr	r2, [sp, #32]
 8007bca:	4302      	orrs	r2, r0
 8007bcc:	d096      	beq.n	8007afc <_strtod_l+0xa4>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007bd2:	1c62      	adds	r2, r4, #1
 8007bd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bd6:	7862      	ldrb	r2, [r4, #1]
 8007bd8:	2a2b      	cmp	r2, #43	@ 0x2b
 8007bda:	d07a      	beq.n	8007cd2 <_strtod_l+0x27a>
 8007bdc:	2a2d      	cmp	r2, #45	@ 0x2d
 8007bde:	d07e      	beq.n	8007cde <_strtod_l+0x286>
 8007be0:	f04f 0c00 	mov.w	ip, #0
 8007be4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007be8:	2909      	cmp	r1, #9
 8007bea:	f240 8085 	bls.w	8007cf8 <_strtod_l+0x2a0>
 8007bee:	9419      	str	r4, [sp, #100]	@ 0x64
 8007bf0:	f04f 0800 	mov.w	r8, #0
 8007bf4:	e0a5      	b.n	8007d42 <_strtod_l+0x2ea>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e7c8      	b.n	8007b8c <_strtod_l+0x134>
 8007bfa:	f1b9 0f08 	cmp.w	r9, #8
 8007bfe:	bfd8      	it	le
 8007c00:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007c02:	f100 0001 	add.w	r0, r0, #1
 8007c06:	bfda      	itte	le
 8007c08:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c0c:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007c0e:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007c12:	f109 0901 	add.w	r9, r9, #1
 8007c16:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c18:	e7bf      	b.n	8007b9a <_strtod_l+0x142>
 8007c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c20:	785a      	ldrb	r2, [r3, #1]
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	d03b      	beq.n	8007ca0 <_strtod_l+0x248>
 8007c28:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c2a:	464d      	mov	r5, r9
 8007c2c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	d912      	bls.n	8007c5a <_strtod_l+0x202>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e7c2      	b.n	8007bbe <_strtod_l+0x166>
 8007c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c3e:	785a      	ldrb	r2, [r3, #1]
 8007c40:	3001      	adds	r0, #1
 8007c42:	2a30      	cmp	r2, #48	@ 0x30
 8007c44:	d0f8      	beq.n	8007c38 <_strtod_l+0x1e0>
 8007c46:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	f200 84c4 	bhi.w	80085d8 <_strtod_l+0xb80>
 8007c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c52:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c54:	2000      	movs	r0, #0
 8007c56:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c58:	4605      	mov	r5, r0
 8007c5a:	3a30      	subs	r2, #48	@ 0x30
 8007c5c:	f100 0301 	add.w	r3, r0, #1
 8007c60:	d018      	beq.n	8007c94 <_strtod_l+0x23c>
 8007c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c64:	4419      	add	r1, r3
 8007c66:	910a      	str	r1, [sp, #40]	@ 0x28
 8007c68:	462e      	mov	r6, r5
 8007c6a:	f04f 0e0a 	mov.w	lr, #10
 8007c6e:	1c71      	adds	r1, r6, #1
 8007c70:	eba1 0c05 	sub.w	ip, r1, r5
 8007c74:	4563      	cmp	r3, ip
 8007c76:	dc15      	bgt.n	8007ca4 <_strtod_l+0x24c>
 8007c78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007c7c:	182b      	adds	r3, r5, r0
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	f105 0501 	add.w	r5, r5, #1
 8007c84:	4405      	add	r5, r0
 8007c86:	dc1a      	bgt.n	8007cbe <_strtod_l+0x266>
 8007c88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	fb03 2301 	mla	r3, r3, r1, r2
 8007c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c92:	2300      	movs	r3, #0
 8007c94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c96:	1c51      	adds	r1, r2, #1
 8007c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c9a:	7852      	ldrb	r2, [r2, #1]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	e7c5      	b.n	8007c2c <_strtod_l+0x1d4>
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	e7ce      	b.n	8007c42 <_strtod_l+0x1ea>
 8007ca4:	2e08      	cmp	r6, #8
 8007ca6:	dc05      	bgt.n	8007cb4 <_strtod_l+0x25c>
 8007ca8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007caa:	fb0e f606 	mul.w	r6, lr, r6
 8007cae:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	e7dc      	b.n	8007c6e <_strtod_l+0x216>
 8007cb4:	2910      	cmp	r1, #16
 8007cb6:	bfd8      	it	le
 8007cb8:	fb0e f707 	mulle.w	r7, lr, r7
 8007cbc:	e7f8      	b.n	8007cb0 <_strtod_l+0x258>
 8007cbe:	2b0f      	cmp	r3, #15
 8007cc0:	bfdc      	itt	le
 8007cc2:	230a      	movle	r3, #10
 8007cc4:	fb03 2707 	mlale	r7, r3, r7, r2
 8007cc8:	e7e3      	b.n	8007c92 <_strtod_l+0x23a>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e77a      	b.n	8007bc8 <_strtod_l+0x170>
 8007cd2:	f04f 0c00 	mov.w	ip, #0
 8007cd6:	1ca2      	adds	r2, r4, #2
 8007cd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cda:	78a2      	ldrb	r2, [r4, #2]
 8007cdc:	e782      	b.n	8007be4 <_strtod_l+0x18c>
 8007cde:	f04f 0c01 	mov.w	ip, #1
 8007ce2:	e7f8      	b.n	8007cd6 <_strtod_l+0x27e>
 8007ce4:	0800b768 	.word	0x0800b768
 8007ce8:	7ff00000 	.word	0x7ff00000
 8007cec:	0800b5e7 	.word	0x0800b5e7
 8007cf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cf2:	1c51      	adds	r1, r2, #1
 8007cf4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007cf6:	7852      	ldrb	r2, [r2, #1]
 8007cf8:	2a30      	cmp	r2, #48	@ 0x30
 8007cfa:	d0f9      	beq.n	8007cf0 <_strtod_l+0x298>
 8007cfc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d00:	2908      	cmp	r1, #8
 8007d02:	f63f af75 	bhi.w	8007bf0 <_strtod_l+0x198>
 8007d06:	3a30      	subs	r2, #48	@ 0x30
 8007d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d0e:	f04f 080a 	mov.w	r8, #10
 8007d12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d14:	1c56      	adds	r6, r2, #1
 8007d16:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d18:	7852      	ldrb	r2, [r2, #1]
 8007d1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d1e:	f1be 0f09 	cmp.w	lr, #9
 8007d22:	d939      	bls.n	8007d98 <_strtod_l+0x340>
 8007d24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d26:	1a76      	subs	r6, r6, r1
 8007d28:	2e08      	cmp	r6, #8
 8007d2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d2e:	dc03      	bgt.n	8007d38 <_strtod_l+0x2e0>
 8007d30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d32:	4588      	cmp	r8, r1
 8007d34:	bfa8      	it	ge
 8007d36:	4688      	movge	r8, r1
 8007d38:	f1bc 0f00 	cmp.w	ip, #0
 8007d3c:	d001      	beq.n	8007d42 <_strtod_l+0x2ea>
 8007d3e:	f1c8 0800 	rsb	r8, r8, #0
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	d14e      	bne.n	8007de4 <_strtod_l+0x38c>
 8007d46:	9908      	ldr	r1, [sp, #32]
 8007d48:	4308      	orrs	r0, r1
 8007d4a:	f47f aebe 	bne.w	8007aca <_strtod_l+0x72>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f aed4 	bne.w	8007afc <_strtod_l+0xa4>
 8007d54:	2a69      	cmp	r2, #105	@ 0x69
 8007d56:	d028      	beq.n	8007daa <_strtod_l+0x352>
 8007d58:	dc25      	bgt.n	8007da6 <_strtod_l+0x34e>
 8007d5a:	2a49      	cmp	r2, #73	@ 0x49
 8007d5c:	d025      	beq.n	8007daa <_strtod_l+0x352>
 8007d5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007d60:	f47f aecc 	bne.w	8007afc <_strtod_l+0xa4>
 8007d64:	4999      	ldr	r1, [pc, #612]	@ (8007fcc <_strtod_l+0x574>)
 8007d66:	a819      	add	r0, sp, #100	@ 0x64
 8007d68:	f001 fa8e 	bl	8009288 <__match>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f aec5 	beq.w	8007afc <_strtod_l+0xa4>
 8007d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b28      	cmp	r3, #40	@ 0x28
 8007d78:	d12e      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d7a:	4995      	ldr	r1, [pc, #596]	@ (8007fd0 <_strtod_l+0x578>)
 8007d7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d7e:	a819      	add	r0, sp, #100	@ 0x64
 8007d80:	f001 fa96 	bl	80092b0 <__hexnan>
 8007d84:	2805      	cmp	r0, #5
 8007d86:	d127      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007d8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007d8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007d92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007d96:	e698      	b.n	8007aca <_strtod_l+0x72>
 8007d98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d9a:	fb08 2101 	mla	r1, r8, r1, r2
 8007d9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007da4:	e7b5      	b.n	8007d12 <_strtod_l+0x2ba>
 8007da6:	2a6e      	cmp	r2, #110	@ 0x6e
 8007da8:	e7da      	b.n	8007d60 <_strtod_l+0x308>
 8007daa:	498a      	ldr	r1, [pc, #552]	@ (8007fd4 <_strtod_l+0x57c>)
 8007dac:	a819      	add	r0, sp, #100	@ 0x64
 8007dae:	f001 fa6b 	bl	8009288 <__match>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f43f aea2 	beq.w	8007afc <_strtod_l+0xa4>
 8007db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dba:	4987      	ldr	r1, [pc, #540]	@ (8007fd8 <_strtod_l+0x580>)
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	a819      	add	r0, sp, #100	@ 0x64
 8007dc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dc2:	f001 fa61 	bl	8009288 <__match>
 8007dc6:	b910      	cbnz	r0, 8007dce <_strtod_l+0x376>
 8007dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dca:	3301      	adds	r3, #1
 8007dcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dce:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007fdc <_strtod_l+0x584>
 8007dd2:	f04f 0a00 	mov.w	sl, #0
 8007dd6:	e678      	b.n	8007aca <_strtod_l+0x72>
 8007dd8:	4881      	ldr	r0, [pc, #516]	@ (8007fe0 <_strtod_l+0x588>)
 8007dda:	f000 ff5d 	bl	8008c98 <nan>
 8007dde:	4682      	mov	sl, r0
 8007de0:	468b      	mov	fp, r1
 8007de2:	e672      	b.n	8007aca <_strtod_l+0x72>
 8007de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007de6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007de8:	eba8 0303 	sub.w	r3, r8, r3
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	bf08      	it	eq
 8007df2:	46a9      	moveq	r9, r5
 8007df4:	2d10      	cmp	r5, #16
 8007df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df8:	462c      	mov	r4, r5
 8007dfa:	bfa8      	it	ge
 8007dfc:	2410      	movge	r4, #16
 8007dfe:	f7f8 fb59 	bl	80004b4 <__aeabi_ui2d>
 8007e02:	2d09      	cmp	r5, #9
 8007e04:	4682      	mov	sl, r0
 8007e06:	468b      	mov	fp, r1
 8007e08:	dc11      	bgt.n	8007e2e <_strtod_l+0x3d6>
 8007e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f43f ae5c 	beq.w	8007aca <_strtod_l+0x72>
 8007e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e14:	dd76      	ble.n	8007f04 <_strtod_l+0x4ac>
 8007e16:	2b16      	cmp	r3, #22
 8007e18:	dc5d      	bgt.n	8007ed6 <_strtod_l+0x47e>
 8007e1a:	4972      	ldr	r1, [pc, #456]	@ (8007fe4 <_strtod_l+0x58c>)
 8007e1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e24:	4652      	mov	r2, sl
 8007e26:	465b      	mov	r3, fp
 8007e28:	f7f8 fbbe 	bl	80005a8 <__aeabi_dmul>
 8007e2c:	e7d7      	b.n	8007dde <_strtod_l+0x386>
 8007e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe4 <_strtod_l+0x58c>)
 8007e30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e38:	f7f8 fbb6 	bl	80005a8 <__aeabi_dmul>
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	4638      	mov	r0, r7
 8007e40:	468b      	mov	fp, r1
 8007e42:	f7f8 fb37 	bl	80004b4 <__aeabi_ui2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	f7f8 f9f5 	bl	800023c <__adddf3>
 8007e52:	2d0f      	cmp	r5, #15
 8007e54:	4682      	mov	sl, r0
 8007e56:	468b      	mov	fp, r1
 8007e58:	ddd7      	ble.n	8007e0a <_strtod_l+0x3b2>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5c:	1b2c      	subs	r4, r5, r4
 8007e5e:	441c      	add	r4, r3
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	f340 8093 	ble.w	8007f8c <_strtod_l+0x534>
 8007e66:	f014 030f 	ands.w	r3, r4, #15
 8007e6a:	d00a      	beq.n	8007e82 <_strtod_l+0x42a>
 8007e6c:	495d      	ldr	r1, [pc, #372]	@ (8007fe4 <_strtod_l+0x58c>)
 8007e6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e72:	4652      	mov	r2, sl
 8007e74:	465b      	mov	r3, fp
 8007e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e7a:	f7f8 fb95 	bl	80005a8 <__aeabi_dmul>
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	f034 040f 	bics.w	r4, r4, #15
 8007e86:	d073      	beq.n	8007f70 <_strtod_l+0x518>
 8007e88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007e8c:	dd49      	ble.n	8007f22 <_strtod_l+0x4ca>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	46a0      	mov	r8, r4
 8007e92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e94:	46a1      	mov	r9, r4
 8007e96:	9a05      	ldr	r2, [sp, #20]
 8007e98:	f8df b140 	ldr.w	fp, [pc, #320]	@ 8007fdc <_strtod_l+0x584>
 8007e9c:	2322      	movs	r3, #34	@ 0x22
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	f04f 0a00 	mov.w	sl, #0
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f43f ae0f 	beq.w	8007aca <_strtod_l+0x72>
 8007eac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eae:	9805      	ldr	r0, [sp, #20]
 8007eb0:	f001 fba2 	bl	80095f8 <_Bfree>
 8007eb4:	9805      	ldr	r0, [sp, #20]
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	f001 fb9e 	bl	80095f8 <_Bfree>
 8007ebc:	9805      	ldr	r0, [sp, #20]
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	f001 fb9a 	bl	80095f8 <_Bfree>
 8007ec4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ec6:	9805      	ldr	r0, [sp, #20]
 8007ec8:	f001 fb96 	bl	80095f8 <_Bfree>
 8007ecc:	9805      	ldr	r0, [sp, #20]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f001 fb92 	bl	80095f8 <_Bfree>
 8007ed4:	e5f9      	b.n	8007aca <_strtod_l+0x72>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007edc:	4293      	cmp	r3, r2
 8007ede:	dbbc      	blt.n	8007e5a <_strtod_l+0x402>
 8007ee0:	4c40      	ldr	r4, [pc, #256]	@ (8007fe4 <_strtod_l+0x58c>)
 8007ee2:	f1c5 050f 	rsb	r5, r5, #15
 8007ee6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007eea:	4652      	mov	r2, sl
 8007eec:	465b      	mov	r3, fp
 8007eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef2:	f7f8 fb59 	bl	80005a8 <__aeabi_dmul>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef8:	1b5d      	subs	r5, r3, r5
 8007efa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007efe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f02:	e791      	b.n	8007e28 <_strtod_l+0x3d0>
 8007f04:	3316      	adds	r3, #22
 8007f06:	dba8      	blt.n	8007e5a <_strtod_l+0x402>
 8007f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f0a:	eba3 0808 	sub.w	r8, r3, r8
 8007f0e:	4b35      	ldr	r3, [pc, #212]	@ (8007fe4 <_strtod_l+0x58c>)
 8007f10:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f14:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 fc6e 	bl	80007fc <__aeabi_ddiv>
 8007f20:	e75d      	b.n	8007dde <_strtod_l+0x386>
 8007f22:	2300      	movs	r3, #0
 8007f24:	4f30      	ldr	r7, [pc, #192]	@ (8007fe8 <_strtod_l+0x590>)
 8007f26:	1124      	asrs	r4, r4, #4
 8007f28:	4650      	mov	r0, sl
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	461e      	mov	r6, r3
 8007f2e:	2c01      	cmp	r4, #1
 8007f30:	dc21      	bgt.n	8007f76 <_strtod_l+0x51e>
 8007f32:	b10b      	cbz	r3, 8007f38 <_strtod_l+0x4e0>
 8007f34:	4682      	mov	sl, r0
 8007f36:	468b      	mov	fp, r1
 8007f38:	492b      	ldr	r1, [pc, #172]	@ (8007fe8 <_strtod_l+0x590>)
 8007f3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4a:	f7f8 fb2d 	bl	80005a8 <__aeabi_dmul>
 8007f4e:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <_strtod_l+0x584>)
 8007f50:	460a      	mov	r2, r1
 8007f52:	400b      	ands	r3, r1
 8007f54:	4925      	ldr	r1, [pc, #148]	@ (8007fec <_strtod_l+0x594>)
 8007f56:	428b      	cmp	r3, r1
 8007f58:	4682      	mov	sl, r0
 8007f5a:	d898      	bhi.n	8007e8e <_strtod_l+0x436>
 8007f5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf86      	itte	hi
 8007f64:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007ff0 <_strtod_l+0x598>
 8007f68:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007f70:	2300      	movs	r3, #0
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	e076      	b.n	8008064 <_strtod_l+0x60c>
 8007f76:	07e2      	lsls	r2, r4, #31
 8007f78:	d504      	bpl.n	8007f84 <_strtod_l+0x52c>
 8007f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7e:	f7f8 fb13 	bl	80005a8 <__aeabi_dmul>
 8007f82:	2301      	movs	r3, #1
 8007f84:	3601      	adds	r6, #1
 8007f86:	1064      	asrs	r4, r4, #1
 8007f88:	3708      	adds	r7, #8
 8007f8a:	e7d0      	b.n	8007f2e <_strtod_l+0x4d6>
 8007f8c:	d0f0      	beq.n	8007f70 <_strtod_l+0x518>
 8007f8e:	4264      	negs	r4, r4
 8007f90:	f014 020f 	ands.w	r2, r4, #15
 8007f94:	d00a      	beq.n	8007fac <_strtod_l+0x554>
 8007f96:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <_strtod_l+0x58c>)
 8007f98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fc2a 	bl	80007fc <__aeabi_ddiv>
 8007fa8:	4682      	mov	sl, r0
 8007faa:	468b      	mov	fp, r1
 8007fac:	1124      	asrs	r4, r4, #4
 8007fae:	d0df      	beq.n	8007f70 <_strtod_l+0x518>
 8007fb0:	2c1f      	cmp	r4, #31
 8007fb2:	dd1f      	ble.n	8007ff4 <_strtod_l+0x59c>
 8007fb4:	2400      	movs	r4, #0
 8007fb6:	46a0      	mov	r8, r4
 8007fb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fba:	46a1      	mov	r9, r4
 8007fbc:	9a05      	ldr	r2, [sp, #20]
 8007fbe:	2322      	movs	r3, #34	@ 0x22
 8007fc0:	f04f 0a00 	mov.w	sl, #0
 8007fc4:	f04f 0b00 	mov.w	fp, #0
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	e76b      	b.n	8007ea4 <_strtod_l+0x44c>
 8007fcc:	0800b5f2 	.word	0x0800b5f2
 8007fd0:	0800b754 	.word	0x0800b754
 8007fd4:	0800b5e9 	.word	0x0800b5e9
 8007fd8:	0800b5ec 	.word	0x0800b5ec
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	0800b638 	.word	0x0800b638
 8007fe4:	0800b8e0 	.word	0x0800b8e0
 8007fe8:	0800b8b8 	.word	0x0800b8b8
 8007fec:	7ca00000 	.word	0x7ca00000
 8007ff0:	7fefffff 	.word	0x7fefffff
 8007ff4:	f014 0310 	ands.w	r3, r4, #16
 8007ff8:	bf18      	it	ne
 8007ffa:	236a      	movne	r3, #106	@ 0x6a
 8007ffc:	4e78      	ldr	r6, [pc, #480]	@ (80081e0 <_strtod_l+0x788>)
 8007ffe:	9308      	str	r3, [sp, #32]
 8008000:	4650      	mov	r0, sl
 8008002:	4659      	mov	r1, fp
 8008004:	2300      	movs	r3, #0
 8008006:	07e7      	lsls	r7, r4, #31
 8008008:	d504      	bpl.n	8008014 <_strtod_l+0x5bc>
 800800a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800800e:	f7f8 facb 	bl	80005a8 <__aeabi_dmul>
 8008012:	2301      	movs	r3, #1
 8008014:	1064      	asrs	r4, r4, #1
 8008016:	f106 0608 	add.w	r6, r6, #8
 800801a:	d1f4      	bne.n	8008006 <_strtod_l+0x5ae>
 800801c:	b10b      	cbz	r3, 8008022 <_strtod_l+0x5ca>
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	9b08      	ldr	r3, [sp, #32]
 8008024:	b1b3      	cbz	r3, 8008054 <_strtod_l+0x5fc>
 8008026:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800802a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800802e:	2b00      	cmp	r3, #0
 8008030:	4659      	mov	r1, fp
 8008032:	dd0f      	ble.n	8008054 <_strtod_l+0x5fc>
 8008034:	2b1f      	cmp	r3, #31
 8008036:	dd58      	ble.n	80080ea <_strtod_l+0x692>
 8008038:	2b34      	cmp	r3, #52	@ 0x34
 800803a:	bfde      	ittt	le
 800803c:	f04f 33ff 	movle.w	r3, #4294967295
 8008040:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008044:	4093      	lslle	r3, r2
 8008046:	f04f 0a00 	mov.w	sl, #0
 800804a:	bfcc      	ite	gt
 800804c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008050:	ea03 0b01 	andle.w	fp, r3, r1
 8008054:	2200      	movs	r2, #0
 8008056:	2300      	movs	r3, #0
 8008058:	4650      	mov	r0, sl
 800805a:	4659      	mov	r1, fp
 800805c:	f7f8 fd0c 	bl	8000a78 <__aeabi_dcmpeq>
 8008060:	2800      	cmp	r0, #0
 8008062:	d1a7      	bne.n	8007fb4 <_strtod_l+0x55c>
 8008064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800806a:	9805      	ldr	r0, [sp, #20]
 800806c:	462b      	mov	r3, r5
 800806e:	464a      	mov	r2, r9
 8008070:	f001 fb2a 	bl	80096c8 <__s2b>
 8008074:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f af09 	beq.w	8007e8e <_strtod_l+0x436>
 800807c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800807e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008080:	2a00      	cmp	r2, #0
 8008082:	eba3 0308 	sub.w	r3, r3, r8
 8008086:	bfa8      	it	ge
 8008088:	2300      	movge	r3, #0
 800808a:	9312      	str	r3, [sp, #72]	@ 0x48
 800808c:	2400      	movs	r4, #0
 800808e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008092:	9316      	str	r3, [sp, #88]	@ 0x58
 8008094:	46a0      	mov	r8, r4
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	9805      	ldr	r0, [sp, #20]
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	f001 fa6c 	bl	8009578 <_Balloc>
 80080a0:	4681      	mov	r9, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f aef7 	beq.w	8007e96 <_strtod_l+0x43e>
 80080a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	3202      	adds	r2, #2
 80080ae:	f103 010c 	add.w	r1, r3, #12
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	300c      	adds	r0, #12
 80080b6:	f000 fde0 	bl	8008c7a <memcpy>
 80080ba:	ab1c      	add	r3, sp, #112	@ 0x70
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	9805      	ldr	r0, [sp, #20]
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80080cc:	f001 fe28 	bl	8009d20 <__d2b>
 80080d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f43f aedf 	beq.w	8007e96 <_strtod_l+0x43e>
 80080d8:	9805      	ldr	r0, [sp, #20]
 80080da:	2101      	movs	r1, #1
 80080dc:	f001 fb8a 	bl	80097f4 <__i2b>
 80080e0:	4680      	mov	r8, r0
 80080e2:	b948      	cbnz	r0, 80080f8 <_strtod_l+0x6a0>
 80080e4:	f04f 0800 	mov.w	r8, #0
 80080e8:	e6d5      	b.n	8007e96 <_strtod_l+0x43e>
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	ea03 0a0a 	and.w	sl, r3, sl
 80080f6:	e7ad      	b.n	8008054 <_strtod_l+0x5fc>
 80080f8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80080fa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80080fc:	2d00      	cmp	r5, #0
 80080fe:	bfab      	itete	ge
 8008100:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008102:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008104:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008106:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008108:	bfac      	ite	ge
 800810a:	18ef      	addge	r7, r5, r3
 800810c:	1b5e      	sublt	r6, r3, r5
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	1aed      	subs	r5, r5, r3
 8008112:	4415      	add	r5, r2
 8008114:	4b33      	ldr	r3, [pc, #204]	@ (80081e4 <_strtod_l+0x78c>)
 8008116:	3d01      	subs	r5, #1
 8008118:	429d      	cmp	r5, r3
 800811a:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800811e:	da50      	bge.n	80081c2 <_strtod_l+0x76a>
 8008120:	1b5b      	subs	r3, r3, r5
 8008122:	2b1f      	cmp	r3, #31
 8008124:	eba2 0203 	sub.w	r2, r2, r3
 8008128:	f04f 0101 	mov.w	r1, #1
 800812c:	dc3d      	bgt.n	80081aa <_strtod_l+0x752>
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008134:	2300      	movs	r3, #0
 8008136:	9310      	str	r3, [sp, #64]	@ 0x40
 8008138:	18bd      	adds	r5, r7, r2
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	42af      	cmp	r7, r5
 800813e:	4416      	add	r6, r2
 8008140:	441e      	add	r6, r3
 8008142:	463b      	mov	r3, r7
 8008144:	bfa8      	it	ge
 8008146:	462b      	movge	r3, r5
 8008148:	42b3      	cmp	r3, r6
 800814a:	bfa8      	it	ge
 800814c:	4633      	movge	r3, r6
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfc2      	ittt	gt
 8008152:	1aed      	subgt	r5, r5, r3
 8008154:	1af6      	subgt	r6, r6, r3
 8008156:	1aff      	subgt	r7, r7, r3
 8008158:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd16      	ble.n	800818c <_strtod_l+0x734>
 800815e:	4641      	mov	r1, r8
 8008160:	9805      	ldr	r0, [sp, #20]
 8008162:	461a      	mov	r2, r3
 8008164:	f001 fbfe 	bl	8009964 <__pow5mult>
 8008168:	4680      	mov	r8, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	d0ba      	beq.n	80080e4 <_strtod_l+0x68c>
 800816e:	4601      	mov	r1, r0
 8008170:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008172:	9805      	ldr	r0, [sp, #20]
 8008174:	f001 fb54 	bl	8009820 <__multiply>
 8008178:	900a      	str	r0, [sp, #40]	@ 0x28
 800817a:	2800      	cmp	r0, #0
 800817c:	f43f ae8b 	beq.w	8007e96 <_strtod_l+0x43e>
 8008180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008182:	9805      	ldr	r0, [sp, #20]
 8008184:	f001 fa38 	bl	80095f8 <_Bfree>
 8008188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818a:	931a      	str	r3, [sp, #104]	@ 0x68
 800818c:	2d00      	cmp	r5, #0
 800818e:	dc1d      	bgt.n	80081cc <_strtod_l+0x774>
 8008190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	dd28      	ble.n	80081e8 <_strtod_l+0x790>
 8008196:	4649      	mov	r1, r9
 8008198:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800819a:	9805      	ldr	r0, [sp, #20]
 800819c:	f001 fbe2 	bl	8009964 <__pow5mult>
 80081a0:	4681      	mov	r9, r0
 80081a2:	bb08      	cbnz	r0, 80081e8 <_strtod_l+0x790>
 80081a4:	f04f 0900 	mov.w	r9, #0
 80081a8:	e675      	b.n	8007e96 <_strtod_l+0x43e>
 80081aa:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081ae:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081b2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80081b6:	35e2      	adds	r5, #226	@ 0xe2
 80081b8:	fa01 f305 	lsl.w	r3, r1, r5
 80081bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80081be:	9113      	str	r1, [sp, #76]	@ 0x4c
 80081c0:	e7ba      	b.n	8008138 <_strtod_l+0x6e0>
 80081c2:	2300      	movs	r3, #0
 80081c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80081c6:	2301      	movs	r3, #1
 80081c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081ca:	e7b5      	b.n	8008138 <_strtod_l+0x6e0>
 80081cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ce:	9805      	ldr	r0, [sp, #20]
 80081d0:	462a      	mov	r2, r5
 80081d2:	f001 fc21 	bl	8009a18 <__lshift>
 80081d6:	901a      	str	r0, [sp, #104]	@ 0x68
 80081d8:	2800      	cmp	r0, #0
 80081da:	d1d9      	bne.n	8008190 <_strtod_l+0x738>
 80081dc:	e65b      	b.n	8007e96 <_strtod_l+0x43e>
 80081de:	bf00      	nop
 80081e0:	0800b780 	.word	0x0800b780
 80081e4:	fffffc02 	.word	0xfffffc02
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	dd07      	ble.n	80081fc <_strtod_l+0x7a4>
 80081ec:	4649      	mov	r1, r9
 80081ee:	9805      	ldr	r0, [sp, #20]
 80081f0:	4632      	mov	r2, r6
 80081f2:	f001 fc11 	bl	8009a18 <__lshift>
 80081f6:	4681      	mov	r9, r0
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d0d3      	beq.n	80081a4 <_strtod_l+0x74c>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	dd08      	ble.n	8008212 <_strtod_l+0x7ba>
 8008200:	4641      	mov	r1, r8
 8008202:	9805      	ldr	r0, [sp, #20]
 8008204:	463a      	mov	r2, r7
 8008206:	f001 fc07 	bl	8009a18 <__lshift>
 800820a:	4680      	mov	r8, r0
 800820c:	2800      	cmp	r0, #0
 800820e:	f43f ae42 	beq.w	8007e96 <_strtod_l+0x43e>
 8008212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	464a      	mov	r2, r9
 8008218:	f001 fc86 	bl	8009b28 <__mdiff>
 800821c:	4604      	mov	r4, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae39 	beq.w	8007e96 <_strtod_l+0x43e>
 8008224:	68c3      	ldr	r3, [r0, #12]
 8008226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008228:	2300      	movs	r3, #0
 800822a:	60c3      	str	r3, [r0, #12]
 800822c:	4641      	mov	r1, r8
 800822e:	f001 fc5f 	bl	8009af0 <__mcmp>
 8008232:	2800      	cmp	r0, #0
 8008234:	da3d      	bge.n	80082b2 <_strtod_l+0x85a>
 8008236:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008238:	ea53 030a 	orrs.w	r3, r3, sl
 800823c:	d163      	bne.n	8008306 <_strtod_l+0x8ae>
 800823e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008242:	2b00      	cmp	r3, #0
 8008244:	d15f      	bne.n	8008306 <_strtod_l+0x8ae>
 8008246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800824a:	0d1b      	lsrs	r3, r3, #20
 800824c:	051b      	lsls	r3, r3, #20
 800824e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008252:	d958      	bls.n	8008306 <_strtod_l+0x8ae>
 8008254:	6963      	ldr	r3, [r4, #20]
 8008256:	b913      	cbnz	r3, 800825e <_strtod_l+0x806>
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	2b01      	cmp	r3, #1
 800825c:	dd53      	ble.n	8008306 <_strtod_l+0x8ae>
 800825e:	4621      	mov	r1, r4
 8008260:	2201      	movs	r2, #1
 8008262:	9805      	ldr	r0, [sp, #20]
 8008264:	f001 fbd8 	bl	8009a18 <__lshift>
 8008268:	4641      	mov	r1, r8
 800826a:	4604      	mov	r4, r0
 800826c:	f001 fc40 	bl	8009af0 <__mcmp>
 8008270:	2800      	cmp	r0, #0
 8008272:	dd48      	ble.n	8008306 <_strtod_l+0x8ae>
 8008274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008278:	9a08      	ldr	r2, [sp, #32]
 800827a:	0d1b      	lsrs	r3, r3, #20
 800827c:	051b      	lsls	r3, r3, #20
 800827e:	2a00      	cmp	r2, #0
 8008280:	d062      	beq.n	8008348 <_strtod_l+0x8f0>
 8008282:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008286:	d85f      	bhi.n	8008348 <_strtod_l+0x8f0>
 8008288:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800828c:	f67f ae96 	bls.w	8007fbc <_strtod_l+0x564>
 8008290:	4ba3      	ldr	r3, [pc, #652]	@ (8008520 <_strtod_l+0xac8>)
 8008292:	4650      	mov	r0, sl
 8008294:	4659      	mov	r1, fp
 8008296:	2200      	movs	r2, #0
 8008298:	f7f8 f986 	bl	80005a8 <__aeabi_dmul>
 800829c:	4ba1      	ldr	r3, [pc, #644]	@ (8008524 <_strtod_l+0xacc>)
 800829e:	400b      	ands	r3, r1
 80082a0:	4682      	mov	sl, r0
 80082a2:	468b      	mov	fp, r1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f47f ae01 	bne.w	8007eac <_strtod_l+0x454>
 80082aa:	9a05      	ldr	r2, [sp, #20]
 80082ac:	2322      	movs	r3, #34	@ 0x22
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e5fc      	b.n	8007eac <_strtod_l+0x454>
 80082b2:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80082b6:	d165      	bne.n	8008384 <_strtod_l+0x92c>
 80082b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082be:	b35a      	cbz	r2, 8008318 <_strtod_l+0x8c0>
 80082c0:	4a99      	ldr	r2, [pc, #612]	@ (8008528 <_strtod_l+0xad0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d12b      	bne.n	800831e <_strtod_l+0x8c6>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	4651      	mov	r1, sl
 80082ca:	b303      	cbz	r3, 800830e <_strtod_l+0x8b6>
 80082cc:	4b95      	ldr	r3, [pc, #596]	@ (8008524 <_strtod_l+0xacc>)
 80082ce:	465a      	mov	r2, fp
 80082d0:	4013      	ands	r3, r2
 80082d2:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	d81b      	bhi.n	8008314 <_strtod_l+0x8bc>
 80082dc:	0d1b      	lsrs	r3, r3, #20
 80082de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082e2:	fa02 f303 	lsl.w	r3, r2, r3
 80082e6:	4299      	cmp	r1, r3
 80082e8:	d119      	bne.n	800831e <_strtod_l+0x8c6>
 80082ea:	4b90      	ldr	r3, [pc, #576]	@ (800852c <_strtod_l+0xad4>)
 80082ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d102      	bne.n	80082f8 <_strtod_l+0x8a0>
 80082f2:	3101      	adds	r1, #1
 80082f4:	f43f adcf 	beq.w	8007e96 <_strtod_l+0x43e>
 80082f8:	4b8a      	ldr	r3, [pc, #552]	@ (8008524 <_strtod_l+0xacc>)
 80082fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082fc:	401a      	ands	r2, r3
 80082fe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008302:	f04f 0a00 	mov.w	sl, #0
 8008306:	9b08      	ldr	r3, [sp, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1c1      	bne.n	8008290 <_strtod_l+0x838>
 800830c:	e5ce      	b.n	8007eac <_strtod_l+0x454>
 800830e:	f04f 33ff 	mov.w	r3, #4294967295
 8008312:	e7e8      	b.n	80082e6 <_strtod_l+0x88e>
 8008314:	4613      	mov	r3, r2
 8008316:	e7e6      	b.n	80082e6 <_strtod_l+0x88e>
 8008318:	ea53 030a 	orrs.w	r3, r3, sl
 800831c:	d0aa      	beq.n	8008274 <_strtod_l+0x81c>
 800831e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008320:	b1db      	cbz	r3, 800835a <_strtod_l+0x902>
 8008322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008324:	4213      	tst	r3, r2
 8008326:	d0ee      	beq.n	8008306 <_strtod_l+0x8ae>
 8008328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800832a:	9a08      	ldr	r2, [sp, #32]
 800832c:	4650      	mov	r0, sl
 800832e:	4659      	mov	r1, fp
 8008330:	b1bb      	cbz	r3, 8008362 <_strtod_l+0x90a>
 8008332:	f7ff fb6d 	bl	8007a10 <sulp>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800833e:	f7f7 ff7d 	bl	800023c <__adddf3>
 8008342:	4682      	mov	sl, r0
 8008344:	468b      	mov	fp, r1
 8008346:	e7de      	b.n	8008306 <_strtod_l+0x8ae>
 8008348:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800834c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008350:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008354:	f04f 3aff 	mov.w	sl, #4294967295
 8008358:	e7d5      	b.n	8008306 <_strtod_l+0x8ae>
 800835a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800835c:	ea13 0f0a 	tst.w	r3, sl
 8008360:	e7e1      	b.n	8008326 <_strtod_l+0x8ce>
 8008362:	f7ff fb55 	bl	8007a10 <sulp>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800836e:	f7f7 ff63 	bl	8000238 <__aeabi_dsub>
 8008372:	2200      	movs	r2, #0
 8008374:	2300      	movs	r3, #0
 8008376:	4682      	mov	sl, r0
 8008378:	468b      	mov	fp, r1
 800837a:	f7f8 fb7d 	bl	8000a78 <__aeabi_dcmpeq>
 800837e:	2800      	cmp	r0, #0
 8008380:	d0c1      	beq.n	8008306 <_strtod_l+0x8ae>
 8008382:	e61b      	b.n	8007fbc <_strtod_l+0x564>
 8008384:	4641      	mov	r1, r8
 8008386:	4620      	mov	r0, r4
 8008388:	f001 fd22 	bl	8009dd0 <__ratio>
 800838c:	2200      	movs	r2, #0
 800838e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008392:	4606      	mov	r6, r0
 8008394:	460f      	mov	r7, r1
 8008396:	f7f8 fb83 	bl	8000aa0 <__aeabi_dcmple>
 800839a:	2800      	cmp	r0, #0
 800839c:	d06d      	beq.n	800847a <_strtod_l+0xa22>
 800839e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d178      	bne.n	8008496 <_strtod_l+0xa3e>
 80083a4:	f1ba 0f00 	cmp.w	sl, #0
 80083a8:	d156      	bne.n	8008458 <_strtod_l+0xa00>
 80083aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d158      	bne.n	8008466 <_strtod_l+0xa0e>
 80083b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008530 <_strtod_l+0xad8>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fb66 	bl	8000a8c <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d157      	bne.n	8008474 <_strtod_l+0xa1c>
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008534 <_strtod_l+0xadc>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	f7f8 f8ec 	bl	80005a8 <__aeabi_dmul>
 80083d0:	4606      	mov	r6, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80083d8:	9606      	str	r6, [sp, #24]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083e0:	4d50      	ldr	r5, [pc, #320]	@ (8008524 <_strtod_l+0xacc>)
 80083e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80083e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083e8:	401d      	ands	r5, r3
 80083ea:	4b53      	ldr	r3, [pc, #332]	@ (8008538 <_strtod_l+0xae0>)
 80083ec:	429d      	cmp	r5, r3
 80083ee:	f040 80a9 	bne.w	8008544 <_strtod_l+0xaec>
 80083f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f4:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80083f8:	4650      	mov	r0, sl
 80083fa:	4659      	mov	r1, fp
 80083fc:	f001 fc26 	bl	8009c4c <__ulp>
 8008400:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008404:	f7f8 f8d0 	bl	80005a8 <__aeabi_dmul>
 8008408:	4652      	mov	r2, sl
 800840a:	465b      	mov	r3, fp
 800840c:	f7f7 ff16 	bl	800023c <__adddf3>
 8008410:	460b      	mov	r3, r1
 8008412:	4944      	ldr	r1, [pc, #272]	@ (8008524 <_strtod_l+0xacc>)
 8008414:	4a49      	ldr	r2, [pc, #292]	@ (800853c <_strtod_l+0xae4>)
 8008416:	4019      	ands	r1, r3
 8008418:	4291      	cmp	r1, r2
 800841a:	4682      	mov	sl, r0
 800841c:	d942      	bls.n	80084a4 <_strtod_l+0xa4c>
 800841e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008420:	4b42      	ldr	r3, [pc, #264]	@ (800852c <_strtod_l+0xad4>)
 8008422:	429a      	cmp	r2, r3
 8008424:	d103      	bne.n	800842e <_strtod_l+0x9d6>
 8008426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008428:	3301      	adds	r3, #1
 800842a:	f43f ad34 	beq.w	8007e96 <_strtod_l+0x43e>
 800842e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800852c <_strtod_l+0xad4>
 8008432:	f04f 3aff 	mov.w	sl, #4294967295
 8008436:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008438:	9805      	ldr	r0, [sp, #20]
 800843a:	f001 f8dd 	bl	80095f8 <_Bfree>
 800843e:	9805      	ldr	r0, [sp, #20]
 8008440:	4649      	mov	r1, r9
 8008442:	f001 f8d9 	bl	80095f8 <_Bfree>
 8008446:	9805      	ldr	r0, [sp, #20]
 8008448:	4641      	mov	r1, r8
 800844a:	f001 f8d5 	bl	80095f8 <_Bfree>
 800844e:	9805      	ldr	r0, [sp, #20]
 8008450:	4621      	mov	r1, r4
 8008452:	f001 f8d1 	bl	80095f8 <_Bfree>
 8008456:	e61e      	b.n	8008096 <_strtod_l+0x63e>
 8008458:	f1ba 0f01 	cmp.w	sl, #1
 800845c:	d103      	bne.n	8008466 <_strtod_l+0xa0e>
 800845e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008460:	2b00      	cmp	r3, #0
 8008462:	f43f adab 	beq.w	8007fbc <_strtod_l+0x564>
 8008466:	4b36      	ldr	r3, [pc, #216]	@ (8008540 <_strtod_l+0xae8>)
 8008468:	4f31      	ldr	r7, [pc, #196]	@ (8008530 <_strtod_l+0xad8>)
 800846a:	2200      	movs	r2, #0
 800846c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008470:	2600      	movs	r6, #0
 8008472:	e7b3      	b.n	80083dc <_strtod_l+0x984>
 8008474:	4f2f      	ldr	r7, [pc, #188]	@ (8008534 <_strtod_l+0xadc>)
 8008476:	2600      	movs	r6, #0
 8008478:	e7ac      	b.n	80083d4 <_strtod_l+0x97c>
 800847a:	4b2e      	ldr	r3, [pc, #184]	@ (8008534 <_strtod_l+0xadc>)
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	2200      	movs	r2, #0
 8008482:	f7f8 f891 	bl	80005a8 <__aeabi_dmul>
 8008486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0a1      	beq.n	80083d4 <_strtod_l+0x97c>
 8008490:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008494:	e7a2      	b.n	80083dc <_strtod_l+0x984>
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <_strtod_l+0xad8>)
 8008498:	2200      	movs	r2, #0
 800849a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800849e:	4616      	mov	r6, r2
 80084a0:	461f      	mov	r7, r3
 80084a2:	e79b      	b.n	80083dc <_strtod_l+0x984>
 80084a4:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1c1      	bne.n	8008436 <_strtod_l+0x9de>
 80084b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084b6:	0d1b      	lsrs	r3, r3, #20
 80084b8:	051b      	lsls	r3, r3, #20
 80084ba:	429d      	cmp	r5, r3
 80084bc:	d1bb      	bne.n	8008436 <_strtod_l+0x9de>
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 fcf1 	bl	8000ea8 <__aeabi_d2lz>
 80084c6:	f7f8 f841 	bl	800054c <__aeabi_l2d>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 feb1 	bl	8000238 <__aeabi_dsub>
 80084d6:	460b      	mov	r3, r1
 80084d8:	4602      	mov	r2, r0
 80084da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80084de:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80084e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e4:	ea46 060a 	orr.w	r6, r6, sl
 80084e8:	431e      	orrs	r6, r3
 80084ea:	d068      	beq.n	80085be <_strtod_l+0xb66>
 80084ec:	a308      	add	r3, pc, #32	@ (adr r3, 8008510 <_strtod_l+0xab8>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f7f8 facb 	bl	8000a8c <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f47f acd8 	bne.w	8007eac <_strtod_l+0x454>
 80084fc:	a306      	add	r3, pc, #24	@ (adr r3, 8008518 <_strtod_l+0xac0>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008506:	f7f8 fadf 	bl	8000ac8 <__aeabi_dcmpgt>
 800850a:	2800      	cmp	r0, #0
 800850c:	d093      	beq.n	8008436 <_strtod_l+0x9de>
 800850e:	e4cd      	b.n	8007eac <_strtod_l+0x454>
 8008510:	94a03595 	.word	0x94a03595
 8008514:	3fdfffff 	.word	0x3fdfffff
 8008518:	35afe535 	.word	0x35afe535
 800851c:	3fe00000 	.word	0x3fe00000
 8008520:	39500000 	.word	0x39500000
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	000fffff 	.word	0x000fffff
 800852c:	7fefffff 	.word	0x7fefffff
 8008530:	3ff00000 	.word	0x3ff00000
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	7fe00000 	.word	0x7fe00000
 800853c:	7c9fffff 	.word	0x7c9fffff
 8008540:	bff00000 	.word	0xbff00000
 8008544:	9b08      	ldr	r3, [sp, #32]
 8008546:	b323      	cbz	r3, 8008592 <_strtod_l+0xb3a>
 8008548:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800854c:	d821      	bhi.n	8008592 <_strtod_l+0xb3a>
 800854e:	a328      	add	r3, pc, #160	@ (adr r3, 80085f0 <_strtod_l+0xb98>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	4630      	mov	r0, r6
 8008556:	4639      	mov	r1, r7
 8008558:	f7f8 faa2 	bl	8000aa0 <__aeabi_dcmple>
 800855c:	b1a0      	cbz	r0, 8008588 <_strtod_l+0xb30>
 800855e:	4639      	mov	r1, r7
 8008560:	4630      	mov	r0, r6
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_d2uiz>
 8008566:	2801      	cmp	r0, #1
 8008568:	bf38      	it	cc
 800856a:	2001      	movcc	r0, #1
 800856c:	f7f7 ffa2 	bl	80004b4 <__aeabi_ui2d>
 8008570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	b9fb      	cbnz	r3, 80085b8 <_strtod_l+0xb60>
 8008578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800857c:	9014      	str	r0, [sp, #80]	@ 0x50
 800857e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008584:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800858a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800858e:	1b5b      	subs	r3, r3, r5
 8008590:	9311      	str	r3, [sp, #68]	@ 0x44
 8008592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008596:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800859a:	f001 fb57 	bl	8009c4c <__ulp>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4650      	mov	r0, sl
 80085a4:	4659      	mov	r1, fp
 80085a6:	f7f7 ffff 	bl	80005a8 <__aeabi_dmul>
 80085aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085ae:	f7f7 fe45 	bl	800023c <__adddf3>
 80085b2:	4682      	mov	sl, r0
 80085b4:	468b      	mov	fp, r1
 80085b6:	e777      	b.n	80084a8 <_strtod_l+0xa50>
 80085b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80085bc:	e7e0      	b.n	8008580 <_strtod_l+0xb28>
 80085be:	a30e      	add	r3, pc, #56	@ (adr r3, 80085f8 <_strtod_l+0xba0>)
 80085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c4:	f7f8 fa62 	bl	8000a8c <__aeabi_dcmplt>
 80085c8:	e79f      	b.n	800850a <_strtod_l+0xab2>
 80085ca:	2300      	movs	r3, #0
 80085cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80085ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80085d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	f7ff ba7d 	b.w	8007ad2 <_strtod_l+0x7a>
 80085d8:	2a65      	cmp	r2, #101	@ 0x65
 80085da:	f43f ab76 	beq.w	8007cca <_strtod_l+0x272>
 80085de:	2a45      	cmp	r2, #69	@ 0x45
 80085e0:	f43f ab73 	beq.w	8007cca <_strtod_l+0x272>
 80085e4:	2301      	movs	r3, #1
 80085e6:	f7ff bbae 	b.w	8007d46 <_strtod_l+0x2ee>
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w
 80085f0:	ffc00000 	.word	0xffc00000
 80085f4:	41dfffff 	.word	0x41dfffff
 80085f8:	94a03595 	.word	0x94a03595
 80085fc:	3fcfffff 	.word	0x3fcfffff

08008600 <strtod>:
 8008600:	460a      	mov	r2, r1
 8008602:	4601      	mov	r1, r0
 8008604:	4802      	ldr	r0, [pc, #8]	@ (8008610 <strtod+0x10>)
 8008606:	4b03      	ldr	r3, [pc, #12]	@ (8008614 <strtod+0x14>)
 8008608:	6800      	ldr	r0, [r0, #0]
 800860a:	f7ff ba25 	b.w	8007a58 <_strtod_l>
 800860e:	bf00      	nop
 8008610:	20000188 	.word	0x20000188
 8008614:	2000001c 	.word	0x2000001c

08008618 <_strtol_l.isra.0>:
 8008618:	2b24      	cmp	r3, #36	@ 0x24
 800861a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861e:	4686      	mov	lr, r0
 8008620:	4690      	mov	r8, r2
 8008622:	d801      	bhi.n	8008628 <_strtol_l.isra.0+0x10>
 8008624:	2b01      	cmp	r3, #1
 8008626:	d106      	bne.n	8008636 <_strtol_l.isra.0+0x1e>
 8008628:	f000 fafa 	bl	8008c20 <__errno>
 800862c:	2316      	movs	r3, #22
 800862e:	6003      	str	r3, [r0, #0]
 8008630:	2000      	movs	r0, #0
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	4834      	ldr	r0, [pc, #208]	@ (8008708 <_strtol_l.isra.0+0xf0>)
 8008638:	460d      	mov	r5, r1
 800863a:	462a      	mov	r2, r5
 800863c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008640:	5d06      	ldrb	r6, [r0, r4]
 8008642:	f016 0608 	ands.w	r6, r6, #8
 8008646:	d1f8      	bne.n	800863a <_strtol_l.isra.0+0x22>
 8008648:	2c2d      	cmp	r4, #45	@ 0x2d
 800864a:	d110      	bne.n	800866e <_strtol_l.isra.0+0x56>
 800864c:	782c      	ldrb	r4, [r5, #0]
 800864e:	2601      	movs	r6, #1
 8008650:	1c95      	adds	r5, r2, #2
 8008652:	f033 0210 	bics.w	r2, r3, #16
 8008656:	d115      	bne.n	8008684 <_strtol_l.isra.0+0x6c>
 8008658:	2c30      	cmp	r4, #48	@ 0x30
 800865a:	d10d      	bne.n	8008678 <_strtol_l.isra.0+0x60>
 800865c:	782a      	ldrb	r2, [r5, #0]
 800865e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008662:	2a58      	cmp	r2, #88	@ 0x58
 8008664:	d108      	bne.n	8008678 <_strtol_l.isra.0+0x60>
 8008666:	786c      	ldrb	r4, [r5, #1]
 8008668:	3502      	adds	r5, #2
 800866a:	2310      	movs	r3, #16
 800866c:	e00a      	b.n	8008684 <_strtol_l.isra.0+0x6c>
 800866e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008670:	bf04      	itt	eq
 8008672:	782c      	ldrbeq	r4, [r5, #0]
 8008674:	1c95      	addeq	r5, r2, #2
 8008676:	e7ec      	b.n	8008652 <_strtol_l.isra.0+0x3a>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1f6      	bne.n	800866a <_strtol_l.isra.0+0x52>
 800867c:	2c30      	cmp	r4, #48	@ 0x30
 800867e:	bf14      	ite	ne
 8008680:	230a      	movne	r3, #10
 8008682:	2308      	moveq	r3, #8
 8008684:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008688:	f10c 3cff 	add.w	ip, ip, #4294967295
 800868c:	2200      	movs	r2, #0
 800868e:	fbbc f9f3 	udiv	r9, ip, r3
 8008692:	4610      	mov	r0, r2
 8008694:	fb03 ca19 	mls	sl, r3, r9, ip
 8008698:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800869c:	2f09      	cmp	r7, #9
 800869e:	d80f      	bhi.n	80086c0 <_strtol_l.isra.0+0xa8>
 80086a0:	463c      	mov	r4, r7
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	dd1b      	ble.n	80086de <_strtol_l.isra.0+0xc6>
 80086a6:	1c57      	adds	r7, r2, #1
 80086a8:	d007      	beq.n	80086ba <_strtol_l.isra.0+0xa2>
 80086aa:	4581      	cmp	r9, r0
 80086ac:	d314      	bcc.n	80086d8 <_strtol_l.isra.0+0xc0>
 80086ae:	d101      	bne.n	80086b4 <_strtol_l.isra.0+0x9c>
 80086b0:	45a2      	cmp	sl, r4
 80086b2:	db11      	blt.n	80086d8 <_strtol_l.isra.0+0xc0>
 80086b4:	fb00 4003 	mla	r0, r0, r3, r4
 80086b8:	2201      	movs	r2, #1
 80086ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086be:	e7eb      	b.n	8008698 <_strtol_l.isra.0+0x80>
 80086c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80086c4:	2f19      	cmp	r7, #25
 80086c6:	d801      	bhi.n	80086cc <_strtol_l.isra.0+0xb4>
 80086c8:	3c37      	subs	r4, #55	@ 0x37
 80086ca:	e7ea      	b.n	80086a2 <_strtol_l.isra.0+0x8a>
 80086cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086d0:	2f19      	cmp	r7, #25
 80086d2:	d804      	bhi.n	80086de <_strtol_l.isra.0+0xc6>
 80086d4:	3c57      	subs	r4, #87	@ 0x57
 80086d6:	e7e4      	b.n	80086a2 <_strtol_l.isra.0+0x8a>
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	e7ed      	b.n	80086ba <_strtol_l.isra.0+0xa2>
 80086de:	1c53      	adds	r3, r2, #1
 80086e0:	d108      	bne.n	80086f4 <_strtol_l.isra.0+0xdc>
 80086e2:	2322      	movs	r3, #34	@ 0x22
 80086e4:	f8ce 3000 	str.w	r3, [lr]
 80086e8:	4660      	mov	r0, ip
 80086ea:	f1b8 0f00 	cmp.w	r8, #0
 80086ee:	d0a0      	beq.n	8008632 <_strtol_l.isra.0+0x1a>
 80086f0:	1e69      	subs	r1, r5, #1
 80086f2:	e006      	b.n	8008702 <_strtol_l.isra.0+0xea>
 80086f4:	b106      	cbz	r6, 80086f8 <_strtol_l.isra.0+0xe0>
 80086f6:	4240      	negs	r0, r0
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d099      	beq.n	8008632 <_strtol_l.isra.0+0x1a>
 80086fe:	2a00      	cmp	r2, #0
 8008700:	d1f6      	bne.n	80086f0 <_strtol_l.isra.0+0xd8>
 8008702:	f8c8 1000 	str.w	r1, [r8]
 8008706:	e794      	b.n	8008632 <_strtol_l.isra.0+0x1a>
 8008708:	0800b7a9 	.word	0x0800b7a9

0800870c <_strtol_r>:
 800870c:	f7ff bf84 	b.w	8008618 <_strtol_l.isra.0>

08008710 <strtol>:
 8008710:	4613      	mov	r3, r2
 8008712:	460a      	mov	r2, r1
 8008714:	4601      	mov	r1, r0
 8008716:	4802      	ldr	r0, [pc, #8]	@ (8008720 <strtol+0x10>)
 8008718:	6800      	ldr	r0, [r0, #0]
 800871a:	f7ff bf7d 	b.w	8008618 <_strtol_l.isra.0>
 800871e:	bf00      	nop
 8008720:	20000188 	.word	0x20000188

08008724 <_strtoul_l.isra.0>:
 8008724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008728:	4e34      	ldr	r6, [pc, #208]	@ (80087fc <_strtoul_l.isra.0+0xd8>)
 800872a:	4686      	mov	lr, r0
 800872c:	460d      	mov	r5, r1
 800872e:	4628      	mov	r0, r5
 8008730:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008734:	5d37      	ldrb	r7, [r6, r4]
 8008736:	f017 0708 	ands.w	r7, r7, #8
 800873a:	d1f8      	bne.n	800872e <_strtoul_l.isra.0+0xa>
 800873c:	2c2d      	cmp	r4, #45	@ 0x2d
 800873e:	d110      	bne.n	8008762 <_strtoul_l.isra.0+0x3e>
 8008740:	782c      	ldrb	r4, [r5, #0]
 8008742:	2701      	movs	r7, #1
 8008744:	1c85      	adds	r5, r0, #2
 8008746:	f033 0010 	bics.w	r0, r3, #16
 800874a:	d115      	bne.n	8008778 <_strtoul_l.isra.0+0x54>
 800874c:	2c30      	cmp	r4, #48	@ 0x30
 800874e:	d10d      	bne.n	800876c <_strtoul_l.isra.0+0x48>
 8008750:	7828      	ldrb	r0, [r5, #0]
 8008752:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008756:	2858      	cmp	r0, #88	@ 0x58
 8008758:	d108      	bne.n	800876c <_strtoul_l.isra.0+0x48>
 800875a:	786c      	ldrb	r4, [r5, #1]
 800875c:	3502      	adds	r5, #2
 800875e:	2310      	movs	r3, #16
 8008760:	e00a      	b.n	8008778 <_strtoul_l.isra.0+0x54>
 8008762:	2c2b      	cmp	r4, #43	@ 0x2b
 8008764:	bf04      	itt	eq
 8008766:	782c      	ldrbeq	r4, [r5, #0]
 8008768:	1c85      	addeq	r5, r0, #2
 800876a:	e7ec      	b.n	8008746 <_strtoul_l.isra.0+0x22>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f6      	bne.n	800875e <_strtoul_l.isra.0+0x3a>
 8008770:	2c30      	cmp	r4, #48	@ 0x30
 8008772:	bf14      	ite	ne
 8008774:	230a      	movne	r3, #10
 8008776:	2308      	moveq	r3, #8
 8008778:	f04f 38ff 	mov.w	r8, #4294967295
 800877c:	2600      	movs	r6, #0
 800877e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008782:	fb03 f908 	mul.w	r9, r3, r8
 8008786:	ea6f 0909 	mvn.w	r9, r9
 800878a:	4630      	mov	r0, r6
 800878c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008790:	f1bc 0f09 	cmp.w	ip, #9
 8008794:	d810      	bhi.n	80087b8 <_strtoul_l.isra.0+0x94>
 8008796:	4664      	mov	r4, ip
 8008798:	42a3      	cmp	r3, r4
 800879a:	dd1e      	ble.n	80087da <_strtoul_l.isra.0+0xb6>
 800879c:	f1b6 3fff 	cmp.w	r6, #4294967295
 80087a0:	d007      	beq.n	80087b2 <_strtoul_l.isra.0+0x8e>
 80087a2:	4580      	cmp	r8, r0
 80087a4:	d316      	bcc.n	80087d4 <_strtoul_l.isra.0+0xb0>
 80087a6:	d101      	bne.n	80087ac <_strtoul_l.isra.0+0x88>
 80087a8:	45a1      	cmp	r9, r4
 80087aa:	db13      	blt.n	80087d4 <_strtoul_l.isra.0+0xb0>
 80087ac:	fb00 4003 	mla	r0, r0, r3, r4
 80087b0:	2601      	movs	r6, #1
 80087b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087b6:	e7e9      	b.n	800878c <_strtoul_l.isra.0+0x68>
 80087b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80087bc:	f1bc 0f19 	cmp.w	ip, #25
 80087c0:	d801      	bhi.n	80087c6 <_strtoul_l.isra.0+0xa2>
 80087c2:	3c37      	subs	r4, #55	@ 0x37
 80087c4:	e7e8      	b.n	8008798 <_strtoul_l.isra.0+0x74>
 80087c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80087ca:	f1bc 0f19 	cmp.w	ip, #25
 80087ce:	d804      	bhi.n	80087da <_strtoul_l.isra.0+0xb6>
 80087d0:	3c57      	subs	r4, #87	@ 0x57
 80087d2:	e7e1      	b.n	8008798 <_strtoul_l.isra.0+0x74>
 80087d4:	f04f 36ff 	mov.w	r6, #4294967295
 80087d8:	e7eb      	b.n	80087b2 <_strtoul_l.isra.0+0x8e>
 80087da:	1c73      	adds	r3, r6, #1
 80087dc:	d106      	bne.n	80087ec <_strtoul_l.isra.0+0xc8>
 80087de:	2322      	movs	r3, #34	@ 0x22
 80087e0:	f8ce 3000 	str.w	r3, [lr]
 80087e4:	4630      	mov	r0, r6
 80087e6:	b932      	cbnz	r2, 80087f6 <_strtoul_l.isra.0+0xd2>
 80087e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087ec:	b107      	cbz	r7, 80087f0 <_strtoul_l.isra.0+0xcc>
 80087ee:	4240      	negs	r0, r0
 80087f0:	2a00      	cmp	r2, #0
 80087f2:	d0f9      	beq.n	80087e8 <_strtoul_l.isra.0+0xc4>
 80087f4:	b106      	cbz	r6, 80087f8 <_strtoul_l.isra.0+0xd4>
 80087f6:	1e69      	subs	r1, r5, #1
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	e7f5      	b.n	80087e8 <_strtoul_l.isra.0+0xc4>
 80087fc:	0800b7a9 	.word	0x0800b7a9

08008800 <_strtoul_r>:
 8008800:	f7ff bf90 	b.w	8008724 <_strtoul_l.isra.0>

08008804 <strtoul>:
 8008804:	4613      	mov	r3, r2
 8008806:	460a      	mov	r2, r1
 8008808:	4601      	mov	r1, r0
 800880a:	4802      	ldr	r0, [pc, #8]	@ (8008814 <strtoul+0x10>)
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f7ff bf89 	b.w	8008724 <_strtoul_l.isra.0>
 8008812:	bf00      	nop
 8008814:	20000188 	.word	0x20000188

08008818 <std>:
 8008818:	2300      	movs	r3, #0
 800881a:	b510      	push	{r4, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	e9c0 3300 	strd	r3, r3, [r0]
 8008822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008826:	6083      	str	r3, [r0, #8]
 8008828:	8181      	strh	r1, [r0, #12]
 800882a:	6643      	str	r3, [r0, #100]	@ 0x64
 800882c:	81c2      	strh	r2, [r0, #14]
 800882e:	6183      	str	r3, [r0, #24]
 8008830:	4619      	mov	r1, r3
 8008832:	2208      	movs	r2, #8
 8008834:	305c      	adds	r0, #92	@ 0x5c
 8008836:	f000 f944 	bl	8008ac2 <memset>
 800883a:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <std+0x58>)
 800883c:	6263      	str	r3, [r4, #36]	@ 0x24
 800883e:	4b0d      	ldr	r3, [pc, #52]	@ (8008874 <std+0x5c>)
 8008840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008842:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <std+0x60>)
 8008844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008846:	4b0d      	ldr	r3, [pc, #52]	@ (800887c <std+0x64>)
 8008848:	6323      	str	r3, [r4, #48]	@ 0x30
 800884a:	4b0d      	ldr	r3, [pc, #52]	@ (8008880 <std+0x68>)
 800884c:	6224      	str	r4, [r4, #32]
 800884e:	429c      	cmp	r4, r3
 8008850:	d006      	beq.n	8008860 <std+0x48>
 8008852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008856:	4294      	cmp	r4, r2
 8008858:	d002      	beq.n	8008860 <std+0x48>
 800885a:	33d0      	adds	r3, #208	@ 0xd0
 800885c:	429c      	cmp	r4, r3
 800885e:	d105      	bne.n	800886c <std+0x54>
 8008860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008868:	f000 ba04 	b.w	8008c74 <__retarget_lock_init_recursive>
 800886c:	bd10      	pop	{r4, pc}
 800886e:	bf00      	nop
 8008870:	08008a39 	.word	0x08008a39
 8008874:	08008a5f 	.word	0x08008a5f
 8008878:	08008a97 	.word	0x08008a97
 800887c:	08008abb 	.word	0x08008abb
 8008880:	20000408 	.word	0x20000408

08008884 <stdio_exit_handler>:
 8008884:	4a02      	ldr	r2, [pc, #8]	@ (8008890 <stdio_exit_handler+0xc>)
 8008886:	4903      	ldr	r1, [pc, #12]	@ (8008894 <stdio_exit_handler+0x10>)
 8008888:	4803      	ldr	r0, [pc, #12]	@ (8008898 <stdio_exit_handler+0x14>)
 800888a:	f000 b869 	b.w	8008960 <_fwalk_sglue>
 800888e:	bf00      	nop
 8008890:	20000010 	.word	0x20000010
 8008894:	0800abd5 	.word	0x0800abd5
 8008898:	2000018c 	.word	0x2000018c

0800889c <cleanup_stdio>:
 800889c:	6841      	ldr	r1, [r0, #4]
 800889e:	4b0c      	ldr	r3, [pc, #48]	@ (80088d0 <cleanup_stdio+0x34>)
 80088a0:	4299      	cmp	r1, r3
 80088a2:	b510      	push	{r4, lr}
 80088a4:	4604      	mov	r4, r0
 80088a6:	d001      	beq.n	80088ac <cleanup_stdio+0x10>
 80088a8:	f002 f994 	bl	800abd4 <_fflush_r>
 80088ac:	68a1      	ldr	r1, [r4, #8]
 80088ae:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <cleanup_stdio+0x38>)
 80088b0:	4299      	cmp	r1, r3
 80088b2:	d002      	beq.n	80088ba <cleanup_stdio+0x1e>
 80088b4:	4620      	mov	r0, r4
 80088b6:	f002 f98d 	bl	800abd4 <_fflush_r>
 80088ba:	68e1      	ldr	r1, [r4, #12]
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <cleanup_stdio+0x3c>)
 80088be:	4299      	cmp	r1, r3
 80088c0:	d004      	beq.n	80088cc <cleanup_stdio+0x30>
 80088c2:	4620      	mov	r0, r4
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	f002 b984 	b.w	800abd4 <_fflush_r>
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	20000408 	.word	0x20000408
 80088d4:	20000470 	.word	0x20000470
 80088d8:	200004d8 	.word	0x200004d8

080088dc <global_stdio_init.part.0>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <global_stdio_init.part.0+0x30>)
 80088e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008910 <global_stdio_init.part.0+0x34>)
 80088e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008914 <global_stdio_init.part.0+0x38>)
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	4620      	mov	r0, r4
 80088e8:	2200      	movs	r2, #0
 80088ea:	2104      	movs	r1, #4
 80088ec:	f7ff ff94 	bl	8008818 <std>
 80088f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088f4:	2201      	movs	r2, #1
 80088f6:	2109      	movs	r1, #9
 80088f8:	f7ff ff8e 	bl	8008818 <std>
 80088fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008900:	2202      	movs	r2, #2
 8008902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008906:	2112      	movs	r1, #18
 8008908:	f7ff bf86 	b.w	8008818 <std>
 800890c:	20000540 	.word	0x20000540
 8008910:	20000408 	.word	0x20000408
 8008914:	08008885 	.word	0x08008885

08008918 <__sfp_lock_acquire>:
 8008918:	4801      	ldr	r0, [pc, #4]	@ (8008920 <__sfp_lock_acquire+0x8>)
 800891a:	f000 b9ac 	b.w	8008c76 <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	20000549 	.word	0x20000549

08008924 <__sfp_lock_release>:
 8008924:	4801      	ldr	r0, [pc, #4]	@ (800892c <__sfp_lock_release+0x8>)
 8008926:	f000 b9a7 	b.w	8008c78 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	20000549 	.word	0x20000549

08008930 <__sinit>:
 8008930:	b510      	push	{r4, lr}
 8008932:	4604      	mov	r4, r0
 8008934:	f7ff fff0 	bl	8008918 <__sfp_lock_acquire>
 8008938:	6a23      	ldr	r3, [r4, #32]
 800893a:	b11b      	cbz	r3, 8008944 <__sinit+0x14>
 800893c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008940:	f7ff bff0 	b.w	8008924 <__sfp_lock_release>
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <__sinit+0x28>)
 8008946:	6223      	str	r3, [r4, #32]
 8008948:	4b04      	ldr	r3, [pc, #16]	@ (800895c <__sinit+0x2c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f5      	bne.n	800893c <__sinit+0xc>
 8008950:	f7ff ffc4 	bl	80088dc <global_stdio_init.part.0>
 8008954:	e7f2      	b.n	800893c <__sinit+0xc>
 8008956:	bf00      	nop
 8008958:	0800889d 	.word	0x0800889d
 800895c:	20000540 	.word	0x20000540

08008960 <_fwalk_sglue>:
 8008960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008964:	4607      	mov	r7, r0
 8008966:	4688      	mov	r8, r1
 8008968:	4614      	mov	r4, r2
 800896a:	2600      	movs	r6, #0
 800896c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008970:	f1b9 0901 	subs.w	r9, r9, #1
 8008974:	d505      	bpl.n	8008982 <_fwalk_sglue+0x22>
 8008976:	6824      	ldr	r4, [r4, #0]
 8008978:	2c00      	cmp	r4, #0
 800897a:	d1f7      	bne.n	800896c <_fwalk_sglue+0xc>
 800897c:	4630      	mov	r0, r6
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d907      	bls.n	8008998 <_fwalk_sglue+0x38>
 8008988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800898c:	3301      	adds	r3, #1
 800898e:	d003      	beq.n	8008998 <_fwalk_sglue+0x38>
 8008990:	4629      	mov	r1, r5
 8008992:	4638      	mov	r0, r7
 8008994:	47c0      	blx	r8
 8008996:	4306      	orrs	r6, r0
 8008998:	3568      	adds	r5, #104	@ 0x68
 800899a:	e7e9      	b.n	8008970 <_fwalk_sglue+0x10>

0800899c <siprintf>:
 800899c:	b40e      	push	{r1, r2, r3}
 800899e:	b510      	push	{r4, lr}
 80089a0:	b09d      	sub	sp, #116	@ 0x74
 80089a2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80089a4:	9002      	str	r0, [sp, #8]
 80089a6:	9006      	str	r0, [sp, #24]
 80089a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089ac:	480a      	ldr	r0, [pc, #40]	@ (80089d8 <siprintf+0x3c>)
 80089ae:	9107      	str	r1, [sp, #28]
 80089b0:	9104      	str	r1, [sp, #16]
 80089b2:	490a      	ldr	r1, [pc, #40]	@ (80089dc <siprintf+0x40>)
 80089b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b8:	9105      	str	r1, [sp, #20]
 80089ba:	2400      	movs	r4, #0
 80089bc:	a902      	add	r1, sp, #8
 80089be:	6800      	ldr	r0, [r0, #0]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80089c4:	f001 fae0 	bl	8009f88 <_svfiprintf_r>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	701c      	strb	r4, [r3, #0]
 80089cc:	b01d      	add	sp, #116	@ 0x74
 80089ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d2:	b003      	add	sp, #12
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000188 	.word	0x20000188
 80089dc:	ffff0208 	.word	0xffff0208

080089e0 <siscanf>:
 80089e0:	b40e      	push	{r1, r2, r3}
 80089e2:	b570      	push	{r4, r5, r6, lr}
 80089e4:	b09d      	sub	sp, #116	@ 0x74
 80089e6:	ac21      	add	r4, sp, #132	@ 0x84
 80089e8:	2500      	movs	r5, #0
 80089ea:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80089ee:	f854 6b04 	ldr.w	r6, [r4], #4
 80089f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80089f6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80089f8:	9002      	str	r0, [sp, #8]
 80089fa:	9006      	str	r0, [sp, #24]
 80089fc:	f7f7 fbc0 	bl	8000180 <strlen>
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <siscanf+0x50>)
 8008a02:	9003      	str	r0, [sp, #12]
 8008a04:	9007      	str	r0, [sp, #28]
 8008a06:	480b      	ldr	r0, [pc, #44]	@ (8008a34 <siscanf+0x54>)
 8008a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a0e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a12:	4632      	mov	r2, r6
 8008a14:	4623      	mov	r3, r4
 8008a16:	a902      	add	r1, sp, #8
 8008a18:	6800      	ldr	r0, [r0, #0]
 8008a1a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008a1c:	9514      	str	r5, [sp, #80]	@ 0x50
 8008a1e:	9401      	str	r4, [sp, #4]
 8008a20:	f001 fc08 	bl	800a234 <__ssvfiscanf_r>
 8008a24:	b01d      	add	sp, #116	@ 0x74
 8008a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a2a:	b003      	add	sp, #12
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	08008a5b 	.word	0x08008a5b
 8008a34:	20000188 	.word	0x20000188

08008a38 <__sread>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	f000 f8ca 	bl	8008bd8 <_read_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfab      	itete	ge
 8008a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a4c:	181b      	addge	r3, r3, r0
 8008a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a52:	bfac      	ite	ge
 8008a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a56:	81a3      	strhlt	r3, [r4, #12]
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <__seofread>:
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	4770      	bx	lr

08008a5e <__swrite>:
 8008a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a62:	461f      	mov	r7, r3
 8008a64:	898b      	ldrh	r3, [r1, #12]
 8008a66:	05db      	lsls	r3, r3, #23
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4616      	mov	r6, r2
 8008a6e:	d505      	bpl.n	8008a7c <__swrite+0x1e>
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	2302      	movs	r3, #2
 8008a76:	2200      	movs	r2, #0
 8008a78:	f000 f89c 	bl	8008bb4 <_lseek_r>
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	4632      	mov	r2, r6
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	f000 b8b3 	b.w	8008bfc <_write_r>

08008a96 <__sseek>:
 8008a96:	b510      	push	{r4, lr}
 8008a98:	460c      	mov	r4, r1
 8008a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9e:	f000 f889 	bl	8008bb4 <_lseek_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	bf15      	itete	ne
 8008aa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008aaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008aae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ab2:	81a3      	strheq	r3, [r4, #12]
 8008ab4:	bf18      	it	ne
 8008ab6:	81a3      	strhne	r3, [r4, #12]
 8008ab8:	bd10      	pop	{r4, pc}

08008aba <__sclose>:
 8008aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abe:	f000 b857 	b.w	8008b70 <_close_r>

08008ac2 <memset>:
 8008ac2:	4402      	add	r2, r0
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d100      	bne.n	8008acc <memset+0xa>
 8008aca:	4770      	bx	lr
 8008acc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad0:	e7f9      	b.n	8008ac6 <memset+0x4>

08008ad2 <strchr>:
 8008ad2:	b2c9      	uxtb	r1, r1
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008adc:	b112      	cbz	r2, 8008ae4 <strchr+0x12>
 8008ade:	428a      	cmp	r2, r1
 8008ae0:	d1f9      	bne.n	8008ad6 <strchr+0x4>
 8008ae2:	4770      	bx	lr
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	bf18      	it	ne
 8008ae8:	2000      	movne	r0, #0
 8008aea:	4770      	bx	lr

08008aec <strncmp>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	b16a      	cbz	r2, 8008b0c <strncmp+0x20>
 8008af0:	3901      	subs	r1, #1
 8008af2:	1884      	adds	r4, r0, r2
 8008af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d103      	bne.n	8008b08 <strncmp+0x1c>
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d001      	beq.n	8008b08 <strncmp+0x1c>
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	d1f5      	bne.n	8008af4 <strncmp+0x8>
 8008b08:	1ad0      	subs	r0, r2, r3
 8008b0a:	bd10      	pop	{r4, pc}
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	e7fc      	b.n	8008b0a <strncmp+0x1e>

08008b10 <strncpy>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	3901      	subs	r1, #1
 8008b14:	4603      	mov	r3, r0
 8008b16:	b132      	cbz	r2, 8008b26 <strncpy+0x16>
 8008b18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b1c:	f803 4b01 	strb.w	r4, [r3], #1
 8008b20:	3a01      	subs	r2, #1
 8008b22:	2c00      	cmp	r4, #0
 8008b24:	d1f7      	bne.n	8008b16 <strncpy+0x6>
 8008b26:	441a      	add	r2, r3
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d100      	bne.n	8008b30 <strncpy+0x20>
 8008b2e:	bd10      	pop	{r4, pc}
 8008b30:	f803 1b01 	strb.w	r1, [r3], #1
 8008b34:	e7f9      	b.n	8008b2a <strncpy+0x1a>
	...

08008b38 <time>:
 8008b38:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <time+0x34>)
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	f04f 36ff 	mov.w	r6, #4294967295
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	f04f 37ff 	mov.w	r7, #4294967295
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4669      	mov	r1, sp
 8008b4c:	e9cd 6700 	strd	r6, r7, [sp]
 8008b50:	f000 f81e 	bl	8008b90 <_gettimeofday_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	da01      	bge.n	8008b5c <time+0x24>
 8008b58:	e9cd 6700 	strd	r6, r7, [sp]
 8008b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b60:	b10c      	cbz	r4, 8008b66 <time+0x2e>
 8008b62:	e9c4 0100 	strd	r0, r1, [r4]
 8008b66:	b004      	add	sp, #16
 8008b68:	bdd0      	pop	{r4, r6, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000188 	.word	0x20000188

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_close_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7fe fe6d 	bl	800785a <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000544 	.word	0x20000544

08008b90 <_gettimeofday_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d07      	ldr	r5, [pc, #28]	@ (8008bb0 <_gettimeofday_r+0x20>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	f002 fbdd 	bl	800b35c <_gettimeofday>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d102      	bne.n	8008bac <_gettimeofday_r+0x1c>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	b103      	cbz	r3, 8008bac <_gettimeofday_r+0x1c>
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000544 	.word	0x20000544

08008bb4 <_lseek_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	@ (8008bd4 <_lseek_r+0x20>)
 8008bb8:	4604      	mov	r4, r0
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f7fe fe6d 	bl	80078a2 <_lseek>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_lseek_r+0x1e>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_lseek_r+0x1e>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20000544 	.word	0x20000544

08008bd8 <_read_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d07      	ldr	r5, [pc, #28]	@ (8008bf8 <_read_r+0x20>)
 8008bdc:	4604      	mov	r4, r0
 8008bde:	4608      	mov	r0, r1
 8008be0:	4611      	mov	r1, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f7fe fdfe 	bl	80077e8 <_read>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_read_r+0x1e>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_read_r+0x1e>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000544 	.word	0x20000544

08008bfc <_write_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	@ (8008c1c <_write_r+0x20>)
 8008c00:	4604      	mov	r4, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7fe fe09 	bl	8007822 <_write>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_write_r+0x1e>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_write_r+0x1e>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000544 	.word	0x20000544

08008c20 <__errno>:
 8008c20:	4b01      	ldr	r3, [pc, #4]	@ (8008c28 <__errno+0x8>)
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000188 	.word	0x20000188

08008c2c <__libc_init_array>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c64 <__libc_init_array+0x38>)
 8008c30:	4c0d      	ldr	r4, [pc, #52]	@ (8008c68 <__libc_init_array+0x3c>)
 8008c32:	1b64      	subs	r4, r4, r5
 8008c34:	10a4      	asrs	r4, r4, #2
 8008c36:	2600      	movs	r6, #0
 8008c38:	42a6      	cmp	r6, r4
 8008c3a:	d109      	bne.n	8008c50 <__libc_init_array+0x24>
 8008c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c6c <__libc_init_array+0x40>)
 8008c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8008c70 <__libc_init_array+0x44>)
 8008c40:	f002 fb94 	bl	800b36c <_init>
 8008c44:	1b64      	subs	r4, r4, r5
 8008c46:	10a4      	asrs	r4, r4, #2
 8008c48:	2600      	movs	r6, #0
 8008c4a:	42a6      	cmp	r6, r4
 8008c4c:	d105      	bne.n	8008c5a <__libc_init_array+0x2e>
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c54:	4798      	blx	r3
 8008c56:	3601      	adds	r6, #1
 8008c58:	e7ee      	b.n	8008c38 <__libc_init_array+0xc>
 8008c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5e:	4798      	blx	r3
 8008c60:	3601      	adds	r6, #1
 8008c62:	e7f2      	b.n	8008c4a <__libc_init_array+0x1e>
 8008c64:	0800b9b0 	.word	0x0800b9b0
 8008c68:	0800b9b0 	.word	0x0800b9b0
 8008c6c:	0800b9b0 	.word	0x0800b9b0
 8008c70:	0800b9b4 	.word	0x0800b9b4

08008c74 <__retarget_lock_init_recursive>:
 8008c74:	4770      	bx	lr

08008c76 <__retarget_lock_acquire_recursive>:
 8008c76:	4770      	bx	lr

08008c78 <__retarget_lock_release_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <memcpy>:
 8008c7a:	440a      	add	r2, r1
 8008c7c:	4291      	cmp	r1, r2
 8008c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c82:	d100      	bne.n	8008c86 <memcpy+0xc>
 8008c84:	4770      	bx	lr
 8008c86:	b510      	push	{r4, lr}
 8008c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c90:	4291      	cmp	r1, r2
 8008c92:	d1f9      	bne.n	8008c88 <memcpy+0xe>
 8008c94:	bd10      	pop	{r4, pc}
	...

08008c98 <nan>:
 8008c98:	4901      	ldr	r1, [pc, #4]	@ (8008ca0 <nan+0x8>)
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	7ff80000 	.word	0x7ff80000

08008ca4 <__assert_func>:
 8008ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b09      	ldr	r3, [pc, #36]	@ (8008cd0 <__assert_func+0x2c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	68d8      	ldr	r0, [r3, #12]
 8008cb2:	b14c      	cbz	r4, 8008cc8 <__assert_func+0x24>
 8008cb4:	4b07      	ldr	r3, [pc, #28]	@ (8008cd4 <__assert_func+0x30>)
 8008cb6:	9100      	str	r1, [sp, #0]
 8008cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cbc:	4906      	ldr	r1, [pc, #24]	@ (8008cd8 <__assert_func+0x34>)
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f001 ffb0 	bl	800ac24 <fiprintf>
 8008cc4:	f002 f85e 	bl	800ad84 <abort>
 8008cc8:	4b04      	ldr	r3, [pc, #16]	@ (8008cdc <__assert_func+0x38>)
 8008cca:	461c      	mov	r4, r3
 8008ccc:	e7f3      	b.n	8008cb6 <__assert_func+0x12>
 8008cce:	bf00      	nop
 8008cd0:	20000188 	.word	0x20000188
 8008cd4:	0800b5fd 	.word	0x0800b5fd
 8008cd8:	0800b60a 	.word	0x0800b60a
 8008cdc:	0800b638 	.word	0x0800b638

08008ce0 <_free_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	d041      	beq.n	8008d6c <_free_r+0x8c>
 8008ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cec:	1f0c      	subs	r4, r1, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfb8      	it	lt
 8008cf2:	18e4      	addlt	r4, r4, r3
 8008cf4:	f000 fc34 	bl	8009560 <__malloc_lock>
 8008cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d70 <_free_r+0x90>)
 8008cfa:	6813      	ldr	r3, [r2, #0]
 8008cfc:	b933      	cbnz	r3, 8008d0c <_free_r+0x2c>
 8008cfe:	6063      	str	r3, [r4, #4]
 8008d00:	6014      	str	r4, [r2, #0]
 8008d02:	4628      	mov	r0, r5
 8008d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d08:	f000 bc30 	b.w	800956c <__malloc_unlock>
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	d908      	bls.n	8008d22 <_free_r+0x42>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	1821      	adds	r1, r4, r0
 8008d14:	428b      	cmp	r3, r1
 8008d16:	bf01      	itttt	eq
 8008d18:	6819      	ldreq	r1, [r3, #0]
 8008d1a:	685b      	ldreq	r3, [r3, #4]
 8008d1c:	1809      	addeq	r1, r1, r0
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	e7ed      	b.n	8008cfe <_free_r+0x1e>
 8008d22:	461a      	mov	r2, r3
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	b10b      	cbz	r3, 8008d2c <_free_r+0x4c>
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d9fa      	bls.n	8008d22 <_free_r+0x42>
 8008d2c:	6811      	ldr	r1, [r2, #0]
 8008d2e:	1850      	adds	r0, r2, r1
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d10b      	bne.n	8008d4c <_free_r+0x6c>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4401      	add	r1, r0
 8008d38:	1850      	adds	r0, r2, r1
 8008d3a:	4283      	cmp	r3, r0
 8008d3c:	6011      	str	r1, [r2, #0]
 8008d3e:	d1e0      	bne.n	8008d02 <_free_r+0x22>
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	6053      	str	r3, [r2, #4]
 8008d46:	4408      	add	r0, r1
 8008d48:	6010      	str	r0, [r2, #0]
 8008d4a:	e7da      	b.n	8008d02 <_free_r+0x22>
 8008d4c:	d902      	bls.n	8008d54 <_free_r+0x74>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	e7d6      	b.n	8008d02 <_free_r+0x22>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	1821      	adds	r1, r4, r0
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	bf04      	itt	eq
 8008d5c:	6819      	ldreq	r1, [r3, #0]
 8008d5e:	685b      	ldreq	r3, [r3, #4]
 8008d60:	6063      	str	r3, [r4, #4]
 8008d62:	bf04      	itt	eq
 8008d64:	1809      	addeq	r1, r1, r0
 8008d66:	6021      	streq	r1, [r4, #0]
 8008d68:	6054      	str	r4, [r2, #4]
 8008d6a:	e7ca      	b.n	8008d02 <_free_r+0x22>
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000550 	.word	0x20000550

08008d74 <rshift>:
 8008d74:	6903      	ldr	r3, [r0, #16]
 8008d76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d82:	f100 0414 	add.w	r4, r0, #20
 8008d86:	dd45      	ble.n	8008e14 <rshift+0xa0>
 8008d88:	f011 011f 	ands.w	r1, r1, #31
 8008d8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d94:	d10c      	bne.n	8008db0 <rshift+0x3c>
 8008d96:	f100 0710 	add.w	r7, r0, #16
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	42b1      	cmp	r1, r6
 8008d9e:	d334      	bcc.n	8008e0a <rshift+0x96>
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	1eea      	subs	r2, r5, #3
 8008da6:	4296      	cmp	r6, r2
 8008da8:	bf38      	it	cc
 8008daa:	2300      	movcc	r3, #0
 8008dac:	4423      	add	r3, r4
 8008dae:	e015      	b.n	8008ddc <rshift+0x68>
 8008db0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008db4:	f1c1 0820 	rsb	r8, r1, #32
 8008db8:	40cf      	lsrs	r7, r1
 8008dba:	f105 0e04 	add.w	lr, r5, #4
 8008dbe:	46a1      	mov	r9, r4
 8008dc0:	4576      	cmp	r6, lr
 8008dc2:	46f4      	mov	ip, lr
 8008dc4:	d815      	bhi.n	8008df2 <rshift+0x7e>
 8008dc6:	1a9a      	subs	r2, r3, r2
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	3a04      	subs	r2, #4
 8008dcc:	3501      	adds	r5, #1
 8008dce:	42ae      	cmp	r6, r5
 8008dd0:	bf38      	it	cc
 8008dd2:	2200      	movcc	r2, #0
 8008dd4:	18a3      	adds	r3, r4, r2
 8008dd6:	50a7      	str	r7, [r4, r2]
 8008dd8:	b107      	cbz	r7, 8008ddc <rshift+0x68>
 8008dda:	3304      	adds	r3, #4
 8008ddc:	1b1a      	subs	r2, r3, r4
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008de4:	bf08      	it	eq
 8008de6:	2300      	moveq	r3, #0
 8008de8:	6102      	str	r2, [r0, #16]
 8008dea:	bf08      	it	eq
 8008dec:	6143      	streq	r3, [r0, #20]
 8008dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008df2:	f8dc c000 	ldr.w	ip, [ip]
 8008df6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008dfa:	ea4c 0707 	orr.w	r7, ip, r7
 8008dfe:	f849 7b04 	str.w	r7, [r9], #4
 8008e02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e06:	40cf      	lsrs	r7, r1
 8008e08:	e7da      	b.n	8008dc0 <rshift+0x4c>
 8008e0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e12:	e7c3      	b.n	8008d9c <rshift+0x28>
 8008e14:	4623      	mov	r3, r4
 8008e16:	e7e1      	b.n	8008ddc <rshift+0x68>

08008e18 <__hexdig_fun>:
 8008e18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d802      	bhi.n	8008e26 <__hexdig_fun+0xe>
 8008e20:	3820      	subs	r0, #32
 8008e22:	b2c0      	uxtb	r0, r0
 8008e24:	4770      	bx	lr
 8008e26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d801      	bhi.n	8008e32 <__hexdig_fun+0x1a>
 8008e2e:	3847      	subs	r0, #71	@ 0x47
 8008e30:	e7f7      	b.n	8008e22 <__hexdig_fun+0xa>
 8008e32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d801      	bhi.n	8008e3e <__hexdig_fun+0x26>
 8008e3a:	3827      	subs	r0, #39	@ 0x27
 8008e3c:	e7f1      	b.n	8008e22 <__hexdig_fun+0xa>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	4770      	bx	lr
	...

08008e44 <__gethex>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	468a      	mov	sl, r1
 8008e4c:	9302      	str	r3, [sp, #8]
 8008e4e:	680b      	ldr	r3, [r1, #0]
 8008e50:	9001      	str	r0, [sp, #4]
 8008e52:	4690      	mov	r8, r2
 8008e54:	1c9c      	adds	r4, r3, #2
 8008e56:	46a1      	mov	r9, r4
 8008e58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e5c:	2830      	cmp	r0, #48	@ 0x30
 8008e5e:	d0fa      	beq.n	8008e56 <__gethex+0x12>
 8008e60:	eba9 0303 	sub.w	r3, r9, r3
 8008e64:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e68:	f7ff ffd6 	bl	8008e18 <__hexdig_fun>
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d168      	bne.n	8008f44 <__gethex+0x100>
 8008e72:	49a0      	ldr	r1, [pc, #640]	@ (80090f4 <__gethex+0x2b0>)
 8008e74:	2201      	movs	r2, #1
 8008e76:	4648      	mov	r0, r9
 8008e78:	f7ff fe38 	bl	8008aec <strncmp>
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d167      	bne.n	8008f52 <__gethex+0x10e>
 8008e82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e86:	4626      	mov	r6, r4
 8008e88:	f7ff ffc6 	bl	8008e18 <__hexdig_fun>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d062      	beq.n	8008f56 <__gethex+0x112>
 8008e90:	4623      	mov	r3, r4
 8008e92:	7818      	ldrb	r0, [r3, #0]
 8008e94:	2830      	cmp	r0, #48	@ 0x30
 8008e96:	4699      	mov	r9, r3
 8008e98:	f103 0301 	add.w	r3, r3, #1
 8008e9c:	d0f9      	beq.n	8008e92 <__gethex+0x4e>
 8008e9e:	f7ff ffbb 	bl	8008e18 <__hexdig_fun>
 8008ea2:	fab0 f580 	clz	r5, r0
 8008ea6:	096d      	lsrs	r5, r5, #5
 8008ea8:	f04f 0b01 	mov.w	fp, #1
 8008eac:	464a      	mov	r2, r9
 8008eae:	4616      	mov	r6, r2
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	7830      	ldrb	r0, [r6, #0]
 8008eb4:	f7ff ffb0 	bl	8008e18 <__hexdig_fun>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1f8      	bne.n	8008eae <__gethex+0x6a>
 8008ebc:	498d      	ldr	r1, [pc, #564]	@ (80090f4 <__gethex+0x2b0>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7ff fe13 	bl	8008aec <strncmp>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d13f      	bne.n	8008f4a <__gethex+0x106>
 8008eca:	b944      	cbnz	r4, 8008ede <__gethex+0x9a>
 8008ecc:	1c74      	adds	r4, r6, #1
 8008ece:	4622      	mov	r2, r4
 8008ed0:	4616      	mov	r6, r2
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	7830      	ldrb	r0, [r6, #0]
 8008ed6:	f7ff ff9f 	bl	8008e18 <__hexdig_fun>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d1f8      	bne.n	8008ed0 <__gethex+0x8c>
 8008ede:	1ba4      	subs	r4, r4, r6
 8008ee0:	00a7      	lsls	r7, r4, #2
 8008ee2:	7833      	ldrb	r3, [r6, #0]
 8008ee4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ee8:	2b50      	cmp	r3, #80	@ 0x50
 8008eea:	d13e      	bne.n	8008f6a <__gethex+0x126>
 8008eec:	7873      	ldrb	r3, [r6, #1]
 8008eee:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ef0:	d033      	beq.n	8008f5a <__gethex+0x116>
 8008ef2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ef4:	d034      	beq.n	8008f60 <__gethex+0x11c>
 8008ef6:	1c71      	adds	r1, r6, #1
 8008ef8:	2400      	movs	r4, #0
 8008efa:	7808      	ldrb	r0, [r1, #0]
 8008efc:	f7ff ff8c 	bl	8008e18 <__hexdig_fun>
 8008f00:	1e43      	subs	r3, r0, #1
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b18      	cmp	r3, #24
 8008f06:	d830      	bhi.n	8008f6a <__gethex+0x126>
 8008f08:	f1a0 0210 	sub.w	r2, r0, #16
 8008f0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f10:	f7ff ff82 	bl	8008e18 <__hexdig_fun>
 8008f14:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f18:	fa5f fc8c 	uxtb.w	ip, ip
 8008f1c:	f1bc 0f18 	cmp.w	ip, #24
 8008f20:	f04f 030a 	mov.w	r3, #10
 8008f24:	d91e      	bls.n	8008f64 <__gethex+0x120>
 8008f26:	b104      	cbz	r4, 8008f2a <__gethex+0xe6>
 8008f28:	4252      	negs	r2, r2
 8008f2a:	4417      	add	r7, r2
 8008f2c:	f8ca 1000 	str.w	r1, [sl]
 8008f30:	b1ed      	cbz	r5, 8008f6e <__gethex+0x12a>
 8008f32:	f1bb 0f00 	cmp.w	fp, #0
 8008f36:	bf0c      	ite	eq
 8008f38:	2506      	moveq	r5, #6
 8008f3a:	2500      	movne	r5, #0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	b005      	add	sp, #20
 8008f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f44:	2500      	movs	r5, #0
 8008f46:	462c      	mov	r4, r5
 8008f48:	e7b0      	b.n	8008eac <__gethex+0x68>
 8008f4a:	2c00      	cmp	r4, #0
 8008f4c:	d1c7      	bne.n	8008ede <__gethex+0x9a>
 8008f4e:	4627      	mov	r7, r4
 8008f50:	e7c7      	b.n	8008ee2 <__gethex+0x9e>
 8008f52:	464e      	mov	r6, r9
 8008f54:	462f      	mov	r7, r5
 8008f56:	2501      	movs	r5, #1
 8008f58:	e7c3      	b.n	8008ee2 <__gethex+0x9e>
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	1cb1      	adds	r1, r6, #2
 8008f5e:	e7cc      	b.n	8008efa <__gethex+0xb6>
 8008f60:	2401      	movs	r4, #1
 8008f62:	e7fb      	b.n	8008f5c <__gethex+0x118>
 8008f64:	fb03 0002 	mla	r0, r3, r2, r0
 8008f68:	e7ce      	b.n	8008f08 <__gethex+0xc4>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	e7de      	b.n	8008f2c <__gethex+0xe8>
 8008f6e:	eba6 0309 	sub.w	r3, r6, r9
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4629      	mov	r1, r5
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	dc0a      	bgt.n	8008f90 <__gethex+0x14c>
 8008f7a:	9801      	ldr	r0, [sp, #4]
 8008f7c:	f000 fafc 	bl	8009578 <_Balloc>
 8008f80:	4604      	mov	r4, r0
 8008f82:	b940      	cbnz	r0, 8008f96 <__gethex+0x152>
 8008f84:	4b5c      	ldr	r3, [pc, #368]	@ (80090f8 <__gethex+0x2b4>)
 8008f86:	4602      	mov	r2, r0
 8008f88:	21e4      	movs	r1, #228	@ 0xe4
 8008f8a:	485c      	ldr	r0, [pc, #368]	@ (80090fc <__gethex+0x2b8>)
 8008f8c:	f7ff fe8a 	bl	8008ca4 <__assert_func>
 8008f90:	3101      	adds	r1, #1
 8008f92:	105b      	asrs	r3, r3, #1
 8008f94:	e7ef      	b.n	8008f76 <__gethex+0x132>
 8008f96:	f100 0a14 	add.w	sl, r0, #20
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4655      	mov	r5, sl
 8008f9e:	469b      	mov	fp, r3
 8008fa0:	45b1      	cmp	r9, r6
 8008fa2:	d337      	bcc.n	8009014 <__gethex+0x1d0>
 8008fa4:	f845 bb04 	str.w	fp, [r5], #4
 8008fa8:	eba5 050a 	sub.w	r5, r5, sl
 8008fac:	10ad      	asrs	r5, r5, #2
 8008fae:	6125      	str	r5, [r4, #16]
 8008fb0:	4658      	mov	r0, fp
 8008fb2:	f000 fbd3 	bl	800975c <__hi0bits>
 8008fb6:	016d      	lsls	r5, r5, #5
 8008fb8:	f8d8 6000 	ldr.w	r6, [r8]
 8008fbc:	1a2d      	subs	r5, r5, r0
 8008fbe:	42b5      	cmp	r5, r6
 8008fc0:	dd54      	ble.n	800906c <__gethex+0x228>
 8008fc2:	1bad      	subs	r5, r5, r6
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 ff55 	bl	8009e76 <__any_on>
 8008fcc:	4681      	mov	r9, r0
 8008fce:	b178      	cbz	r0, 8008ff0 <__gethex+0x1ac>
 8008fd0:	1e6b      	subs	r3, r5, #1
 8008fd2:	1159      	asrs	r1, r3, #5
 8008fd4:	f003 021f 	and.w	r2, r3, #31
 8008fd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fdc:	f04f 0901 	mov.w	r9, #1
 8008fe0:	fa09 f202 	lsl.w	r2, r9, r2
 8008fe4:	420a      	tst	r2, r1
 8008fe6:	d003      	beq.n	8008ff0 <__gethex+0x1ac>
 8008fe8:	454b      	cmp	r3, r9
 8008fea:	dc36      	bgt.n	800905a <__gethex+0x216>
 8008fec:	f04f 0902 	mov.w	r9, #2
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff febe 	bl	8008d74 <rshift>
 8008ff8:	442f      	add	r7, r5
 8008ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ffe:	42bb      	cmp	r3, r7
 8009000:	da42      	bge.n	8009088 <__gethex+0x244>
 8009002:	9801      	ldr	r0, [sp, #4]
 8009004:	4621      	mov	r1, r4
 8009006:	f000 faf7 	bl	80095f8 <_Bfree>
 800900a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800900c:	2300      	movs	r3, #0
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	25a3      	movs	r5, #163	@ 0xa3
 8009012:	e793      	b.n	8008f3c <__gethex+0xf8>
 8009014:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009018:	2a2e      	cmp	r2, #46	@ 0x2e
 800901a:	d012      	beq.n	8009042 <__gethex+0x1fe>
 800901c:	2b20      	cmp	r3, #32
 800901e:	d104      	bne.n	800902a <__gethex+0x1e6>
 8009020:	f845 bb04 	str.w	fp, [r5], #4
 8009024:	f04f 0b00 	mov.w	fp, #0
 8009028:	465b      	mov	r3, fp
 800902a:	7830      	ldrb	r0, [r6, #0]
 800902c:	9303      	str	r3, [sp, #12]
 800902e:	f7ff fef3 	bl	8008e18 <__hexdig_fun>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	f000 000f 	and.w	r0, r0, #15
 8009038:	4098      	lsls	r0, r3
 800903a:	ea4b 0b00 	orr.w	fp, fp, r0
 800903e:	3304      	adds	r3, #4
 8009040:	e7ae      	b.n	8008fa0 <__gethex+0x15c>
 8009042:	45b1      	cmp	r9, r6
 8009044:	d8ea      	bhi.n	800901c <__gethex+0x1d8>
 8009046:	492b      	ldr	r1, [pc, #172]	@ (80090f4 <__gethex+0x2b0>)
 8009048:	9303      	str	r3, [sp, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fd4d 	bl	8008aec <strncmp>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	2800      	cmp	r0, #0
 8009056:	d1e1      	bne.n	800901c <__gethex+0x1d8>
 8009058:	e7a2      	b.n	8008fa0 <__gethex+0x15c>
 800905a:	1ea9      	subs	r1, r5, #2
 800905c:	4620      	mov	r0, r4
 800905e:	f000 ff0a 	bl	8009e76 <__any_on>
 8009062:	2800      	cmp	r0, #0
 8009064:	d0c2      	beq.n	8008fec <__gethex+0x1a8>
 8009066:	f04f 0903 	mov.w	r9, #3
 800906a:	e7c1      	b.n	8008ff0 <__gethex+0x1ac>
 800906c:	da09      	bge.n	8009082 <__gethex+0x23e>
 800906e:	1b75      	subs	r5, r6, r5
 8009070:	4621      	mov	r1, r4
 8009072:	9801      	ldr	r0, [sp, #4]
 8009074:	462a      	mov	r2, r5
 8009076:	f000 fccf 	bl	8009a18 <__lshift>
 800907a:	1b7f      	subs	r7, r7, r5
 800907c:	4604      	mov	r4, r0
 800907e:	f100 0a14 	add.w	sl, r0, #20
 8009082:	f04f 0900 	mov.w	r9, #0
 8009086:	e7b8      	b.n	8008ffa <__gethex+0x1b6>
 8009088:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800908c:	42bd      	cmp	r5, r7
 800908e:	dd6f      	ble.n	8009170 <__gethex+0x32c>
 8009090:	1bed      	subs	r5, r5, r7
 8009092:	42ae      	cmp	r6, r5
 8009094:	dc34      	bgt.n	8009100 <__gethex+0x2bc>
 8009096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d022      	beq.n	80090e4 <__gethex+0x2a0>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d024      	beq.n	80090ec <__gethex+0x2a8>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d115      	bne.n	80090d2 <__gethex+0x28e>
 80090a6:	42ae      	cmp	r6, r5
 80090a8:	d113      	bne.n	80090d2 <__gethex+0x28e>
 80090aa:	2e01      	cmp	r6, #1
 80090ac:	d10b      	bne.n	80090c6 <__gethex+0x282>
 80090ae:	9a02      	ldr	r2, [sp, #8]
 80090b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	2301      	movs	r3, #1
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	f8ca 3000 	str.w	r3, [sl]
 80090be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c0:	2562      	movs	r5, #98	@ 0x62
 80090c2:	601c      	str	r4, [r3, #0]
 80090c4:	e73a      	b.n	8008f3c <__gethex+0xf8>
 80090c6:	1e71      	subs	r1, r6, #1
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fed4 	bl	8009e76 <__any_on>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1ed      	bne.n	80090ae <__gethex+0x26a>
 80090d2:	9801      	ldr	r0, [sp, #4]
 80090d4:	4621      	mov	r1, r4
 80090d6:	f000 fa8f 	bl	80095f8 <_Bfree>
 80090da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090dc:	2300      	movs	r3, #0
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	2550      	movs	r5, #80	@ 0x50
 80090e2:	e72b      	b.n	8008f3c <__gethex+0xf8>
 80090e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f3      	bne.n	80090d2 <__gethex+0x28e>
 80090ea:	e7e0      	b.n	80090ae <__gethex+0x26a>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1dd      	bne.n	80090ae <__gethex+0x26a>
 80090f2:	e7ee      	b.n	80090d2 <__gethex+0x28e>
 80090f4:	0800b5e7 	.word	0x0800b5e7
 80090f8:	0800b639 	.word	0x0800b639
 80090fc:	0800b64a 	.word	0x0800b64a
 8009100:	1e6f      	subs	r7, r5, #1
 8009102:	f1b9 0f00 	cmp.w	r9, #0
 8009106:	d130      	bne.n	800916a <__gethex+0x326>
 8009108:	b127      	cbz	r7, 8009114 <__gethex+0x2d0>
 800910a:	4639      	mov	r1, r7
 800910c:	4620      	mov	r0, r4
 800910e:	f000 feb2 	bl	8009e76 <__any_on>
 8009112:	4681      	mov	r9, r0
 8009114:	117a      	asrs	r2, r7, #5
 8009116:	2301      	movs	r3, #1
 8009118:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800911c:	f007 071f 	and.w	r7, r7, #31
 8009120:	40bb      	lsls	r3, r7
 8009122:	4213      	tst	r3, r2
 8009124:	4629      	mov	r1, r5
 8009126:	4620      	mov	r0, r4
 8009128:	bf18      	it	ne
 800912a:	f049 0902 	orrne.w	r9, r9, #2
 800912e:	f7ff fe21 	bl	8008d74 <rshift>
 8009132:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009136:	1b76      	subs	r6, r6, r5
 8009138:	2502      	movs	r5, #2
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	d047      	beq.n	80091d0 <__gethex+0x38c>
 8009140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d015      	beq.n	8009174 <__gethex+0x330>
 8009148:	2b03      	cmp	r3, #3
 800914a:	d017      	beq.n	800917c <__gethex+0x338>
 800914c:	2b01      	cmp	r3, #1
 800914e:	d109      	bne.n	8009164 <__gethex+0x320>
 8009150:	f019 0f02 	tst.w	r9, #2
 8009154:	d006      	beq.n	8009164 <__gethex+0x320>
 8009156:	f8da 3000 	ldr.w	r3, [sl]
 800915a:	ea49 0903 	orr.w	r9, r9, r3
 800915e:	f019 0f01 	tst.w	r9, #1
 8009162:	d10e      	bne.n	8009182 <__gethex+0x33e>
 8009164:	f045 0510 	orr.w	r5, r5, #16
 8009168:	e032      	b.n	80091d0 <__gethex+0x38c>
 800916a:	f04f 0901 	mov.w	r9, #1
 800916e:	e7d1      	b.n	8009114 <__gethex+0x2d0>
 8009170:	2501      	movs	r5, #1
 8009172:	e7e2      	b.n	800913a <__gethex+0x2f6>
 8009174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009176:	f1c3 0301 	rsb	r3, r3, #1
 800917a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800917c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f0      	beq.n	8009164 <__gethex+0x320>
 8009182:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009186:	f104 0314 	add.w	r3, r4, #20
 800918a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800918e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009192:	f04f 0c00 	mov.w	ip, #0
 8009196:	4618      	mov	r0, r3
 8009198:	f853 2b04 	ldr.w	r2, [r3], #4
 800919c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091a0:	d01b      	beq.n	80091da <__gethex+0x396>
 80091a2:	3201      	adds	r2, #1
 80091a4:	6002      	str	r2, [r0, #0]
 80091a6:	2d02      	cmp	r5, #2
 80091a8:	f104 0314 	add.w	r3, r4, #20
 80091ac:	d13c      	bne.n	8009228 <__gethex+0x3e4>
 80091ae:	f8d8 2000 	ldr.w	r2, [r8]
 80091b2:	3a01      	subs	r2, #1
 80091b4:	42b2      	cmp	r2, r6
 80091b6:	d109      	bne.n	80091cc <__gethex+0x388>
 80091b8:	1171      	asrs	r1, r6, #5
 80091ba:	2201      	movs	r2, #1
 80091bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091c0:	f006 061f 	and.w	r6, r6, #31
 80091c4:	fa02 f606 	lsl.w	r6, r2, r6
 80091c8:	421e      	tst	r6, r3
 80091ca:	d13a      	bne.n	8009242 <__gethex+0x3fe>
 80091cc:	f045 0520 	orr.w	r5, r5, #32
 80091d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d2:	601c      	str	r4, [r3, #0]
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	601f      	str	r7, [r3, #0]
 80091d8:	e6b0      	b.n	8008f3c <__gethex+0xf8>
 80091da:	4299      	cmp	r1, r3
 80091dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80091e0:	d8d9      	bhi.n	8009196 <__gethex+0x352>
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	459b      	cmp	fp, r3
 80091e6:	db17      	blt.n	8009218 <__gethex+0x3d4>
 80091e8:	6861      	ldr	r1, [r4, #4]
 80091ea:	9801      	ldr	r0, [sp, #4]
 80091ec:	3101      	adds	r1, #1
 80091ee:	f000 f9c3 	bl	8009578 <_Balloc>
 80091f2:	4681      	mov	r9, r0
 80091f4:	b918      	cbnz	r0, 80091fe <__gethex+0x3ba>
 80091f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009260 <__gethex+0x41c>)
 80091f8:	4602      	mov	r2, r0
 80091fa:	2184      	movs	r1, #132	@ 0x84
 80091fc:	e6c5      	b.n	8008f8a <__gethex+0x146>
 80091fe:	6922      	ldr	r2, [r4, #16]
 8009200:	3202      	adds	r2, #2
 8009202:	f104 010c 	add.w	r1, r4, #12
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	300c      	adds	r0, #12
 800920a:	f7ff fd36 	bl	8008c7a <memcpy>
 800920e:	4621      	mov	r1, r4
 8009210:	9801      	ldr	r0, [sp, #4]
 8009212:	f000 f9f1 	bl	80095f8 <_Bfree>
 8009216:	464c      	mov	r4, r9
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009220:	6122      	str	r2, [r4, #16]
 8009222:	2201      	movs	r2, #1
 8009224:	615a      	str	r2, [r3, #20]
 8009226:	e7be      	b.n	80091a6 <__gethex+0x362>
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	455a      	cmp	r2, fp
 800922c:	dd0b      	ble.n	8009246 <__gethex+0x402>
 800922e:	2101      	movs	r1, #1
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff fd9f 	bl	8008d74 <rshift>
 8009236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800923a:	3701      	adds	r7, #1
 800923c:	42bb      	cmp	r3, r7
 800923e:	f6ff aee0 	blt.w	8009002 <__gethex+0x1be>
 8009242:	2501      	movs	r5, #1
 8009244:	e7c2      	b.n	80091cc <__gethex+0x388>
 8009246:	f016 061f 	ands.w	r6, r6, #31
 800924a:	d0fa      	beq.n	8009242 <__gethex+0x3fe>
 800924c:	4453      	add	r3, sl
 800924e:	f1c6 0620 	rsb	r6, r6, #32
 8009252:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009256:	f000 fa81 	bl	800975c <__hi0bits>
 800925a:	42b0      	cmp	r0, r6
 800925c:	dbe7      	blt.n	800922e <__gethex+0x3ea>
 800925e:	e7f0      	b.n	8009242 <__gethex+0x3fe>
 8009260:	0800b639 	.word	0x0800b639

08009264 <L_shift>:
 8009264:	f1c2 0208 	rsb	r2, r2, #8
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	f1c2 0620 	rsb	r6, r2, #32
 8009270:	6843      	ldr	r3, [r0, #4]
 8009272:	6804      	ldr	r4, [r0, #0]
 8009274:	fa03 f506 	lsl.w	r5, r3, r6
 8009278:	432c      	orrs	r4, r5
 800927a:	40d3      	lsrs	r3, r2
 800927c:	6004      	str	r4, [r0, #0]
 800927e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009282:	4288      	cmp	r0, r1
 8009284:	d3f4      	bcc.n	8009270 <L_shift+0xc>
 8009286:	bd70      	pop	{r4, r5, r6, pc}

08009288 <__match>:
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	6803      	ldr	r3, [r0, #0]
 800928c:	3301      	adds	r3, #1
 800928e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009292:	b914      	cbnz	r4, 800929a <__match+0x12>
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	2001      	movs	r0, #1
 8009298:	bd30      	pop	{r4, r5, pc}
 800929a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800929e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092a2:	2d19      	cmp	r5, #25
 80092a4:	bf98      	it	ls
 80092a6:	3220      	addls	r2, #32
 80092a8:	42a2      	cmp	r2, r4
 80092aa:	d0f0      	beq.n	800928e <__match+0x6>
 80092ac:	2000      	movs	r0, #0
 80092ae:	e7f3      	b.n	8009298 <__match+0x10>

080092b0 <__hexnan>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	680b      	ldr	r3, [r1, #0]
 80092b6:	6801      	ldr	r1, [r0, #0]
 80092b8:	115e      	asrs	r6, r3, #5
 80092ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092be:	f013 031f 	ands.w	r3, r3, #31
 80092c2:	b087      	sub	sp, #28
 80092c4:	bf18      	it	ne
 80092c6:	3604      	addne	r6, #4
 80092c8:	2500      	movs	r5, #0
 80092ca:	1f37      	subs	r7, r6, #4
 80092cc:	4682      	mov	sl, r0
 80092ce:	4690      	mov	r8, r2
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80092d6:	46b9      	mov	r9, r7
 80092d8:	463c      	mov	r4, r7
 80092da:	9502      	str	r5, [sp, #8]
 80092dc:	46ab      	mov	fp, r5
 80092de:	784a      	ldrb	r2, [r1, #1]
 80092e0:	1c4b      	adds	r3, r1, #1
 80092e2:	9303      	str	r3, [sp, #12]
 80092e4:	b342      	cbz	r2, 8009338 <__hexnan+0x88>
 80092e6:	4610      	mov	r0, r2
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	9204      	str	r2, [sp, #16]
 80092ec:	f7ff fd94 	bl	8008e18 <__hexdig_fun>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d151      	bne.n	8009398 <__hexnan+0xe8>
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	9905      	ldr	r1, [sp, #20]
 80092f8:	2a20      	cmp	r2, #32
 80092fa:	d818      	bhi.n	800932e <__hexnan+0x7e>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	459b      	cmp	fp, r3
 8009300:	dd13      	ble.n	800932a <__hexnan+0x7a>
 8009302:	454c      	cmp	r4, r9
 8009304:	d206      	bcs.n	8009314 <__hexnan+0x64>
 8009306:	2d07      	cmp	r5, #7
 8009308:	dc04      	bgt.n	8009314 <__hexnan+0x64>
 800930a:	462a      	mov	r2, r5
 800930c:	4649      	mov	r1, r9
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ffa8 	bl	8009264 <L_shift>
 8009314:	4544      	cmp	r4, r8
 8009316:	d952      	bls.n	80093be <__hexnan+0x10e>
 8009318:	2300      	movs	r3, #0
 800931a:	f1a4 0904 	sub.w	r9, r4, #4
 800931e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009322:	f8cd b008 	str.w	fp, [sp, #8]
 8009326:	464c      	mov	r4, r9
 8009328:	461d      	mov	r5, r3
 800932a:	9903      	ldr	r1, [sp, #12]
 800932c:	e7d7      	b.n	80092de <__hexnan+0x2e>
 800932e:	2a29      	cmp	r2, #41	@ 0x29
 8009330:	d157      	bne.n	80093e2 <__hexnan+0x132>
 8009332:	3102      	adds	r1, #2
 8009334:	f8ca 1000 	str.w	r1, [sl]
 8009338:	f1bb 0f00 	cmp.w	fp, #0
 800933c:	d051      	beq.n	80093e2 <__hexnan+0x132>
 800933e:	454c      	cmp	r4, r9
 8009340:	d206      	bcs.n	8009350 <__hexnan+0xa0>
 8009342:	2d07      	cmp	r5, #7
 8009344:	dc04      	bgt.n	8009350 <__hexnan+0xa0>
 8009346:	462a      	mov	r2, r5
 8009348:	4649      	mov	r1, r9
 800934a:	4620      	mov	r0, r4
 800934c:	f7ff ff8a 	bl	8009264 <L_shift>
 8009350:	4544      	cmp	r4, r8
 8009352:	d936      	bls.n	80093c2 <__hexnan+0x112>
 8009354:	f1a8 0204 	sub.w	r2, r8, #4
 8009358:	4623      	mov	r3, r4
 800935a:	f853 1b04 	ldr.w	r1, [r3], #4
 800935e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009362:	429f      	cmp	r7, r3
 8009364:	d2f9      	bcs.n	800935a <__hexnan+0xaa>
 8009366:	1b3b      	subs	r3, r7, r4
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	3304      	adds	r3, #4
 800936e:	3401      	adds	r4, #1
 8009370:	3e03      	subs	r6, #3
 8009372:	42b4      	cmp	r4, r6
 8009374:	bf88      	it	hi
 8009376:	2304      	movhi	r3, #4
 8009378:	4443      	add	r3, r8
 800937a:	2200      	movs	r2, #0
 800937c:	f843 2b04 	str.w	r2, [r3], #4
 8009380:	429f      	cmp	r7, r3
 8009382:	d2fb      	bcs.n	800937c <__hexnan+0xcc>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	b91b      	cbnz	r3, 8009390 <__hexnan+0xe0>
 8009388:	4547      	cmp	r7, r8
 800938a:	d128      	bne.n	80093de <__hexnan+0x12e>
 800938c:	2301      	movs	r3, #1
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	2005      	movs	r0, #5
 8009392:	b007      	add	sp, #28
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	3501      	adds	r5, #1
 800939a:	2d08      	cmp	r5, #8
 800939c:	f10b 0b01 	add.w	fp, fp, #1
 80093a0:	dd06      	ble.n	80093b0 <__hexnan+0x100>
 80093a2:	4544      	cmp	r4, r8
 80093a4:	d9c1      	bls.n	800932a <__hexnan+0x7a>
 80093a6:	2300      	movs	r3, #0
 80093a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80093ac:	2501      	movs	r5, #1
 80093ae:	3c04      	subs	r4, #4
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	f000 000f 	and.w	r0, r0, #15
 80093b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093ba:	6020      	str	r0, [r4, #0]
 80093bc:	e7b5      	b.n	800932a <__hexnan+0x7a>
 80093be:	2508      	movs	r5, #8
 80093c0:	e7b3      	b.n	800932a <__hexnan+0x7a>
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0dd      	beq.n	8009384 <__hexnan+0xd4>
 80093c8:	f1c3 0320 	rsb	r3, r3, #32
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	40da      	lsrs	r2, r3
 80093d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093d6:	4013      	ands	r3, r2
 80093d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80093dc:	e7d2      	b.n	8009384 <__hexnan+0xd4>
 80093de:	3f04      	subs	r7, #4
 80093e0:	e7d0      	b.n	8009384 <__hexnan+0xd4>
 80093e2:	2004      	movs	r0, #4
 80093e4:	e7d5      	b.n	8009392 <__hexnan+0xe2>
	...

080093e8 <malloc>:
 80093e8:	4b02      	ldr	r3, [pc, #8]	@ (80093f4 <malloc+0xc>)
 80093ea:	4601      	mov	r1, r0
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f000 b825 	b.w	800943c <_malloc_r>
 80093f2:	bf00      	nop
 80093f4:	20000188 	.word	0x20000188

080093f8 <sbrk_aligned>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4e0f      	ldr	r6, [pc, #60]	@ (8009438 <sbrk_aligned+0x40>)
 80093fc:	460c      	mov	r4, r1
 80093fe:	6831      	ldr	r1, [r6, #0]
 8009400:	4605      	mov	r5, r0
 8009402:	b911      	cbnz	r1, 800940a <sbrk_aligned+0x12>
 8009404:	f001 fcae 	bl	800ad64 <_sbrk_r>
 8009408:	6030      	str	r0, [r6, #0]
 800940a:	4621      	mov	r1, r4
 800940c:	4628      	mov	r0, r5
 800940e:	f001 fca9 	bl	800ad64 <_sbrk_r>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d103      	bne.n	800941e <sbrk_aligned+0x26>
 8009416:	f04f 34ff 	mov.w	r4, #4294967295
 800941a:	4620      	mov	r0, r4
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	1cc4      	adds	r4, r0, #3
 8009420:	f024 0403 	bic.w	r4, r4, #3
 8009424:	42a0      	cmp	r0, r4
 8009426:	d0f8      	beq.n	800941a <sbrk_aligned+0x22>
 8009428:	1a21      	subs	r1, r4, r0
 800942a:	4628      	mov	r0, r5
 800942c:	f001 fc9a 	bl	800ad64 <_sbrk_r>
 8009430:	3001      	adds	r0, #1
 8009432:	d1f2      	bne.n	800941a <sbrk_aligned+0x22>
 8009434:	e7ef      	b.n	8009416 <sbrk_aligned+0x1e>
 8009436:	bf00      	nop
 8009438:	2000054c 	.word	0x2000054c

0800943c <_malloc_r>:
 800943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009440:	1ccd      	adds	r5, r1, #3
 8009442:	f025 0503 	bic.w	r5, r5, #3
 8009446:	3508      	adds	r5, #8
 8009448:	2d0c      	cmp	r5, #12
 800944a:	bf38      	it	cc
 800944c:	250c      	movcc	r5, #12
 800944e:	2d00      	cmp	r5, #0
 8009450:	4606      	mov	r6, r0
 8009452:	db01      	blt.n	8009458 <_malloc_r+0x1c>
 8009454:	42a9      	cmp	r1, r5
 8009456:	d904      	bls.n	8009462 <_malloc_r+0x26>
 8009458:	230c      	movs	r3, #12
 800945a:	6033      	str	r3, [r6, #0]
 800945c:	2000      	movs	r0, #0
 800945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009538 <_malloc_r+0xfc>
 8009466:	f000 f87b 	bl	8009560 <__malloc_lock>
 800946a:	f8d8 3000 	ldr.w	r3, [r8]
 800946e:	461c      	mov	r4, r3
 8009470:	bb44      	cbnz	r4, 80094c4 <_malloc_r+0x88>
 8009472:	4629      	mov	r1, r5
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff ffbf 	bl	80093f8 <sbrk_aligned>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	4604      	mov	r4, r0
 800947e:	d158      	bne.n	8009532 <_malloc_r+0xf6>
 8009480:	f8d8 4000 	ldr.w	r4, [r8]
 8009484:	4627      	mov	r7, r4
 8009486:	2f00      	cmp	r7, #0
 8009488:	d143      	bne.n	8009512 <_malloc_r+0xd6>
 800948a:	2c00      	cmp	r4, #0
 800948c:	d04b      	beq.n	8009526 <_malloc_r+0xea>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	4639      	mov	r1, r7
 8009492:	4630      	mov	r0, r6
 8009494:	eb04 0903 	add.w	r9, r4, r3
 8009498:	f001 fc64 	bl	800ad64 <_sbrk_r>
 800949c:	4581      	cmp	r9, r0
 800949e:	d142      	bne.n	8009526 <_malloc_r+0xea>
 80094a0:	6821      	ldr	r1, [r4, #0]
 80094a2:	1a6d      	subs	r5, r5, r1
 80094a4:	4629      	mov	r1, r5
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff ffa6 	bl	80093f8 <sbrk_aligned>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d03a      	beq.n	8009526 <_malloc_r+0xea>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	442b      	add	r3, r5
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	bb62      	cbnz	r2, 8009518 <_malloc_r+0xdc>
 80094be:	f8c8 7000 	str.w	r7, [r8]
 80094c2:	e00f      	b.n	80094e4 <_malloc_r+0xa8>
 80094c4:	6822      	ldr	r2, [r4, #0]
 80094c6:	1b52      	subs	r2, r2, r5
 80094c8:	d420      	bmi.n	800950c <_malloc_r+0xd0>
 80094ca:	2a0b      	cmp	r2, #11
 80094cc:	d917      	bls.n	80094fe <_malloc_r+0xc2>
 80094ce:	1961      	adds	r1, r4, r5
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	6025      	str	r5, [r4, #0]
 80094d4:	bf18      	it	ne
 80094d6:	6059      	strne	r1, [r3, #4]
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	bf08      	it	eq
 80094dc:	f8c8 1000 	streq.w	r1, [r8]
 80094e0:	5162      	str	r2, [r4, r5]
 80094e2:	604b      	str	r3, [r1, #4]
 80094e4:	4630      	mov	r0, r6
 80094e6:	f000 f841 	bl	800956c <__malloc_unlock>
 80094ea:	f104 000b 	add.w	r0, r4, #11
 80094ee:	1d23      	adds	r3, r4, #4
 80094f0:	f020 0007 	bic.w	r0, r0, #7
 80094f4:	1ac2      	subs	r2, r0, r3
 80094f6:	bf1c      	itt	ne
 80094f8:	1a1b      	subne	r3, r3, r0
 80094fa:	50a3      	strne	r3, [r4, r2]
 80094fc:	e7af      	b.n	800945e <_malloc_r+0x22>
 80094fe:	6862      	ldr	r2, [r4, #4]
 8009500:	42a3      	cmp	r3, r4
 8009502:	bf0c      	ite	eq
 8009504:	f8c8 2000 	streq.w	r2, [r8]
 8009508:	605a      	strne	r2, [r3, #4]
 800950a:	e7eb      	b.n	80094e4 <_malloc_r+0xa8>
 800950c:	4623      	mov	r3, r4
 800950e:	6864      	ldr	r4, [r4, #4]
 8009510:	e7ae      	b.n	8009470 <_malloc_r+0x34>
 8009512:	463c      	mov	r4, r7
 8009514:	687f      	ldr	r7, [r7, #4]
 8009516:	e7b6      	b.n	8009486 <_malloc_r+0x4a>
 8009518:	461a      	mov	r2, r3
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	42a3      	cmp	r3, r4
 800951e:	d1fb      	bne.n	8009518 <_malloc_r+0xdc>
 8009520:	2300      	movs	r3, #0
 8009522:	6053      	str	r3, [r2, #4]
 8009524:	e7de      	b.n	80094e4 <_malloc_r+0xa8>
 8009526:	230c      	movs	r3, #12
 8009528:	6033      	str	r3, [r6, #0]
 800952a:	4630      	mov	r0, r6
 800952c:	f000 f81e 	bl	800956c <__malloc_unlock>
 8009530:	e794      	b.n	800945c <_malloc_r+0x20>
 8009532:	6005      	str	r5, [r0, #0]
 8009534:	e7d6      	b.n	80094e4 <_malloc_r+0xa8>
 8009536:	bf00      	nop
 8009538:	20000550 	.word	0x20000550

0800953c <__ascii_mbtowc>:
 800953c:	b082      	sub	sp, #8
 800953e:	b901      	cbnz	r1, 8009542 <__ascii_mbtowc+0x6>
 8009540:	a901      	add	r1, sp, #4
 8009542:	b142      	cbz	r2, 8009556 <__ascii_mbtowc+0x1a>
 8009544:	b14b      	cbz	r3, 800955a <__ascii_mbtowc+0x1e>
 8009546:	7813      	ldrb	r3, [r2, #0]
 8009548:	600b      	str	r3, [r1, #0]
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	1e10      	subs	r0, r2, #0
 800954e:	bf18      	it	ne
 8009550:	2001      	movne	r0, #1
 8009552:	b002      	add	sp, #8
 8009554:	4770      	bx	lr
 8009556:	4610      	mov	r0, r2
 8009558:	e7fb      	b.n	8009552 <__ascii_mbtowc+0x16>
 800955a:	f06f 0001 	mvn.w	r0, #1
 800955e:	e7f8      	b.n	8009552 <__ascii_mbtowc+0x16>

08009560 <__malloc_lock>:
 8009560:	4801      	ldr	r0, [pc, #4]	@ (8009568 <__malloc_lock+0x8>)
 8009562:	f7ff bb88 	b.w	8008c76 <__retarget_lock_acquire_recursive>
 8009566:	bf00      	nop
 8009568:	20000548 	.word	0x20000548

0800956c <__malloc_unlock>:
 800956c:	4801      	ldr	r0, [pc, #4]	@ (8009574 <__malloc_unlock+0x8>)
 800956e:	f7ff bb83 	b.w	8008c78 <__retarget_lock_release_recursive>
 8009572:	bf00      	nop
 8009574:	20000548 	.word	0x20000548

08009578 <_Balloc>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	69c6      	ldr	r6, [r0, #28]
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	b976      	cbnz	r6, 80095a0 <_Balloc+0x28>
 8009582:	2010      	movs	r0, #16
 8009584:	f7ff ff30 	bl	80093e8 <malloc>
 8009588:	4602      	mov	r2, r0
 800958a:	61e0      	str	r0, [r4, #28]
 800958c:	b920      	cbnz	r0, 8009598 <_Balloc+0x20>
 800958e:	4b18      	ldr	r3, [pc, #96]	@ (80095f0 <_Balloc+0x78>)
 8009590:	4818      	ldr	r0, [pc, #96]	@ (80095f4 <_Balloc+0x7c>)
 8009592:	216b      	movs	r1, #107	@ 0x6b
 8009594:	f7ff fb86 	bl	8008ca4 <__assert_func>
 8009598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800959c:	6006      	str	r6, [r0, #0]
 800959e:	60c6      	str	r6, [r0, #12]
 80095a0:	69e6      	ldr	r6, [r4, #28]
 80095a2:	68f3      	ldr	r3, [r6, #12]
 80095a4:	b183      	cbz	r3, 80095c8 <_Balloc+0x50>
 80095a6:	69e3      	ldr	r3, [r4, #28]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ae:	b9b8      	cbnz	r0, 80095e0 <_Balloc+0x68>
 80095b0:	2101      	movs	r1, #1
 80095b2:	fa01 f605 	lsl.w	r6, r1, r5
 80095b6:	1d72      	adds	r2, r6, #5
 80095b8:	0092      	lsls	r2, r2, #2
 80095ba:	4620      	mov	r0, r4
 80095bc:	f001 fbe9 	bl	800ad92 <_calloc_r>
 80095c0:	b160      	cbz	r0, 80095dc <_Balloc+0x64>
 80095c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095c6:	e00e      	b.n	80095e6 <_Balloc+0x6e>
 80095c8:	2221      	movs	r2, #33	@ 0x21
 80095ca:	2104      	movs	r1, #4
 80095cc:	4620      	mov	r0, r4
 80095ce:	f001 fbe0 	bl	800ad92 <_calloc_r>
 80095d2:	69e3      	ldr	r3, [r4, #28]
 80095d4:	60f0      	str	r0, [r6, #12]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e4      	bne.n	80095a6 <_Balloc+0x2e>
 80095dc:	2000      	movs	r0, #0
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	6802      	ldr	r2, [r0, #0]
 80095e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095e6:	2300      	movs	r3, #0
 80095e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095ec:	e7f7      	b.n	80095de <_Balloc+0x66>
 80095ee:	bf00      	nop
 80095f0:	0800b578 	.word	0x0800b578
 80095f4:	0800b6aa 	.word	0x0800b6aa

080095f8 <_Bfree>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	69c6      	ldr	r6, [r0, #28]
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	b976      	cbnz	r6, 8009620 <_Bfree+0x28>
 8009602:	2010      	movs	r0, #16
 8009604:	f7ff fef0 	bl	80093e8 <malloc>
 8009608:	4602      	mov	r2, r0
 800960a:	61e8      	str	r0, [r5, #28]
 800960c:	b920      	cbnz	r0, 8009618 <_Bfree+0x20>
 800960e:	4b09      	ldr	r3, [pc, #36]	@ (8009634 <_Bfree+0x3c>)
 8009610:	4809      	ldr	r0, [pc, #36]	@ (8009638 <_Bfree+0x40>)
 8009612:	218f      	movs	r1, #143	@ 0x8f
 8009614:	f7ff fb46 	bl	8008ca4 <__assert_func>
 8009618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800961c:	6006      	str	r6, [r0, #0]
 800961e:	60c6      	str	r6, [r0, #12]
 8009620:	b13c      	cbz	r4, 8009632 <_Bfree+0x3a>
 8009622:	69eb      	ldr	r3, [r5, #28]
 8009624:	6862      	ldr	r2, [r4, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800962c:	6021      	str	r1, [r4, #0]
 800962e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	0800b578 	.word	0x0800b578
 8009638:	0800b6aa 	.word	0x0800b6aa

0800963c <__multadd>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	690d      	ldr	r5, [r1, #16]
 8009642:	4607      	mov	r7, r0
 8009644:	460c      	mov	r4, r1
 8009646:	461e      	mov	r6, r3
 8009648:	f101 0c14 	add.w	ip, r1, #20
 800964c:	2000      	movs	r0, #0
 800964e:	f8dc 3000 	ldr.w	r3, [ip]
 8009652:	b299      	uxth	r1, r3
 8009654:	fb02 6101 	mla	r1, r2, r1, r6
 8009658:	0c1e      	lsrs	r6, r3, #16
 800965a:	0c0b      	lsrs	r3, r1, #16
 800965c:	fb02 3306 	mla	r3, r2, r6, r3
 8009660:	b289      	uxth	r1, r1
 8009662:	3001      	adds	r0, #1
 8009664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009668:	4285      	cmp	r5, r0
 800966a:	f84c 1b04 	str.w	r1, [ip], #4
 800966e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009672:	dcec      	bgt.n	800964e <__multadd+0x12>
 8009674:	b30e      	cbz	r6, 80096ba <__multadd+0x7e>
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc19      	bgt.n	80096b0 <__multadd+0x74>
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	4638      	mov	r0, r7
 8009680:	3101      	adds	r1, #1
 8009682:	f7ff ff79 	bl	8009578 <_Balloc>
 8009686:	4680      	mov	r8, r0
 8009688:	b928      	cbnz	r0, 8009696 <__multadd+0x5a>
 800968a:	4602      	mov	r2, r0
 800968c:	4b0c      	ldr	r3, [pc, #48]	@ (80096c0 <__multadd+0x84>)
 800968e:	480d      	ldr	r0, [pc, #52]	@ (80096c4 <__multadd+0x88>)
 8009690:	21ba      	movs	r1, #186	@ 0xba
 8009692:	f7ff fb07 	bl	8008ca4 <__assert_func>
 8009696:	6922      	ldr	r2, [r4, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	f104 010c 	add.w	r1, r4, #12
 800969e:	0092      	lsls	r2, r2, #2
 80096a0:	300c      	adds	r0, #12
 80096a2:	f7ff faea 	bl	8008c7a <memcpy>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4638      	mov	r0, r7
 80096aa:	f7ff ffa5 	bl	80095f8 <_Bfree>
 80096ae:	4644      	mov	r4, r8
 80096b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096b4:	3501      	adds	r5, #1
 80096b6:	615e      	str	r6, [r3, #20]
 80096b8:	6125      	str	r5, [r4, #16]
 80096ba:	4620      	mov	r0, r4
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c0:	0800b639 	.word	0x0800b639
 80096c4:	0800b6aa 	.word	0x0800b6aa

080096c8 <__s2b>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	460c      	mov	r4, r1
 80096ce:	4615      	mov	r5, r2
 80096d0:	461f      	mov	r7, r3
 80096d2:	2209      	movs	r2, #9
 80096d4:	3308      	adds	r3, #8
 80096d6:	4606      	mov	r6, r0
 80096d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096dc:	2100      	movs	r1, #0
 80096de:	2201      	movs	r2, #1
 80096e0:	429a      	cmp	r2, r3
 80096e2:	db09      	blt.n	80096f8 <__s2b+0x30>
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7ff ff47 	bl	8009578 <_Balloc>
 80096ea:	b940      	cbnz	r0, 80096fe <__s2b+0x36>
 80096ec:	4602      	mov	r2, r0
 80096ee:	4b19      	ldr	r3, [pc, #100]	@ (8009754 <__s2b+0x8c>)
 80096f0:	4819      	ldr	r0, [pc, #100]	@ (8009758 <__s2b+0x90>)
 80096f2:	21d3      	movs	r1, #211	@ 0xd3
 80096f4:	f7ff fad6 	bl	8008ca4 <__assert_func>
 80096f8:	0052      	lsls	r2, r2, #1
 80096fa:	3101      	adds	r1, #1
 80096fc:	e7f0      	b.n	80096e0 <__s2b+0x18>
 80096fe:	9b08      	ldr	r3, [sp, #32]
 8009700:	6143      	str	r3, [r0, #20]
 8009702:	2d09      	cmp	r5, #9
 8009704:	f04f 0301 	mov.w	r3, #1
 8009708:	6103      	str	r3, [r0, #16]
 800970a:	dd16      	ble.n	800973a <__s2b+0x72>
 800970c:	f104 0909 	add.w	r9, r4, #9
 8009710:	46c8      	mov	r8, r9
 8009712:	442c      	add	r4, r5
 8009714:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009718:	4601      	mov	r1, r0
 800971a:	3b30      	subs	r3, #48	@ 0x30
 800971c:	220a      	movs	r2, #10
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ff8c 	bl	800963c <__multadd>
 8009724:	45a0      	cmp	r8, r4
 8009726:	d1f5      	bne.n	8009714 <__s2b+0x4c>
 8009728:	f1a5 0408 	sub.w	r4, r5, #8
 800972c:	444c      	add	r4, r9
 800972e:	1b2d      	subs	r5, r5, r4
 8009730:	1963      	adds	r3, r4, r5
 8009732:	42bb      	cmp	r3, r7
 8009734:	db04      	blt.n	8009740 <__s2b+0x78>
 8009736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800973a:	340a      	adds	r4, #10
 800973c:	2509      	movs	r5, #9
 800973e:	e7f6      	b.n	800972e <__s2b+0x66>
 8009740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009744:	4601      	mov	r1, r0
 8009746:	3b30      	subs	r3, #48	@ 0x30
 8009748:	220a      	movs	r2, #10
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ff76 	bl	800963c <__multadd>
 8009750:	e7ee      	b.n	8009730 <__s2b+0x68>
 8009752:	bf00      	nop
 8009754:	0800b639 	.word	0x0800b639
 8009758:	0800b6aa 	.word	0x0800b6aa

0800975c <__hi0bits>:
 800975c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009760:	4603      	mov	r3, r0
 8009762:	bf36      	itet	cc
 8009764:	0403      	lslcc	r3, r0, #16
 8009766:	2000      	movcs	r0, #0
 8009768:	2010      	movcc	r0, #16
 800976a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800976e:	bf3c      	itt	cc
 8009770:	021b      	lslcc	r3, r3, #8
 8009772:	3008      	addcc	r0, #8
 8009774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009778:	bf3c      	itt	cc
 800977a:	011b      	lslcc	r3, r3, #4
 800977c:	3004      	addcc	r0, #4
 800977e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009782:	bf3c      	itt	cc
 8009784:	009b      	lslcc	r3, r3, #2
 8009786:	3002      	addcc	r0, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	db05      	blt.n	8009798 <__hi0bits+0x3c>
 800978c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009790:	f100 0001 	add.w	r0, r0, #1
 8009794:	bf08      	it	eq
 8009796:	2020      	moveq	r0, #32
 8009798:	4770      	bx	lr

0800979a <__lo0bits>:
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	4602      	mov	r2, r0
 800979e:	f013 0007 	ands.w	r0, r3, #7
 80097a2:	d00b      	beq.n	80097bc <__lo0bits+0x22>
 80097a4:	07d9      	lsls	r1, r3, #31
 80097a6:	d421      	bmi.n	80097ec <__lo0bits+0x52>
 80097a8:	0798      	lsls	r0, r3, #30
 80097aa:	bf49      	itett	mi
 80097ac:	085b      	lsrmi	r3, r3, #1
 80097ae:	089b      	lsrpl	r3, r3, #2
 80097b0:	2001      	movmi	r0, #1
 80097b2:	6013      	strmi	r3, [r2, #0]
 80097b4:	bf5c      	itt	pl
 80097b6:	6013      	strpl	r3, [r2, #0]
 80097b8:	2002      	movpl	r0, #2
 80097ba:	4770      	bx	lr
 80097bc:	b299      	uxth	r1, r3
 80097be:	b909      	cbnz	r1, 80097c4 <__lo0bits+0x2a>
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	2010      	movs	r0, #16
 80097c4:	b2d9      	uxtb	r1, r3
 80097c6:	b909      	cbnz	r1, 80097cc <__lo0bits+0x32>
 80097c8:	3008      	adds	r0, #8
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	0719      	lsls	r1, r3, #28
 80097ce:	bf04      	itt	eq
 80097d0:	091b      	lsreq	r3, r3, #4
 80097d2:	3004      	addeq	r0, #4
 80097d4:	0799      	lsls	r1, r3, #30
 80097d6:	bf04      	itt	eq
 80097d8:	089b      	lsreq	r3, r3, #2
 80097da:	3002      	addeq	r0, #2
 80097dc:	07d9      	lsls	r1, r3, #31
 80097de:	d403      	bmi.n	80097e8 <__lo0bits+0x4e>
 80097e0:	085b      	lsrs	r3, r3, #1
 80097e2:	f100 0001 	add.w	r0, r0, #1
 80097e6:	d003      	beq.n	80097f0 <__lo0bits+0x56>
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	4770      	bx	lr
 80097ec:	2000      	movs	r0, #0
 80097ee:	4770      	bx	lr
 80097f0:	2020      	movs	r0, #32
 80097f2:	4770      	bx	lr

080097f4 <__i2b>:
 80097f4:	b510      	push	{r4, lr}
 80097f6:	460c      	mov	r4, r1
 80097f8:	2101      	movs	r1, #1
 80097fa:	f7ff febd 	bl	8009578 <_Balloc>
 80097fe:	4602      	mov	r2, r0
 8009800:	b928      	cbnz	r0, 800980e <__i2b+0x1a>
 8009802:	4b05      	ldr	r3, [pc, #20]	@ (8009818 <__i2b+0x24>)
 8009804:	4805      	ldr	r0, [pc, #20]	@ (800981c <__i2b+0x28>)
 8009806:	f240 1145 	movw	r1, #325	@ 0x145
 800980a:	f7ff fa4b 	bl	8008ca4 <__assert_func>
 800980e:	2301      	movs	r3, #1
 8009810:	6144      	str	r4, [r0, #20]
 8009812:	6103      	str	r3, [r0, #16]
 8009814:	bd10      	pop	{r4, pc}
 8009816:	bf00      	nop
 8009818:	0800b639 	.word	0x0800b639
 800981c:	0800b6aa 	.word	0x0800b6aa

08009820 <__multiply>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	4617      	mov	r7, r2
 8009826:	690a      	ldr	r2, [r1, #16]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	429a      	cmp	r2, r3
 800982c:	bfa8      	it	ge
 800982e:	463b      	movge	r3, r7
 8009830:	4689      	mov	r9, r1
 8009832:	bfa4      	itt	ge
 8009834:	460f      	movge	r7, r1
 8009836:	4699      	movge	r9, r3
 8009838:	693d      	ldr	r5, [r7, #16]
 800983a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	eb05 060a 	add.w	r6, r5, sl
 8009846:	42b3      	cmp	r3, r6
 8009848:	b085      	sub	sp, #20
 800984a:	bfb8      	it	lt
 800984c:	3101      	addlt	r1, #1
 800984e:	f7ff fe93 	bl	8009578 <_Balloc>
 8009852:	b930      	cbnz	r0, 8009862 <__multiply+0x42>
 8009854:	4602      	mov	r2, r0
 8009856:	4b41      	ldr	r3, [pc, #260]	@ (800995c <__multiply+0x13c>)
 8009858:	4841      	ldr	r0, [pc, #260]	@ (8009960 <__multiply+0x140>)
 800985a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800985e:	f7ff fa21 	bl	8008ca4 <__assert_func>
 8009862:	f100 0414 	add.w	r4, r0, #20
 8009866:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800986a:	4623      	mov	r3, r4
 800986c:	2200      	movs	r2, #0
 800986e:	4573      	cmp	r3, lr
 8009870:	d320      	bcc.n	80098b4 <__multiply+0x94>
 8009872:	f107 0814 	add.w	r8, r7, #20
 8009876:	f109 0114 	add.w	r1, r9, #20
 800987a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800987e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	1beb      	subs	r3, r5, r7
 8009886:	3b15      	subs	r3, #21
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	3304      	adds	r3, #4
 800988e:	3715      	adds	r7, #21
 8009890:	42bd      	cmp	r5, r7
 8009892:	bf38      	it	cc
 8009894:	2304      	movcc	r3, #4
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	9103      	str	r1, [sp, #12]
 800989c:	428b      	cmp	r3, r1
 800989e:	d80c      	bhi.n	80098ba <__multiply+0x9a>
 80098a0:	2e00      	cmp	r6, #0
 80098a2:	dd03      	ble.n	80098ac <__multiply+0x8c>
 80098a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d055      	beq.n	8009958 <__multiply+0x138>
 80098ac:	6106      	str	r6, [r0, #16]
 80098ae:	b005      	add	sp, #20
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	f843 2b04 	str.w	r2, [r3], #4
 80098b8:	e7d9      	b.n	800986e <__multiply+0x4e>
 80098ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80098be:	f1ba 0f00 	cmp.w	sl, #0
 80098c2:	d01f      	beq.n	8009904 <__multiply+0xe4>
 80098c4:	46c4      	mov	ip, r8
 80098c6:	46a1      	mov	r9, r4
 80098c8:	2700      	movs	r7, #0
 80098ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098ce:	f8d9 3000 	ldr.w	r3, [r9]
 80098d2:	fa1f fb82 	uxth.w	fp, r2
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80098dc:	443b      	add	r3, r7
 80098de:	f8d9 7000 	ldr.w	r7, [r9]
 80098e2:	0c12      	lsrs	r2, r2, #16
 80098e4:	0c3f      	lsrs	r7, r7, #16
 80098e6:	fb0a 7202 	mla	r2, sl, r2, r7
 80098ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098f4:	4565      	cmp	r5, ip
 80098f6:	f849 3b04 	str.w	r3, [r9], #4
 80098fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80098fe:	d8e4      	bhi.n	80098ca <__multiply+0xaa>
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	50e7      	str	r7, [r4, r3]
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800990a:	3104      	adds	r1, #4
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	d020      	beq.n	8009954 <__multiply+0x134>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	4647      	mov	r7, r8
 8009916:	46a4      	mov	ip, r4
 8009918:	f04f 0a00 	mov.w	sl, #0
 800991c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009920:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009924:	fb09 220b 	mla	r2, r9, fp, r2
 8009928:	4452      	add	r2, sl
 800992a:	b29b      	uxth	r3, r3
 800992c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009930:	f84c 3b04 	str.w	r3, [ip], #4
 8009934:	f857 3b04 	ldr.w	r3, [r7], #4
 8009938:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800993c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009940:	fb09 330a 	mla	r3, r9, sl, r3
 8009944:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009948:	42bd      	cmp	r5, r7
 800994a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800994e:	d8e5      	bhi.n	800991c <__multiply+0xfc>
 8009950:	9a01      	ldr	r2, [sp, #4]
 8009952:	50a3      	str	r3, [r4, r2]
 8009954:	3404      	adds	r4, #4
 8009956:	e79f      	b.n	8009898 <__multiply+0x78>
 8009958:	3e01      	subs	r6, #1
 800995a:	e7a1      	b.n	80098a0 <__multiply+0x80>
 800995c:	0800b639 	.word	0x0800b639
 8009960:	0800b6aa 	.word	0x0800b6aa

08009964 <__pow5mult>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4615      	mov	r5, r2
 800996a:	f012 0203 	ands.w	r2, r2, #3
 800996e:	4607      	mov	r7, r0
 8009970:	460e      	mov	r6, r1
 8009972:	d007      	beq.n	8009984 <__pow5mult+0x20>
 8009974:	4c25      	ldr	r4, [pc, #148]	@ (8009a0c <__pow5mult+0xa8>)
 8009976:	3a01      	subs	r2, #1
 8009978:	2300      	movs	r3, #0
 800997a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800997e:	f7ff fe5d 	bl	800963c <__multadd>
 8009982:	4606      	mov	r6, r0
 8009984:	10ad      	asrs	r5, r5, #2
 8009986:	d03d      	beq.n	8009a04 <__pow5mult+0xa0>
 8009988:	69fc      	ldr	r4, [r7, #28]
 800998a:	b97c      	cbnz	r4, 80099ac <__pow5mult+0x48>
 800998c:	2010      	movs	r0, #16
 800998e:	f7ff fd2b 	bl	80093e8 <malloc>
 8009992:	4602      	mov	r2, r0
 8009994:	61f8      	str	r0, [r7, #28]
 8009996:	b928      	cbnz	r0, 80099a4 <__pow5mult+0x40>
 8009998:	4b1d      	ldr	r3, [pc, #116]	@ (8009a10 <__pow5mult+0xac>)
 800999a:	481e      	ldr	r0, [pc, #120]	@ (8009a14 <__pow5mult+0xb0>)
 800999c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099a0:	f7ff f980 	bl	8008ca4 <__assert_func>
 80099a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099a8:	6004      	str	r4, [r0, #0]
 80099aa:	60c4      	str	r4, [r0, #12]
 80099ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099b4:	b94c      	cbnz	r4, 80099ca <__pow5mult+0x66>
 80099b6:	f240 2171 	movw	r1, #625	@ 0x271
 80099ba:	4638      	mov	r0, r7
 80099bc:	f7ff ff1a 	bl	80097f4 <__i2b>
 80099c0:	2300      	movs	r3, #0
 80099c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80099c6:	4604      	mov	r4, r0
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	f04f 0900 	mov.w	r9, #0
 80099ce:	07eb      	lsls	r3, r5, #31
 80099d0:	d50a      	bpl.n	80099e8 <__pow5mult+0x84>
 80099d2:	4631      	mov	r1, r6
 80099d4:	4622      	mov	r2, r4
 80099d6:	4638      	mov	r0, r7
 80099d8:	f7ff ff22 	bl	8009820 <__multiply>
 80099dc:	4631      	mov	r1, r6
 80099de:	4680      	mov	r8, r0
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7ff fe09 	bl	80095f8 <_Bfree>
 80099e6:	4646      	mov	r6, r8
 80099e8:	106d      	asrs	r5, r5, #1
 80099ea:	d00b      	beq.n	8009a04 <__pow5mult+0xa0>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	b938      	cbnz	r0, 8009a00 <__pow5mult+0x9c>
 80099f0:	4622      	mov	r2, r4
 80099f2:	4621      	mov	r1, r4
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff ff13 	bl	8009820 <__multiply>
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	f8c0 9000 	str.w	r9, [r0]
 8009a00:	4604      	mov	r4, r0
 8009a02:	e7e4      	b.n	80099ce <__pow5mult+0x6a>
 8009a04:	4630      	mov	r0, r6
 8009a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800b8ac 	.word	0x0800b8ac
 8009a10:	0800b578 	.word	0x0800b578
 8009a14:	0800b6aa 	.word	0x0800b6aa

08009a18 <__lshift>:
 8009a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	6849      	ldr	r1, [r1, #4]
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a26:	68a3      	ldr	r3, [r4, #8]
 8009a28:	4607      	mov	r7, r0
 8009a2a:	4691      	mov	r9, r2
 8009a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a30:	f108 0601 	add.w	r6, r8, #1
 8009a34:	42b3      	cmp	r3, r6
 8009a36:	db0b      	blt.n	8009a50 <__lshift+0x38>
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f7ff fd9d 	bl	8009578 <_Balloc>
 8009a3e:	4605      	mov	r5, r0
 8009a40:	b948      	cbnz	r0, 8009a56 <__lshift+0x3e>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b28      	ldr	r3, [pc, #160]	@ (8009ae8 <__lshift+0xd0>)
 8009a46:	4829      	ldr	r0, [pc, #164]	@ (8009aec <__lshift+0xd4>)
 8009a48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a4c:	f7ff f92a 	bl	8008ca4 <__assert_func>
 8009a50:	3101      	adds	r1, #1
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	e7ee      	b.n	8009a34 <__lshift+0x1c>
 8009a56:	2300      	movs	r3, #0
 8009a58:	f100 0114 	add.w	r1, r0, #20
 8009a5c:	f100 0210 	add.w	r2, r0, #16
 8009a60:	4618      	mov	r0, r3
 8009a62:	4553      	cmp	r3, sl
 8009a64:	db33      	blt.n	8009ace <__lshift+0xb6>
 8009a66:	6920      	ldr	r0, [r4, #16]
 8009a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a6c:	f104 0314 	add.w	r3, r4, #20
 8009a70:	f019 091f 	ands.w	r9, r9, #31
 8009a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a7c:	d02b      	beq.n	8009ad6 <__lshift+0xbe>
 8009a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8009a82:	468a      	mov	sl, r1
 8009a84:	2200      	movs	r2, #0
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	fa00 f009 	lsl.w	r0, r0, r9
 8009a8c:	4310      	orrs	r0, r2
 8009a8e:	f84a 0b04 	str.w	r0, [sl], #4
 8009a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a96:	459c      	cmp	ip, r3
 8009a98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a9c:	d8f3      	bhi.n	8009a86 <__lshift+0x6e>
 8009a9e:	ebac 0304 	sub.w	r3, ip, r4
 8009aa2:	3b15      	subs	r3, #21
 8009aa4:	f023 0303 	bic.w	r3, r3, #3
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	f104 0015 	add.w	r0, r4, #21
 8009aae:	4560      	cmp	r0, ip
 8009ab0:	bf88      	it	hi
 8009ab2:	2304      	movhi	r3, #4
 8009ab4:	50ca      	str	r2, [r1, r3]
 8009ab6:	b10a      	cbz	r2, 8009abc <__lshift+0xa4>
 8009ab8:	f108 0602 	add.w	r6, r8, #2
 8009abc:	3e01      	subs	r6, #1
 8009abe:	4638      	mov	r0, r7
 8009ac0:	612e      	str	r6, [r5, #16]
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	f7ff fd98 	bl	80095f8 <_Bfree>
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	e7c5      	b.n	8009a62 <__lshift+0x4a>
 8009ad6:	3904      	subs	r1, #4
 8009ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009adc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ae0:	459c      	cmp	ip, r3
 8009ae2:	d8f9      	bhi.n	8009ad8 <__lshift+0xc0>
 8009ae4:	e7ea      	b.n	8009abc <__lshift+0xa4>
 8009ae6:	bf00      	nop
 8009ae8:	0800b639 	.word	0x0800b639
 8009aec:	0800b6aa 	.word	0x0800b6aa

08009af0 <__mcmp>:
 8009af0:	690a      	ldr	r2, [r1, #16]
 8009af2:	4603      	mov	r3, r0
 8009af4:	6900      	ldr	r0, [r0, #16]
 8009af6:	1a80      	subs	r0, r0, r2
 8009af8:	b530      	push	{r4, r5, lr}
 8009afa:	d10e      	bne.n	8009b1a <__mcmp+0x2a>
 8009afc:	3314      	adds	r3, #20
 8009afe:	3114      	adds	r1, #20
 8009b00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b10:	4295      	cmp	r5, r2
 8009b12:	d003      	beq.n	8009b1c <__mcmp+0x2c>
 8009b14:	d205      	bcs.n	8009b22 <__mcmp+0x32>
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1a:	bd30      	pop	{r4, r5, pc}
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	d3f3      	bcc.n	8009b08 <__mcmp+0x18>
 8009b20:	e7fb      	b.n	8009b1a <__mcmp+0x2a>
 8009b22:	2001      	movs	r0, #1
 8009b24:	e7f9      	b.n	8009b1a <__mcmp+0x2a>
	...

08009b28 <__mdiff>:
 8009b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	4606      	mov	r6, r0
 8009b30:	4611      	mov	r1, r2
 8009b32:	4648      	mov	r0, r9
 8009b34:	4614      	mov	r4, r2
 8009b36:	f7ff ffdb 	bl	8009af0 <__mcmp>
 8009b3a:	1e05      	subs	r5, r0, #0
 8009b3c:	d112      	bne.n	8009b64 <__mdiff+0x3c>
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff fd19 	bl	8009578 <_Balloc>
 8009b46:	4602      	mov	r2, r0
 8009b48:	b928      	cbnz	r0, 8009b56 <__mdiff+0x2e>
 8009b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c44 <__mdiff+0x11c>)
 8009b4c:	f240 2137 	movw	r1, #567	@ 0x237
 8009b50:	483d      	ldr	r0, [pc, #244]	@ (8009c48 <__mdiff+0x120>)
 8009b52:	f7ff f8a7 	bl	8008ca4 <__assert_func>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	b003      	add	sp, #12
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	bfbc      	itt	lt
 8009b66:	464b      	movlt	r3, r9
 8009b68:	46a1      	movlt	r9, r4
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b70:	bfba      	itte	lt
 8009b72:	461c      	movlt	r4, r3
 8009b74:	2501      	movlt	r5, #1
 8009b76:	2500      	movge	r5, #0
 8009b78:	f7ff fcfe 	bl	8009578 <_Balloc>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	b918      	cbnz	r0, 8009b88 <__mdiff+0x60>
 8009b80:	4b30      	ldr	r3, [pc, #192]	@ (8009c44 <__mdiff+0x11c>)
 8009b82:	f240 2145 	movw	r1, #581	@ 0x245
 8009b86:	e7e3      	b.n	8009b50 <__mdiff+0x28>
 8009b88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b8c:	6926      	ldr	r6, [r4, #16]
 8009b8e:	60c5      	str	r5, [r0, #12]
 8009b90:	f109 0310 	add.w	r3, r9, #16
 8009b94:	f109 0514 	add.w	r5, r9, #20
 8009b98:	f104 0e14 	add.w	lr, r4, #20
 8009b9c:	f100 0b14 	add.w	fp, r0, #20
 8009ba0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ba4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	46d9      	mov	r9, fp
 8009bac:	f04f 0c00 	mov.w	ip, #0
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	b281      	uxth	r1, r0
 8009bbe:	fa1f f38a 	uxth.w	r3, sl
 8009bc2:	1a5b      	subs	r3, r3, r1
 8009bc4:	0c00      	lsrs	r0, r0, #16
 8009bc6:	4463      	add	r3, ip
 8009bc8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bcc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009bd6:	4576      	cmp	r6, lr
 8009bd8:	f849 3b04 	str.w	r3, [r9], #4
 8009bdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009be0:	d8e6      	bhi.n	8009bb0 <__mdiff+0x88>
 8009be2:	1b33      	subs	r3, r6, r4
 8009be4:	3b15      	subs	r3, #21
 8009be6:	f023 0303 	bic.w	r3, r3, #3
 8009bea:	3415      	adds	r4, #21
 8009bec:	3304      	adds	r3, #4
 8009bee:	42a6      	cmp	r6, r4
 8009bf0:	bf38      	it	cc
 8009bf2:	2304      	movcc	r3, #4
 8009bf4:	441d      	add	r5, r3
 8009bf6:	445b      	add	r3, fp
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	462c      	mov	r4, r5
 8009bfc:	4544      	cmp	r4, r8
 8009bfe:	d30e      	bcc.n	8009c1e <__mdiff+0xf6>
 8009c00:	f108 0103 	add.w	r1, r8, #3
 8009c04:	1b49      	subs	r1, r1, r5
 8009c06:	f021 0103 	bic.w	r1, r1, #3
 8009c0a:	3d03      	subs	r5, #3
 8009c0c:	45a8      	cmp	r8, r5
 8009c0e:	bf38      	it	cc
 8009c10:	2100      	movcc	r1, #0
 8009c12:	440b      	add	r3, r1
 8009c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c18:	b191      	cbz	r1, 8009c40 <__mdiff+0x118>
 8009c1a:	6117      	str	r7, [r2, #16]
 8009c1c:	e79e      	b.n	8009b5c <__mdiff+0x34>
 8009c1e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c22:	46e6      	mov	lr, ip
 8009c24:	0c08      	lsrs	r0, r1, #16
 8009c26:	fa1c fc81 	uxtah	ip, ip, r1
 8009c2a:	4471      	add	r1, lr
 8009c2c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c30:	b289      	uxth	r1, r1
 8009c32:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c36:	f846 1b04 	str.w	r1, [r6], #4
 8009c3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c3e:	e7dd      	b.n	8009bfc <__mdiff+0xd4>
 8009c40:	3f01      	subs	r7, #1
 8009c42:	e7e7      	b.n	8009c14 <__mdiff+0xec>
 8009c44:	0800b639 	.word	0x0800b639
 8009c48:	0800b6aa 	.word	0x0800b6aa

08009c4c <__ulp>:
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c88 <__ulp+0x3c>)
 8009c4e:	400b      	ands	r3, r1
 8009c50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dc08      	bgt.n	8009c6a <__ulp+0x1e>
 8009c58:	425b      	negs	r3, r3
 8009c5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c62:	da04      	bge.n	8009c6e <__ulp+0x22>
 8009c64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c68:	4113      	asrs	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	e008      	b.n	8009c80 <__ulp+0x34>
 8009c6e:	f1a2 0314 	sub.w	r3, r2, #20
 8009c72:	2b1e      	cmp	r3, #30
 8009c74:	bfda      	itte	le
 8009c76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009c7a:	40da      	lsrle	r2, r3
 8009c7c:	2201      	movgt	r2, #1
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	7ff00000 	.word	0x7ff00000

08009c8c <__b2d>:
 8009c8c:	6902      	ldr	r2, [r0, #16]
 8009c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c90:	f100 0614 	add.w	r6, r0, #20
 8009c94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009c98:	4f20      	ldr	r7, [pc, #128]	@ (8009d1c <__b2d+0x90>)
 8009c9a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff fd5c 	bl	800975c <__hi0bits>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b0a      	cmp	r3, #10
 8009ca8:	f1c0 0020 	rsb	r0, r0, #32
 8009cac:	f1a2 0504 	sub.w	r5, r2, #4
 8009cb0:	6008      	str	r0, [r1, #0]
 8009cb2:	dc13      	bgt.n	8009cdc <__b2d+0x50>
 8009cb4:	42ae      	cmp	r6, r5
 8009cb6:	bf38      	it	cc
 8009cb8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009cbc:	f1c3 0c0b 	rsb	ip, r3, #11
 8009cc0:	bf28      	it	cs
 8009cc2:	2200      	movcs	r2, #0
 8009cc4:	3315      	adds	r3, #21
 8009cc6:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009cca:	fa04 f303 	lsl.w	r3, r4, r3
 8009cce:	fa22 f20c 	lsr.w	r2, r2, ip
 8009cd2:	ea4e 0107 	orr.w	r1, lr, r7
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	4610      	mov	r0, r2
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cdc:	42ae      	cmp	r6, r5
 8009cde:	bf36      	itet	cc
 8009ce0:	f1a2 0508 	subcc.w	r5, r2, #8
 8009ce4:	2200      	movcs	r2, #0
 8009ce6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009cea:	3b0b      	subs	r3, #11
 8009cec:	d012      	beq.n	8009d14 <__b2d+0x88>
 8009cee:	f1c3 0720 	rsb	r7, r3, #32
 8009cf2:	fa22 f107 	lsr.w	r1, r2, r7
 8009cf6:	409c      	lsls	r4, r3
 8009cf8:	430c      	orrs	r4, r1
 8009cfa:	42b5      	cmp	r5, r6
 8009cfc:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009d00:	bf8c      	ite	hi
 8009d02:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009d06:	2400      	movls	r4, #0
 8009d08:	409a      	lsls	r2, r3
 8009d0a:	40fc      	lsrs	r4, r7
 8009d0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009d10:	4322      	orrs	r2, r4
 8009d12:	e7e1      	b.n	8009cd8 <__b2d+0x4c>
 8009d14:	ea44 0107 	orr.w	r1, r4, r7
 8009d18:	e7de      	b.n	8009cd8 <__b2d+0x4c>
 8009d1a:	bf00      	nop
 8009d1c:	3ff00000 	.word	0x3ff00000

08009d20 <__d2b>:
 8009d20:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d24:	2101      	movs	r1, #1
 8009d26:	9e08      	ldr	r6, [sp, #32]
 8009d28:	4690      	mov	r8, r2
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	f7ff fc24 	bl	8009578 <_Balloc>
 8009d30:	4604      	mov	r4, r0
 8009d32:	b930      	cbnz	r0, 8009d42 <__d2b+0x22>
 8009d34:	4602      	mov	r2, r0
 8009d36:	4b24      	ldr	r3, [pc, #144]	@ (8009dc8 <__d2b+0xa8>)
 8009d38:	4824      	ldr	r0, [pc, #144]	@ (8009dcc <__d2b+0xac>)
 8009d3a:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d3e:	f7fe ffb1 	bl	8008ca4 <__assert_func>
 8009d42:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d4a:	b10d      	cbz	r5, 8009d50 <__d2b+0x30>
 8009d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	f1b8 0300 	subs.w	r3, r8, #0
 8009d56:	d024      	beq.n	8009da2 <__d2b+0x82>
 8009d58:	4668      	mov	r0, sp
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	f7ff fd1d 	bl	800979a <__lo0bits>
 8009d60:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d64:	b1d8      	cbz	r0, 8009d9e <__d2b+0x7e>
 8009d66:	f1c0 0320 	rsb	r3, r0, #32
 8009d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	40c2      	lsrs	r2, r0
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	61a3      	str	r3, [r4, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf0c      	ite	eq
 8009d7e:	2201      	moveq	r2, #1
 8009d80:	2202      	movne	r2, #2
 8009d82:	6122      	str	r2, [r4, #16]
 8009d84:	b1ad      	cbz	r5, 8009db2 <__d2b+0x92>
 8009d86:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d8a:	4405      	add	r5, r0
 8009d8c:	6035      	str	r5, [r6, #0]
 8009d8e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	6018      	str	r0, [r3, #0]
 8009d96:	4620      	mov	r0, r4
 8009d98:	b002      	add	sp, #8
 8009d9a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009d9e:	6161      	str	r1, [r4, #20]
 8009da0:	e7e9      	b.n	8009d76 <__d2b+0x56>
 8009da2:	a801      	add	r0, sp, #4
 8009da4:	f7ff fcf9 	bl	800979a <__lo0bits>
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	6163      	str	r3, [r4, #20]
 8009dac:	3020      	adds	r0, #32
 8009dae:	2201      	movs	r2, #1
 8009db0:	e7e7      	b.n	8009d82 <__d2b+0x62>
 8009db2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009db6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dba:	6030      	str	r0, [r6, #0]
 8009dbc:	6918      	ldr	r0, [r3, #16]
 8009dbe:	f7ff fccd 	bl	800975c <__hi0bits>
 8009dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dc6:	e7e4      	b.n	8009d92 <__d2b+0x72>
 8009dc8:	0800b639 	.word	0x0800b639
 8009dcc:	0800b6aa 	.word	0x0800b6aa

08009dd0 <__ratio>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	e9cd 1000 	strd	r1, r0, [sp]
 8009dda:	a902      	add	r1, sp, #8
 8009ddc:	f7ff ff56 	bl	8009c8c <__b2d>
 8009de0:	468b      	mov	fp, r1
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	9800      	ldr	r0, [sp, #0]
 8009de8:	a903      	add	r1, sp, #12
 8009dea:	f7ff ff4f 	bl	8009c8c <__b2d>
 8009dee:	9b01      	ldr	r3, [sp, #4]
 8009df0:	4689      	mov	r9, r1
 8009df2:	460d      	mov	r5, r1
 8009df4:	6919      	ldr	r1, [r3, #16]
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	1ac9      	subs	r1, r1, r3
 8009dfc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfcd      	iteet	gt
 8009e0a:	463a      	movgt	r2, r7
 8009e0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e10:	462a      	movle	r2, r5
 8009e12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009e16:	bfd8      	it	le
 8009e18:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4622      	mov	r2, r4
 8009e20:	464b      	mov	r3, r9
 8009e22:	4630      	mov	r0, r6
 8009e24:	4659      	mov	r1, fp
 8009e26:	f7f6 fce9 	bl	80007fc <__aeabi_ddiv>
 8009e2a:	b005      	add	sp, #20
 8009e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e30 <__copybits>:
 8009e30:	3901      	subs	r1, #1
 8009e32:	b570      	push	{r4, r5, r6, lr}
 8009e34:	1149      	asrs	r1, r1, #5
 8009e36:	6914      	ldr	r4, [r2, #16]
 8009e38:	3101      	adds	r1, #1
 8009e3a:	f102 0314 	add.w	r3, r2, #20
 8009e3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e46:	1f05      	subs	r5, r0, #4
 8009e48:	42a3      	cmp	r3, r4
 8009e4a:	d30c      	bcc.n	8009e66 <__copybits+0x36>
 8009e4c:	1aa3      	subs	r3, r4, r2
 8009e4e:	3b11      	subs	r3, #17
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	3211      	adds	r2, #17
 8009e56:	42a2      	cmp	r2, r4
 8009e58:	bf88      	it	hi
 8009e5a:	2300      	movhi	r3, #0
 8009e5c:	4418      	add	r0, r3
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4288      	cmp	r0, r1
 8009e62:	d305      	bcc.n	8009e70 <__copybits+0x40>
 8009e64:	bd70      	pop	{r4, r5, r6, pc}
 8009e66:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e6a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e6e:	e7eb      	b.n	8009e48 <__copybits+0x18>
 8009e70:	f840 3b04 	str.w	r3, [r0], #4
 8009e74:	e7f4      	b.n	8009e60 <__copybits+0x30>

08009e76 <__any_on>:
 8009e76:	f100 0214 	add.w	r2, r0, #20
 8009e7a:	6900      	ldr	r0, [r0, #16]
 8009e7c:	114b      	asrs	r3, r1, #5
 8009e7e:	4298      	cmp	r0, r3
 8009e80:	b510      	push	{r4, lr}
 8009e82:	db11      	blt.n	8009ea8 <__any_on+0x32>
 8009e84:	dd0a      	ble.n	8009e9c <__any_on+0x26>
 8009e86:	f011 011f 	ands.w	r1, r1, #31
 8009e8a:	d007      	beq.n	8009e9c <__any_on+0x26>
 8009e8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e90:	fa24 f001 	lsr.w	r0, r4, r1
 8009e94:	fa00 f101 	lsl.w	r1, r0, r1
 8009e98:	428c      	cmp	r4, r1
 8009e9a:	d10b      	bne.n	8009eb4 <__any_on+0x3e>
 8009e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d803      	bhi.n	8009eac <__any_on+0x36>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	e7f7      	b.n	8009e9c <__any_on+0x26>
 8009eac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	d0f5      	beq.n	8009ea0 <__any_on+0x2a>
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	e7f6      	b.n	8009ea6 <__any_on+0x30>

08009eb8 <__ascii_wctomb>:
 8009eb8:	4603      	mov	r3, r0
 8009eba:	4608      	mov	r0, r1
 8009ebc:	b141      	cbz	r1, 8009ed0 <__ascii_wctomb+0x18>
 8009ebe:	2aff      	cmp	r2, #255	@ 0xff
 8009ec0:	d904      	bls.n	8009ecc <__ascii_wctomb+0x14>
 8009ec2:	228a      	movs	r2, #138	@ 0x8a
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eca:	4770      	bx	lr
 8009ecc:	700a      	strb	r2, [r1, #0]
 8009ece:	2001      	movs	r0, #1
 8009ed0:	4770      	bx	lr

08009ed2 <__ssputs_r>:
 8009ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed6:	688e      	ldr	r6, [r1, #8]
 8009ed8:	461f      	mov	r7, r3
 8009eda:	42be      	cmp	r6, r7
 8009edc:	680b      	ldr	r3, [r1, #0]
 8009ede:	4682      	mov	sl, r0
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4690      	mov	r8, r2
 8009ee4:	d82d      	bhi.n	8009f42 <__ssputs_r+0x70>
 8009ee6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eea:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009eee:	d026      	beq.n	8009f3e <__ssputs_r+0x6c>
 8009ef0:	6965      	ldr	r5, [r4, #20]
 8009ef2:	6909      	ldr	r1, [r1, #16]
 8009ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ef8:	eba3 0901 	sub.w	r9, r3, r1
 8009efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f00:	1c7b      	adds	r3, r7, #1
 8009f02:	444b      	add	r3, r9
 8009f04:	106d      	asrs	r5, r5, #1
 8009f06:	429d      	cmp	r5, r3
 8009f08:	bf38      	it	cc
 8009f0a:	461d      	movcc	r5, r3
 8009f0c:	0553      	lsls	r3, r2, #21
 8009f0e:	d527      	bpl.n	8009f60 <__ssputs_r+0x8e>
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7ff fa93 	bl	800943c <_malloc_r>
 8009f16:	4606      	mov	r6, r0
 8009f18:	b360      	cbz	r0, 8009f74 <__ssputs_r+0xa2>
 8009f1a:	6921      	ldr	r1, [r4, #16]
 8009f1c:	464a      	mov	r2, r9
 8009f1e:	f7fe feac 	bl	8008c7a <memcpy>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	6126      	str	r6, [r4, #16]
 8009f30:	6165      	str	r5, [r4, #20]
 8009f32:	444e      	add	r6, r9
 8009f34:	eba5 0509 	sub.w	r5, r5, r9
 8009f38:	6026      	str	r6, [r4, #0]
 8009f3a:	60a5      	str	r5, [r4, #8]
 8009f3c:	463e      	mov	r6, r7
 8009f3e:	42be      	cmp	r6, r7
 8009f40:	d900      	bls.n	8009f44 <__ssputs_r+0x72>
 8009f42:	463e      	mov	r6, r7
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	4632      	mov	r2, r6
 8009f48:	4641      	mov	r1, r8
 8009f4a:	f000 fef0 	bl	800ad2e <memmove>
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	1b9b      	subs	r3, r3, r6
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	4433      	add	r3, r6
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f60:	462a      	mov	r2, r5
 8009f62:	f000 ff2a 	bl	800adba <_realloc_r>
 8009f66:	4606      	mov	r6, r0
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1e0      	bne.n	8009f2e <__ssputs_r+0x5c>
 8009f6c:	6921      	ldr	r1, [r4, #16]
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f7fe feb6 	bl	8008ce0 <_free_r>
 8009f74:	230c      	movs	r3, #12
 8009f76:	f8ca 3000 	str.w	r3, [sl]
 8009f7a:	89a3      	ldrh	r3, [r4, #12]
 8009f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	f04f 30ff 	mov.w	r0, #4294967295
 8009f86:	e7e9      	b.n	8009f5c <__ssputs_r+0x8a>

08009f88 <_svfiprintf_r>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	4698      	mov	r8, r3
 8009f8e:	898b      	ldrh	r3, [r1, #12]
 8009f90:	061b      	lsls	r3, r3, #24
 8009f92:	b09d      	sub	sp, #116	@ 0x74
 8009f94:	4607      	mov	r7, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	4614      	mov	r4, r2
 8009f9a:	d510      	bpl.n	8009fbe <_svfiprintf_r+0x36>
 8009f9c:	690b      	ldr	r3, [r1, #16]
 8009f9e:	b973      	cbnz	r3, 8009fbe <_svfiprintf_r+0x36>
 8009fa0:	2140      	movs	r1, #64	@ 0x40
 8009fa2:	f7ff fa4b 	bl	800943c <_malloc_r>
 8009fa6:	6028      	str	r0, [r5, #0]
 8009fa8:	6128      	str	r0, [r5, #16]
 8009faa:	b930      	cbnz	r0, 8009fba <_svfiprintf_r+0x32>
 8009fac:	230c      	movs	r3, #12
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	b01d      	add	sp, #116	@ 0x74
 8009fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fba:	2340      	movs	r3, #64	@ 0x40
 8009fbc:	616b      	str	r3, [r5, #20]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fc2:	2320      	movs	r3, #32
 8009fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fcc:	2330      	movs	r3, #48	@ 0x30
 8009fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a16c <_svfiprintf_r+0x1e4>
 8009fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fd6:	f04f 0901 	mov.w	r9, #1
 8009fda:	4623      	mov	r3, r4
 8009fdc:	469a      	mov	sl, r3
 8009fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe2:	b10a      	cbz	r2, 8009fe8 <_svfiprintf_r+0x60>
 8009fe4:	2a25      	cmp	r2, #37	@ 0x25
 8009fe6:	d1f9      	bne.n	8009fdc <_svfiprintf_r+0x54>
 8009fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8009fec:	d00b      	beq.n	800a006 <_svfiprintf_r+0x7e>
 8009fee:	465b      	mov	r3, fp
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff ff6c 	bl	8009ed2 <__ssputs_r>
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	f000 80a7 	beq.w	800a14e <_svfiprintf_r+0x1c6>
 800a000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a002:	445a      	add	r2, fp
 800a004:	9209      	str	r2, [sp, #36]	@ 0x24
 800a006:	f89a 3000 	ldrb.w	r3, [sl]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 809f 	beq.w	800a14e <_svfiprintf_r+0x1c6>
 800a010:	2300      	movs	r3, #0
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
 800a016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a01a:	f10a 0a01 	add.w	sl, sl, #1
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a026:	931a      	str	r3, [sp, #104]	@ 0x68
 800a028:	4654      	mov	r4, sl
 800a02a:	2205      	movs	r2, #5
 800a02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a030:	484e      	ldr	r0, [pc, #312]	@ (800a16c <_svfiprintf_r+0x1e4>)
 800a032:	f7f6 f8ad 	bl	8000190 <memchr>
 800a036:	9a04      	ldr	r2, [sp, #16]
 800a038:	b9d8      	cbnz	r0, 800a072 <_svfiprintf_r+0xea>
 800a03a:	06d0      	lsls	r0, r2, #27
 800a03c:	bf44      	itt	mi
 800a03e:	2320      	movmi	r3, #32
 800a040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a044:	0711      	lsls	r1, r2, #28
 800a046:	bf44      	itt	mi
 800a048:	232b      	movmi	r3, #43	@ 0x2b
 800a04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a04e:	f89a 3000 	ldrb.w	r3, [sl]
 800a052:	2b2a      	cmp	r3, #42	@ 0x2a
 800a054:	d015      	beq.n	800a082 <_svfiprintf_r+0xfa>
 800a056:	9a07      	ldr	r2, [sp, #28]
 800a058:	4654      	mov	r4, sl
 800a05a:	2000      	movs	r0, #0
 800a05c:	f04f 0c0a 	mov.w	ip, #10
 800a060:	4621      	mov	r1, r4
 800a062:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a066:	3b30      	subs	r3, #48	@ 0x30
 800a068:	2b09      	cmp	r3, #9
 800a06a:	d94b      	bls.n	800a104 <_svfiprintf_r+0x17c>
 800a06c:	b1b0      	cbz	r0, 800a09c <_svfiprintf_r+0x114>
 800a06e:	9207      	str	r2, [sp, #28]
 800a070:	e014      	b.n	800a09c <_svfiprintf_r+0x114>
 800a072:	eba0 0308 	sub.w	r3, r0, r8
 800a076:	fa09 f303 	lsl.w	r3, r9, r3
 800a07a:	4313      	orrs	r3, r2
 800a07c:	9304      	str	r3, [sp, #16]
 800a07e:	46a2      	mov	sl, r4
 800a080:	e7d2      	b.n	800a028 <_svfiprintf_r+0xa0>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	1d19      	adds	r1, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9103      	str	r1, [sp, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bfbb      	ittet	lt
 800a08e:	425b      	neglt	r3, r3
 800a090:	f042 0202 	orrlt.w	r2, r2, #2
 800a094:	9307      	strge	r3, [sp, #28]
 800a096:	9307      	strlt	r3, [sp, #28]
 800a098:	bfb8      	it	lt
 800a09a:	9204      	strlt	r2, [sp, #16]
 800a09c:	7823      	ldrb	r3, [r4, #0]
 800a09e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0a0:	d10a      	bne.n	800a0b8 <_svfiprintf_r+0x130>
 800a0a2:	7863      	ldrb	r3, [r4, #1]
 800a0a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0a6:	d132      	bne.n	800a10e <_svfiprintf_r+0x186>
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	9203      	str	r2, [sp, #12]
 800a0b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0b4:	3402      	adds	r4, #2
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a170 <_svfiprintf_r+0x1e8>
 800a0bc:	7821      	ldrb	r1, [r4, #0]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	f7f6 f865 	bl	8000190 <memchr>
 800a0c6:	b138      	cbz	r0, 800a0d8 <_svfiprintf_r+0x150>
 800a0c8:	9b04      	ldr	r3, [sp, #16]
 800a0ca:	eba0 000a 	sub.w	r0, r0, sl
 800a0ce:	2240      	movs	r2, #64	@ 0x40
 800a0d0:	4082      	lsls	r2, r0
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	3401      	adds	r4, #1
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0dc:	4825      	ldr	r0, [pc, #148]	@ (800a174 <_svfiprintf_r+0x1ec>)
 800a0de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0e2:	2206      	movs	r2, #6
 800a0e4:	f7f6 f854 	bl	8000190 <memchr>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d036      	beq.n	800a15a <_svfiprintf_r+0x1d2>
 800a0ec:	4b22      	ldr	r3, [pc, #136]	@ (800a178 <_svfiprintf_r+0x1f0>)
 800a0ee:	bb1b      	cbnz	r3, 800a138 <_svfiprintf_r+0x1b0>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0fe:	4433      	add	r3, r6
 800a100:	9309      	str	r3, [sp, #36]	@ 0x24
 800a102:	e76a      	b.n	8009fda <_svfiprintf_r+0x52>
 800a104:	fb0c 3202 	mla	r2, ip, r2, r3
 800a108:	460c      	mov	r4, r1
 800a10a:	2001      	movs	r0, #1
 800a10c:	e7a8      	b.n	800a060 <_svfiprintf_r+0xd8>
 800a10e:	2300      	movs	r3, #0
 800a110:	3401      	adds	r4, #1
 800a112:	9305      	str	r3, [sp, #20]
 800a114:	4619      	mov	r1, r3
 800a116:	f04f 0c0a 	mov.w	ip, #10
 800a11a:	4620      	mov	r0, r4
 800a11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a120:	3a30      	subs	r2, #48	@ 0x30
 800a122:	2a09      	cmp	r2, #9
 800a124:	d903      	bls.n	800a12e <_svfiprintf_r+0x1a6>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0c6      	beq.n	800a0b8 <_svfiprintf_r+0x130>
 800a12a:	9105      	str	r1, [sp, #20]
 800a12c:	e7c4      	b.n	800a0b8 <_svfiprintf_r+0x130>
 800a12e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a132:	4604      	mov	r4, r0
 800a134:	2301      	movs	r3, #1
 800a136:	e7f0      	b.n	800a11a <_svfiprintf_r+0x192>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	462a      	mov	r2, r5
 800a13e:	4b0f      	ldr	r3, [pc, #60]	@ (800a17c <_svfiprintf_r+0x1f4>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4638      	mov	r0, r7
 800a144:	f3af 8000 	nop.w
 800a148:	1c42      	adds	r2, r0, #1
 800a14a:	4606      	mov	r6, r0
 800a14c:	d1d6      	bne.n	800a0fc <_svfiprintf_r+0x174>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	065b      	lsls	r3, r3, #25
 800a152:	f53f af2d 	bmi.w	8009fb0 <_svfiprintf_r+0x28>
 800a156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a158:	e72c      	b.n	8009fb4 <_svfiprintf_r+0x2c>
 800a15a:	ab03      	add	r3, sp, #12
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	462a      	mov	r2, r5
 800a160:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <_svfiprintf_r+0x1f4>)
 800a162:	a904      	add	r1, sp, #16
 800a164:	4638      	mov	r0, r7
 800a166:	f000 fa49 	bl	800a5fc <_printf_i>
 800a16a:	e7ed      	b.n	800a148 <_svfiprintf_r+0x1c0>
 800a16c:	0800b703 	.word	0x0800b703
 800a170:	0800b709 	.word	0x0800b709
 800a174:	0800b70d 	.word	0x0800b70d
 800a178:	00000000 	.word	0x00000000
 800a17c:	08009ed3 	.word	0x08009ed3

0800a180 <_sungetc_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	1c4b      	adds	r3, r1, #1
 800a184:	4614      	mov	r4, r2
 800a186:	d103      	bne.n	800a190 <_sungetc_r+0x10>
 800a188:	f04f 35ff 	mov.w	r5, #4294967295
 800a18c:	4628      	mov	r0, r5
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	8993      	ldrh	r3, [r2, #12]
 800a192:	f023 0320 	bic.w	r3, r3, #32
 800a196:	8193      	strh	r3, [r2, #12]
 800a198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a19a:	6852      	ldr	r2, [r2, #4]
 800a19c:	b2cd      	uxtb	r5, r1
 800a19e:	b18b      	cbz	r3, 800a1c4 <_sungetc_r+0x44>
 800a1a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	dd08      	ble.n	800a1b8 <_sungetc_r+0x38>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	1e5a      	subs	r2, r3, #1
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1b0:	6863      	ldr	r3, [r4, #4]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	e7e9      	b.n	800a18c <_sungetc_r+0xc>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f000 fd7e 	bl	800acba <__submore>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0f1      	beq.n	800a1a6 <_sungetc_r+0x26>
 800a1c2:	e7e1      	b.n	800a188 <_sungetc_r+0x8>
 800a1c4:	6921      	ldr	r1, [r4, #16]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	b151      	cbz	r1, 800a1e0 <_sungetc_r+0x60>
 800a1ca:	4299      	cmp	r1, r3
 800a1cc:	d208      	bcs.n	800a1e0 <_sungetc_r+0x60>
 800a1ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a1d2:	42a9      	cmp	r1, r5
 800a1d4:	d104      	bne.n	800a1e0 <_sungetc_r+0x60>
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	3201      	adds	r2, #1
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	6062      	str	r2, [r4, #4]
 800a1de:	e7d5      	b.n	800a18c <_sungetc_r+0xc>
 800a1e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a1e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a1ee:	4623      	mov	r3, r4
 800a1f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7dc      	b.n	800a1b4 <_sungetc_r+0x34>

0800a1fa <__ssrefill_r>:
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a200:	b169      	cbz	r1, 800a21e <__ssrefill_r+0x24>
 800a202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a206:	4299      	cmp	r1, r3
 800a208:	d001      	beq.n	800a20e <__ssrefill_r+0x14>
 800a20a:	f7fe fd69 	bl	8008ce0 <_free_r>
 800a20e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	2000      	movs	r0, #0
 800a214:	6360      	str	r0, [r4, #52]	@ 0x34
 800a216:	b113      	cbz	r3, 800a21e <__ssrefill_r+0x24>
 800a218:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	2300      	movs	r3, #0
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f043 0320 	orr.w	r3, r3, #32
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295
 800a232:	e7f3      	b.n	800a21c <__ssrefill_r+0x22>

0800a234 <__ssvfiscanf_r>:
 800a234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a23e:	2100      	movs	r1, #0
 800a240:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a244:	49a6      	ldr	r1, [pc, #664]	@ (800a4e0 <__ssvfiscanf_r+0x2ac>)
 800a246:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a248:	f10d 0804 	add.w	r8, sp, #4
 800a24c:	49a5      	ldr	r1, [pc, #660]	@ (800a4e4 <__ssvfiscanf_r+0x2b0>)
 800a24e:	4fa6      	ldr	r7, [pc, #664]	@ (800a4e8 <__ssvfiscanf_r+0x2b4>)
 800a250:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a254:	4606      	mov	r6, r0
 800a256:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	f892 9000 	ldrb.w	r9, [r2]
 800a25e:	f1b9 0f00 	cmp.w	r9, #0
 800a262:	f000 8158 	beq.w	800a516 <__ssvfiscanf_r+0x2e2>
 800a266:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a26a:	f013 0308 	ands.w	r3, r3, #8
 800a26e:	f102 0501 	add.w	r5, r2, #1
 800a272:	d019      	beq.n	800a2a8 <__ssvfiscanf_r+0x74>
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd0f      	ble.n	800a29a <__ssvfiscanf_r+0x66>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	781a      	ldrb	r2, [r3, #0]
 800a27e:	5cba      	ldrb	r2, [r7, r2]
 800a280:	0712      	lsls	r2, r2, #28
 800a282:	d401      	bmi.n	800a288 <__ssvfiscanf_r+0x54>
 800a284:	462a      	mov	r2, r5
 800a286:	e7e8      	b.n	800a25a <__ssvfiscanf_r+0x26>
 800a288:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a28a:	3201      	adds	r2, #1
 800a28c:	9245      	str	r2, [sp, #276]	@ 0x114
 800a28e:	6862      	ldr	r2, [r4, #4]
 800a290:	3301      	adds	r3, #1
 800a292:	3a01      	subs	r2, #1
 800a294:	6062      	str	r2, [r4, #4]
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	e7ec      	b.n	800a274 <__ssvfiscanf_r+0x40>
 800a29a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a29c:	4621      	mov	r1, r4
 800a29e:	4630      	mov	r0, r6
 800a2a0:	4798      	blx	r3
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d0e9      	beq.n	800a27a <__ssvfiscanf_r+0x46>
 800a2a6:	e7ed      	b.n	800a284 <__ssvfiscanf_r+0x50>
 800a2a8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a2ac:	f040 8085 	bne.w	800a3ba <__ssvfiscanf_r+0x186>
 800a2b0:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2b2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a2b4:	7853      	ldrb	r3, [r2, #1]
 800a2b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b8:	bf02      	ittt	eq
 800a2ba:	2310      	moveq	r3, #16
 800a2bc:	1c95      	addeq	r5, r2, #2
 800a2be:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	46aa      	mov	sl, r5
 800a2c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a2c8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a2cc:	2b09      	cmp	r3, #9
 800a2ce:	d91e      	bls.n	800a30e <__ssvfiscanf_r+0xda>
 800a2d0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a4ec <__ssvfiscanf_r+0x2b8>
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f7f5 ff5a 	bl	8000190 <memchr>
 800a2dc:	b138      	cbz	r0, 800a2ee <__ssvfiscanf_r+0xba>
 800a2de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a2e0:	eba0 000b 	sub.w	r0, r0, fp
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4083      	lsls	r3, r0
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2ec:	4655      	mov	r5, sl
 800a2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2f2:	2b78      	cmp	r3, #120	@ 0x78
 800a2f4:	d806      	bhi.n	800a304 <__ssvfiscanf_r+0xd0>
 800a2f6:	2b57      	cmp	r3, #87	@ 0x57
 800a2f8:	d810      	bhi.n	800a31c <__ssvfiscanf_r+0xe8>
 800a2fa:	2b25      	cmp	r3, #37	@ 0x25
 800a2fc:	d05d      	beq.n	800a3ba <__ssvfiscanf_r+0x186>
 800a2fe:	d857      	bhi.n	800a3b0 <__ssvfiscanf_r+0x17c>
 800a300:	2b00      	cmp	r3, #0
 800a302:	d075      	beq.n	800a3f0 <__ssvfiscanf_r+0x1bc>
 800a304:	2303      	movs	r3, #3
 800a306:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a308:	230a      	movs	r3, #10
 800a30a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a30c:	e088      	b.n	800a420 <__ssvfiscanf_r+0x1ec>
 800a30e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a310:	fb02 1103 	mla	r1, r2, r3, r1
 800a314:	3930      	subs	r1, #48	@ 0x30
 800a316:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a318:	4655      	mov	r5, sl
 800a31a:	e7d2      	b.n	800a2c2 <__ssvfiscanf_r+0x8e>
 800a31c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a320:	2a20      	cmp	r2, #32
 800a322:	d8ef      	bhi.n	800a304 <__ssvfiscanf_r+0xd0>
 800a324:	a101      	add	r1, pc, #4	@ (adr r1, 800a32c <__ssvfiscanf_r+0xf8>)
 800a326:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a3ff 	.word	0x0800a3ff
 800a330:	0800a305 	.word	0x0800a305
 800a334:	0800a305 	.word	0x0800a305
 800a338:	0800a459 	.word	0x0800a459
 800a33c:	0800a305 	.word	0x0800a305
 800a340:	0800a305 	.word	0x0800a305
 800a344:	0800a305 	.word	0x0800a305
 800a348:	0800a305 	.word	0x0800a305
 800a34c:	0800a305 	.word	0x0800a305
 800a350:	0800a305 	.word	0x0800a305
 800a354:	0800a305 	.word	0x0800a305
 800a358:	0800a46f 	.word	0x0800a46f
 800a35c:	0800a455 	.word	0x0800a455
 800a360:	0800a3b7 	.word	0x0800a3b7
 800a364:	0800a3b7 	.word	0x0800a3b7
 800a368:	0800a3b7 	.word	0x0800a3b7
 800a36c:	0800a305 	.word	0x0800a305
 800a370:	0800a411 	.word	0x0800a411
 800a374:	0800a305 	.word	0x0800a305
 800a378:	0800a305 	.word	0x0800a305
 800a37c:	0800a305 	.word	0x0800a305
 800a380:	0800a305 	.word	0x0800a305
 800a384:	0800a47f 	.word	0x0800a47f
 800a388:	0800a419 	.word	0x0800a419
 800a38c:	0800a3f7 	.word	0x0800a3f7
 800a390:	0800a305 	.word	0x0800a305
 800a394:	0800a305 	.word	0x0800a305
 800a398:	0800a47b 	.word	0x0800a47b
 800a39c:	0800a305 	.word	0x0800a305
 800a3a0:	0800a455 	.word	0x0800a455
 800a3a4:	0800a305 	.word	0x0800a305
 800a3a8:	0800a305 	.word	0x0800a305
 800a3ac:	0800a3ff 	.word	0x0800a3ff
 800a3b0:	3b45      	subs	r3, #69	@ 0x45
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d8a6      	bhi.n	800a304 <__ssvfiscanf_r+0xd0>
 800a3b6:	2305      	movs	r3, #5
 800a3b8:	e031      	b.n	800a41e <__ssvfiscanf_r+0x1ea>
 800a3ba:	6863      	ldr	r3, [r4, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd0d      	ble.n	800a3dc <__ssvfiscanf_r+0x1a8>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	781a      	ldrb	r2, [r3, #0]
 800a3c4:	454a      	cmp	r2, r9
 800a3c6:	f040 80a6 	bne.w	800a516 <__ssvfiscanf_r+0x2e2>
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	6862      	ldr	r2, [r4, #4]
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a3d2:	3a01      	subs	r2, #1
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	6062      	str	r2, [r4, #4]
 800a3d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800a3da:	e753      	b.n	800a284 <__ssvfiscanf_r+0x50>
 800a3dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	4798      	blx	r3
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d0eb      	beq.n	800a3c0 <__ssvfiscanf_r+0x18c>
 800a3e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	f040 808b 	bne.w	800a506 <__ssvfiscanf_r+0x2d2>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e08b      	b.n	800a50e <__ssvfiscanf_r+0x2da>
 800a3f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a3f8:	f042 0220 	orr.w	r2, r2, #32
 800a3fc:	9241      	str	r2, [sp, #260]	@ 0x104
 800a3fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a404:	9241      	str	r2, [sp, #260]	@ 0x104
 800a406:	2210      	movs	r2, #16
 800a408:	2b6e      	cmp	r3, #110	@ 0x6e
 800a40a:	9242      	str	r2, [sp, #264]	@ 0x108
 800a40c:	d902      	bls.n	800a414 <__ssvfiscanf_r+0x1e0>
 800a40e:	e005      	b.n	800a41c <__ssvfiscanf_r+0x1e8>
 800a410:	2300      	movs	r3, #0
 800a412:	9342      	str	r3, [sp, #264]	@ 0x108
 800a414:	2303      	movs	r3, #3
 800a416:	e002      	b.n	800a41e <__ssvfiscanf_r+0x1ea>
 800a418:	2308      	movs	r3, #8
 800a41a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a41c:	2304      	movs	r3, #4
 800a41e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dd39      	ble.n	800a49a <__ssvfiscanf_r+0x266>
 800a426:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a428:	0659      	lsls	r1, r3, #25
 800a42a:	d404      	bmi.n	800a436 <__ssvfiscanf_r+0x202>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	5cba      	ldrb	r2, [r7, r2]
 800a432:	0712      	lsls	r2, r2, #28
 800a434:	d438      	bmi.n	800a4a8 <__ssvfiscanf_r+0x274>
 800a436:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a438:	2b02      	cmp	r3, #2
 800a43a:	dc47      	bgt.n	800a4cc <__ssvfiscanf_r+0x298>
 800a43c:	466b      	mov	r3, sp
 800a43e:	4622      	mov	r2, r4
 800a440:	a941      	add	r1, sp, #260	@ 0x104
 800a442:	4630      	mov	r0, r6
 800a444:	f000 f9f8 	bl	800a838 <_scanf_chars>
 800a448:	2801      	cmp	r0, #1
 800a44a:	d064      	beq.n	800a516 <__ssvfiscanf_r+0x2e2>
 800a44c:	2802      	cmp	r0, #2
 800a44e:	f47f af19 	bne.w	800a284 <__ssvfiscanf_r+0x50>
 800a452:	e7c9      	b.n	800a3e8 <__ssvfiscanf_r+0x1b4>
 800a454:	220a      	movs	r2, #10
 800a456:	e7d7      	b.n	800a408 <__ssvfiscanf_r+0x1d4>
 800a458:	4629      	mov	r1, r5
 800a45a:	4640      	mov	r0, r8
 800a45c:	f000 fbf4 	bl	800ac48 <__sccl>
 800a460:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a466:	9341      	str	r3, [sp, #260]	@ 0x104
 800a468:	4605      	mov	r5, r0
 800a46a:	2301      	movs	r3, #1
 800a46c:	e7d7      	b.n	800a41e <__ssvfiscanf_r+0x1ea>
 800a46e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a474:	9341      	str	r3, [sp, #260]	@ 0x104
 800a476:	2300      	movs	r3, #0
 800a478:	e7d1      	b.n	800a41e <__ssvfiscanf_r+0x1ea>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e7cf      	b.n	800a41e <__ssvfiscanf_r+0x1ea>
 800a47e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a480:	06c3      	lsls	r3, r0, #27
 800a482:	f53f aeff 	bmi.w	800a284 <__ssvfiscanf_r+0x50>
 800a486:	9b00      	ldr	r3, [sp, #0]
 800a488:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a48a:	1d19      	adds	r1, r3, #4
 800a48c:	9100      	str	r1, [sp, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	07c0      	lsls	r0, r0, #31
 800a492:	bf4c      	ite	mi
 800a494:	801a      	strhmi	r2, [r3, #0]
 800a496:	601a      	strpl	r2, [r3, #0]
 800a498:	e6f4      	b.n	800a284 <__ssvfiscanf_r+0x50>
 800a49a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a49c:	4621      	mov	r1, r4
 800a49e:	4630      	mov	r0, r6
 800a4a0:	4798      	blx	r3
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0bf      	beq.n	800a426 <__ssvfiscanf_r+0x1f2>
 800a4a6:	e79f      	b.n	800a3e8 <__ssvfiscanf_r+0x1b4>
 800a4a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	9245      	str	r2, [sp, #276]	@ 0x114
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	3a01      	subs	r2, #1
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	6062      	str	r2, [r4, #4]
 800a4b6:	dd02      	ble.n	800a4be <__ssvfiscanf_r+0x28a>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	e7b6      	b.n	800a42c <__ssvfiscanf_r+0x1f8>
 800a4be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4798      	blx	r3
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d0b0      	beq.n	800a42c <__ssvfiscanf_r+0x1f8>
 800a4ca:	e78d      	b.n	800a3e8 <__ssvfiscanf_r+0x1b4>
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	dc0f      	bgt.n	800a4f0 <__ssvfiscanf_r+0x2bc>
 800a4d0:	466b      	mov	r3, sp
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	a941      	add	r1, sp, #260	@ 0x104
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f000 fa08 	bl	800a8ec <_scanf_i>
 800a4dc:	e7b4      	b.n	800a448 <__ssvfiscanf_r+0x214>
 800a4de:	bf00      	nop
 800a4e0:	0800a181 	.word	0x0800a181
 800a4e4:	0800a1fb 	.word	0x0800a1fb
 800a4e8:	0800b7a9 	.word	0x0800b7a9
 800a4ec:	0800b709 	.word	0x0800b709
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <__ssvfiscanf_r+0x2e8>)
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f43f aec6 	beq.w	800a284 <__ssvfiscanf_r+0x50>
 800a4f8:	466b      	mov	r3, sp
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	a941      	add	r1, sp, #260	@ 0x104
 800a4fe:	4630      	mov	r0, r6
 800a500:	f3af 8000 	nop.w
 800a504:	e7a0      	b.n	800a448 <__ssvfiscanf_r+0x214>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	065b      	lsls	r3, r3, #25
 800a50a:	f53f af71 	bmi.w	800a3f0 <__ssvfiscanf_r+0x1bc>
 800a50e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a518:	e7f9      	b.n	800a50e <__ssvfiscanf_r+0x2da>
 800a51a:	bf00      	nop
 800a51c:	00000000 	.word	0x00000000

0800a520 <_printf_common>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	4616      	mov	r6, r2
 800a526:	4698      	mov	r8, r3
 800a528:	688a      	ldr	r2, [r1, #8]
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a530:	4293      	cmp	r3, r2
 800a532:	bfb8      	it	lt
 800a534:	4613      	movlt	r3, r2
 800a536:	6033      	str	r3, [r6, #0]
 800a538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a53c:	4607      	mov	r7, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b10a      	cbz	r2, 800a546 <_printf_common+0x26>
 800a542:	3301      	adds	r3, #1
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	0699      	lsls	r1, r3, #26
 800a54a:	bf42      	ittt	mi
 800a54c:	6833      	ldrmi	r3, [r6, #0]
 800a54e:	3302      	addmi	r3, #2
 800a550:	6033      	strmi	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	f015 0506 	ands.w	r5, r5, #6
 800a558:	d106      	bne.n	800a568 <_printf_common+0x48>
 800a55a:	f104 0a19 	add.w	sl, r4, #25
 800a55e:	68e3      	ldr	r3, [r4, #12]
 800a560:	6832      	ldr	r2, [r6, #0]
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	42ab      	cmp	r3, r5
 800a566:	dc26      	bgt.n	800a5b6 <_printf_common+0x96>
 800a568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	3b00      	subs	r3, #0
 800a570:	bf18      	it	ne
 800a572:	2301      	movne	r3, #1
 800a574:	0692      	lsls	r2, r2, #26
 800a576:	d42b      	bmi.n	800a5d0 <_printf_common+0xb0>
 800a578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a57c:	4641      	mov	r1, r8
 800a57e:	4638      	mov	r0, r7
 800a580:	47c8      	blx	r9
 800a582:	3001      	adds	r0, #1
 800a584:	d01e      	beq.n	800a5c4 <_printf_common+0xa4>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	6922      	ldr	r2, [r4, #16]
 800a58a:	f003 0306 	and.w	r3, r3, #6
 800a58e:	2b04      	cmp	r3, #4
 800a590:	bf02      	ittt	eq
 800a592:	68e5      	ldreq	r5, [r4, #12]
 800a594:	6833      	ldreq	r3, [r6, #0]
 800a596:	1aed      	subeq	r5, r5, r3
 800a598:	68a3      	ldr	r3, [r4, #8]
 800a59a:	bf0c      	ite	eq
 800a59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a0:	2500      	movne	r5, #0
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bfc4      	itt	gt
 800a5a6:	1a9b      	subgt	r3, r3, r2
 800a5a8:	18ed      	addgt	r5, r5, r3
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	341a      	adds	r4, #26
 800a5ae:	42b5      	cmp	r5, r6
 800a5b0:	d11a      	bne.n	800a5e8 <_printf_common+0xc8>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e008      	b.n	800a5c8 <_printf_common+0xa8>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	4638      	mov	r0, r7
 800a5be:	47c8      	blx	r9
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d103      	bne.n	800a5cc <_printf_common+0xac>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	e7c6      	b.n	800a55e <_printf_common+0x3e>
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	2030      	movs	r0, #48	@ 0x30
 800a5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5da:	4422      	add	r2, r4
 800a5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	e7c7      	b.n	800a578 <_printf_common+0x58>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c8      	blx	r9
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d0e6      	beq.n	800a5c4 <_printf_common+0xa4>
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7d9      	b.n	800a5ae <_printf_common+0x8e>
	...

0800a5fc <_printf_i>:
 800a5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	7e0f      	ldrb	r7, [r1, #24]
 800a602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a604:	2f78      	cmp	r7, #120	@ 0x78
 800a606:	4691      	mov	r9, r2
 800a608:	4680      	mov	r8, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	469a      	mov	sl, r3
 800a60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a612:	d807      	bhi.n	800a624 <_printf_i+0x28>
 800a614:	2f62      	cmp	r7, #98	@ 0x62
 800a616:	d80a      	bhi.n	800a62e <_printf_i+0x32>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f000 80d1 	beq.w	800a7c0 <_printf_i+0x1c4>
 800a61e:	2f58      	cmp	r7, #88	@ 0x58
 800a620:	f000 80b8 	beq.w	800a794 <_printf_i+0x198>
 800a624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a62c:	e03a      	b.n	800a6a4 <_printf_i+0xa8>
 800a62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a632:	2b15      	cmp	r3, #21
 800a634:	d8f6      	bhi.n	800a624 <_printf_i+0x28>
 800a636:	a101      	add	r1, pc, #4	@ (adr r1, 800a63c <_printf_i+0x40>)
 800a638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a625 	.word	0x0800a625
 800a648:	0800a625 	.word	0x0800a625
 800a64c:	0800a625 	.word	0x0800a625
 800a650:	0800a625 	.word	0x0800a625
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a625 	.word	0x0800a625
 800a65c:	0800a625 	.word	0x0800a625
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a7a7 	.word	0x0800a7a7
 800a66c:	0800a6d3 	.word	0x0800a6d3
 800a670:	0800a761 	.word	0x0800a761
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7c9 	.word	0x0800a7c9
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a6d3 	.word	0x0800a6d3
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a769 	.word	0x0800a769
 800a694:	6833      	ldr	r3, [r6, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e09c      	b.n	800a7e2 <_printf_i+0x1e6>
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	6820      	ldr	r0, [r4, #0]
 800a6ac:	1d19      	adds	r1, r3, #4
 800a6ae:	6031      	str	r1, [r6, #0]
 800a6b0:	0606      	lsls	r6, r0, #24
 800a6b2:	d501      	bpl.n	800a6b8 <_printf_i+0xbc>
 800a6b4:	681d      	ldr	r5, [r3, #0]
 800a6b6:	e003      	b.n	800a6c0 <_printf_i+0xc4>
 800a6b8:	0645      	lsls	r5, r0, #25
 800a6ba:	d5fb      	bpl.n	800a6b4 <_printf_i+0xb8>
 800a6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	da03      	bge.n	800a6cc <_printf_i+0xd0>
 800a6c4:	232d      	movs	r3, #45	@ 0x2d
 800a6c6:	426d      	negs	r5, r5
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6cc:	4858      	ldr	r0, [pc, #352]	@ (800a830 <_printf_i+0x234>)
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	e011      	b.n	800a6f6 <_printf_i+0xfa>
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	6833      	ldr	r3, [r6, #0]
 800a6d6:	0608      	lsls	r0, r1, #24
 800a6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6dc:	d402      	bmi.n	800a6e4 <_printf_i+0xe8>
 800a6de:	0649      	lsls	r1, r1, #25
 800a6e0:	bf48      	it	mi
 800a6e2:	b2ad      	uxthmi	r5, r5
 800a6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6e6:	4852      	ldr	r0, [pc, #328]	@ (800a830 <_printf_i+0x234>)
 800a6e8:	6033      	str	r3, [r6, #0]
 800a6ea:	bf14      	ite	ne
 800a6ec:	230a      	movne	r3, #10
 800a6ee:	2308      	moveq	r3, #8
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6f6:	6866      	ldr	r6, [r4, #4]
 800a6f8:	60a6      	str	r6, [r4, #8]
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	db05      	blt.n	800a70a <_printf_i+0x10e>
 800a6fe:	6821      	ldr	r1, [r4, #0]
 800a700:	432e      	orrs	r6, r5
 800a702:	f021 0104 	bic.w	r1, r1, #4
 800a706:	6021      	str	r1, [r4, #0]
 800a708:	d04b      	beq.n	800a7a2 <_printf_i+0x1a6>
 800a70a:	4616      	mov	r6, r2
 800a70c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a710:	fb03 5711 	mls	r7, r3, r1, r5
 800a714:	5dc7      	ldrb	r7, [r0, r7]
 800a716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a71a:	462f      	mov	r7, r5
 800a71c:	42bb      	cmp	r3, r7
 800a71e:	460d      	mov	r5, r1
 800a720:	d9f4      	bls.n	800a70c <_printf_i+0x110>
 800a722:	2b08      	cmp	r3, #8
 800a724:	d10b      	bne.n	800a73e <_printf_i+0x142>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	07df      	lsls	r7, r3, #31
 800a72a:	d508      	bpl.n	800a73e <_printf_i+0x142>
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	6861      	ldr	r1, [r4, #4]
 800a730:	4299      	cmp	r1, r3
 800a732:	bfde      	ittt	le
 800a734:	2330      	movle	r3, #48	@ 0x30
 800a736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a73a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a73e:	1b92      	subs	r2, r2, r6
 800a740:	6122      	str	r2, [r4, #16]
 800a742:	f8cd a000 	str.w	sl, [sp]
 800a746:	464b      	mov	r3, r9
 800a748:	aa03      	add	r2, sp, #12
 800a74a:	4621      	mov	r1, r4
 800a74c:	4640      	mov	r0, r8
 800a74e:	f7ff fee7 	bl	800a520 <_printf_common>
 800a752:	3001      	adds	r0, #1
 800a754:	d14a      	bne.n	800a7ec <_printf_i+0x1f0>
 800a756:	f04f 30ff 	mov.w	r0, #4294967295
 800a75a:	b004      	add	sp, #16
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	f043 0320 	orr.w	r3, r3, #32
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	4832      	ldr	r0, [pc, #200]	@ (800a834 <_printf_i+0x238>)
 800a76a:	2778      	movs	r7, #120	@ 0x78
 800a76c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	6831      	ldr	r1, [r6, #0]
 800a774:	061f      	lsls	r7, r3, #24
 800a776:	f851 5b04 	ldr.w	r5, [r1], #4
 800a77a:	d402      	bmi.n	800a782 <_printf_i+0x186>
 800a77c:	065f      	lsls	r7, r3, #25
 800a77e:	bf48      	it	mi
 800a780:	b2ad      	uxthmi	r5, r5
 800a782:	6031      	str	r1, [r6, #0]
 800a784:	07d9      	lsls	r1, r3, #31
 800a786:	bf44      	itt	mi
 800a788:	f043 0320 	orrmi.w	r3, r3, #32
 800a78c:	6023      	strmi	r3, [r4, #0]
 800a78e:	b11d      	cbz	r5, 800a798 <_printf_i+0x19c>
 800a790:	2310      	movs	r3, #16
 800a792:	e7ad      	b.n	800a6f0 <_printf_i+0xf4>
 800a794:	4826      	ldr	r0, [pc, #152]	@ (800a830 <_printf_i+0x234>)
 800a796:	e7e9      	b.n	800a76c <_printf_i+0x170>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	f023 0320 	bic.w	r3, r3, #32
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	e7f6      	b.n	800a790 <_printf_i+0x194>
 800a7a2:	4616      	mov	r6, r2
 800a7a4:	e7bd      	b.n	800a722 <_printf_i+0x126>
 800a7a6:	6833      	ldr	r3, [r6, #0]
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	6961      	ldr	r1, [r4, #20]
 800a7ac:	1d18      	adds	r0, r3, #4
 800a7ae:	6030      	str	r0, [r6, #0]
 800a7b0:	062e      	lsls	r6, r5, #24
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	d501      	bpl.n	800a7ba <_printf_i+0x1be>
 800a7b6:	6019      	str	r1, [r3, #0]
 800a7b8:	e002      	b.n	800a7c0 <_printf_i+0x1c4>
 800a7ba:	0668      	lsls	r0, r5, #25
 800a7bc:	d5fb      	bpl.n	800a7b6 <_printf_i+0x1ba>
 800a7be:	8019      	strh	r1, [r3, #0]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	6123      	str	r3, [r4, #16]
 800a7c4:	4616      	mov	r6, r2
 800a7c6:	e7bc      	b.n	800a742 <_printf_i+0x146>
 800a7c8:	6833      	ldr	r3, [r6, #0]
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	6032      	str	r2, [r6, #0]
 800a7ce:	681e      	ldr	r6, [r3, #0]
 800a7d0:	6862      	ldr	r2, [r4, #4]
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7f5 fcdb 	bl	8000190 <memchr>
 800a7da:	b108      	cbz	r0, 800a7e0 <_printf_i+0x1e4>
 800a7dc:	1b80      	subs	r0, r0, r6
 800a7de:	6060      	str	r0, [r4, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ea:	e7aa      	b.n	800a742 <_printf_i+0x146>
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	4632      	mov	r2, r6
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	47d0      	blx	sl
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d0ad      	beq.n	800a756 <_printf_i+0x15a>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	079b      	lsls	r3, r3, #30
 800a7fe:	d413      	bmi.n	800a828 <_printf_i+0x22c>
 800a800:	68e0      	ldr	r0, [r4, #12]
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	4298      	cmp	r0, r3
 800a806:	bfb8      	it	lt
 800a808:	4618      	movlt	r0, r3
 800a80a:	e7a6      	b.n	800a75a <_printf_i+0x15e>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4632      	mov	r2, r6
 800a810:	4649      	mov	r1, r9
 800a812:	4640      	mov	r0, r8
 800a814:	47d0      	blx	sl
 800a816:	3001      	adds	r0, #1
 800a818:	d09d      	beq.n	800a756 <_printf_i+0x15a>
 800a81a:	3501      	adds	r5, #1
 800a81c:	68e3      	ldr	r3, [r4, #12]
 800a81e:	9903      	ldr	r1, [sp, #12]
 800a820:	1a5b      	subs	r3, r3, r1
 800a822:	42ab      	cmp	r3, r5
 800a824:	dcf2      	bgt.n	800a80c <_printf_i+0x210>
 800a826:	e7eb      	b.n	800a800 <_printf_i+0x204>
 800a828:	2500      	movs	r5, #0
 800a82a:	f104 0619 	add.w	r6, r4, #25
 800a82e:	e7f5      	b.n	800a81c <_printf_i+0x220>
 800a830:	0800b714 	.word	0x0800b714
 800a834:	0800b725 	.word	0x0800b725

0800a838 <_scanf_chars>:
 800a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a83c:	4615      	mov	r5, r2
 800a83e:	688a      	ldr	r2, [r1, #8]
 800a840:	4680      	mov	r8, r0
 800a842:	460c      	mov	r4, r1
 800a844:	b932      	cbnz	r2, 800a854 <_scanf_chars+0x1c>
 800a846:	698a      	ldr	r2, [r1, #24]
 800a848:	2a00      	cmp	r2, #0
 800a84a:	bf14      	ite	ne
 800a84c:	f04f 32ff 	movne.w	r2, #4294967295
 800a850:	2201      	moveq	r2, #1
 800a852:	608a      	str	r2, [r1, #8]
 800a854:	6822      	ldr	r2, [r4, #0]
 800a856:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a8e8 <_scanf_chars+0xb0>
 800a85a:	06d1      	lsls	r1, r2, #27
 800a85c:	bf5f      	itttt	pl
 800a85e:	681a      	ldrpl	r2, [r3, #0]
 800a860:	1d11      	addpl	r1, r2, #4
 800a862:	6019      	strpl	r1, [r3, #0]
 800a864:	6816      	ldrpl	r6, [r2, #0]
 800a866:	2700      	movs	r7, #0
 800a868:	69a0      	ldr	r0, [r4, #24]
 800a86a:	b188      	cbz	r0, 800a890 <_scanf_chars+0x58>
 800a86c:	2801      	cmp	r0, #1
 800a86e:	d107      	bne.n	800a880 <_scanf_chars+0x48>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	6963      	ldr	r3, [r4, #20]
 800a876:	5c9b      	ldrb	r3, [r3, r2]
 800a878:	b953      	cbnz	r3, 800a890 <_scanf_chars+0x58>
 800a87a:	2f00      	cmp	r7, #0
 800a87c:	d031      	beq.n	800a8e2 <_scanf_chars+0xaa>
 800a87e:	e022      	b.n	800a8c6 <_scanf_chars+0x8e>
 800a880:	2802      	cmp	r0, #2
 800a882:	d120      	bne.n	800a8c6 <_scanf_chars+0x8e>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a88c:	071b      	lsls	r3, r3, #28
 800a88e:	d41a      	bmi.n	800a8c6 <_scanf_chars+0x8e>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	06da      	lsls	r2, r3, #27
 800a894:	bf5e      	ittt	pl
 800a896:	682b      	ldrpl	r3, [r5, #0]
 800a898:	781b      	ldrbpl	r3, [r3, #0]
 800a89a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a89e:	682a      	ldr	r2, [r5, #0]
 800a8a0:	686b      	ldr	r3, [r5, #4]
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	68a2      	ldr	r2, [r4, #8]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	606b      	str	r3, [r5, #4]
 800a8ae:	3701      	adds	r7, #1
 800a8b0:	60a2      	str	r2, [r4, #8]
 800a8b2:	b142      	cbz	r2, 800a8c6 <_scanf_chars+0x8e>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dcd7      	bgt.n	800a868 <_scanf_chars+0x30>
 800a8b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8bc:	4629      	mov	r1, r5
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4798      	blx	r3
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0d0      	beq.n	800a868 <_scanf_chars+0x30>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	f013 0310 	ands.w	r3, r3, #16
 800a8cc:	d105      	bne.n	800a8da <_scanf_chars+0xa2>
 800a8ce:	68e2      	ldr	r2, [r4, #12]
 800a8d0:	3201      	adds	r2, #1
 800a8d2:	60e2      	str	r2, [r4, #12]
 800a8d4:	69a2      	ldr	r2, [r4, #24]
 800a8d6:	b102      	cbz	r2, 800a8da <_scanf_chars+0xa2>
 800a8d8:	7033      	strb	r3, [r6, #0]
 800a8da:	6923      	ldr	r3, [r4, #16]
 800a8dc:	443b      	add	r3, r7
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e6:	bf00      	nop
 800a8e8:	0800b7a9 	.word	0x0800b7a9

0800a8ec <_scanf_i>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	4698      	mov	r8, r3
 800a8f2:	4b74      	ldr	r3, [pc, #464]	@ (800aac4 <_scanf_i+0x1d8>)
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	4682      	mov	sl, r0
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8fe:	b087      	sub	sp, #28
 800a900:	ab03      	add	r3, sp, #12
 800a902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a906:	4b70      	ldr	r3, [pc, #448]	@ (800aac8 <_scanf_i+0x1dc>)
 800a908:	69a1      	ldr	r1, [r4, #24]
 800a90a:	4a70      	ldr	r2, [pc, #448]	@ (800aacc <_scanf_i+0x1e0>)
 800a90c:	2903      	cmp	r1, #3
 800a90e:	bf08      	it	eq
 800a910:	461a      	moveq	r2, r3
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	1e5a      	subs	r2, r3, #1
 800a918:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a91c:	bf88      	it	hi
 800a91e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a922:	4627      	mov	r7, r4
 800a924:	bf82      	ittt	hi
 800a926:	eb03 0905 	addhi.w	r9, r3, r5
 800a92a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a92e:	60a3      	strhi	r3, [r4, #8]
 800a930:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a934:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a938:	bf98      	it	ls
 800a93a:	f04f 0900 	movls.w	r9, #0
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	463d      	mov	r5, r7
 800a942:	f04f 0b00 	mov.w	fp, #0
 800a946:	6831      	ldr	r1, [r6, #0]
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	7809      	ldrb	r1, [r1, #0]
 800a94c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a950:	2202      	movs	r2, #2
 800a952:	f7f5 fc1d 	bl	8000190 <memchr>
 800a956:	b328      	cbz	r0, 800a9a4 <_scanf_i+0xb8>
 800a958:	f1bb 0f01 	cmp.w	fp, #1
 800a95c:	d159      	bne.n	800aa12 <_scanf_i+0x126>
 800a95e:	6862      	ldr	r2, [r4, #4]
 800a960:	b92a      	cbnz	r2, 800a96e <_scanf_i+0x82>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	2108      	movs	r1, #8
 800a966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a96a:	6061      	str	r1, [r4, #4]
 800a96c:	6022      	str	r2, [r4, #0]
 800a96e:	6822      	ldr	r2, [r4, #0]
 800a970:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a974:	6022      	str	r2, [r4, #0]
 800a976:	68a2      	ldr	r2, [r4, #8]
 800a978:	1e51      	subs	r1, r2, #1
 800a97a:	60a1      	str	r1, [r4, #8]
 800a97c:	b192      	cbz	r2, 800a9a4 <_scanf_i+0xb8>
 800a97e:	6832      	ldr	r2, [r6, #0]
 800a980:	1c51      	adds	r1, r2, #1
 800a982:	6031      	str	r1, [r6, #0]
 800a984:	7812      	ldrb	r2, [r2, #0]
 800a986:	f805 2b01 	strb.w	r2, [r5], #1
 800a98a:	6872      	ldr	r2, [r6, #4]
 800a98c:	3a01      	subs	r2, #1
 800a98e:	2a00      	cmp	r2, #0
 800a990:	6072      	str	r2, [r6, #4]
 800a992:	dc07      	bgt.n	800a9a4 <_scanf_i+0xb8>
 800a994:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a998:	4631      	mov	r1, r6
 800a99a:	4650      	mov	r0, sl
 800a99c:	4790      	blx	r2
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f040 8085 	bne.w	800aaae <_scanf_i+0x1c2>
 800a9a4:	f10b 0b01 	add.w	fp, fp, #1
 800a9a8:	f1bb 0f03 	cmp.w	fp, #3
 800a9ac:	d1cb      	bne.n	800a946 <_scanf_i+0x5a>
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	b90b      	cbnz	r3, 800a9b6 <_scanf_i+0xca>
 800a9b2:	230a      	movs	r3, #10
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6863      	ldr	r3, [r4, #4]
 800a9b8:	4945      	ldr	r1, [pc, #276]	@ (800aad0 <_scanf_i+0x1e4>)
 800a9ba:	6960      	ldr	r0, [r4, #20]
 800a9bc:	1ac9      	subs	r1, r1, r3
 800a9be:	f000 f943 	bl	800ac48 <__sccl>
 800a9c2:	f04f 0b00 	mov.w	fp, #0
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d03d      	beq.n	800aa4a <_scanf_i+0x15e>
 800a9ce:	6831      	ldr	r1, [r6, #0]
 800a9d0:	6960      	ldr	r0, [r4, #20]
 800a9d2:	f891 c000 	ldrb.w	ip, [r1]
 800a9d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d035      	beq.n	800aa4a <_scanf_i+0x15e>
 800a9de:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a9e2:	d124      	bne.n	800aa2e <_scanf_i+0x142>
 800a9e4:	0510      	lsls	r0, r2, #20
 800a9e6:	d522      	bpl.n	800aa2e <_scanf_i+0x142>
 800a9e8:	f10b 0b01 	add.w	fp, fp, #1
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	d003      	beq.n	800a9fa <_scanf_i+0x10e>
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9f8:	60a3      	str	r3, [r4, #8]
 800a9fa:	6873      	ldr	r3, [r6, #4]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	6073      	str	r3, [r6, #4]
 800aa02:	dd1b      	ble.n	800aa3c <_scanf_i+0x150>
 800aa04:	6833      	ldr	r3, [r6, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	6033      	str	r3, [r6, #0]
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	e7d9      	b.n	800a9c6 <_scanf_i+0xda>
 800aa12:	f1bb 0f02 	cmp.w	fp, #2
 800aa16:	d1ae      	bne.n	800a976 <_scanf_i+0x8a>
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800aa1e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800aa22:	d1c4      	bne.n	800a9ae <_scanf_i+0xc2>
 800aa24:	2110      	movs	r1, #16
 800aa26:	6061      	str	r1, [r4, #4]
 800aa28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa2c:	e7a2      	b.n	800a974 <_scanf_i+0x88>
 800aa2e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800aa32:	6022      	str	r2, [r4, #0]
 800aa34:	780b      	ldrb	r3, [r1, #0]
 800aa36:	f805 3b01 	strb.w	r3, [r5], #1
 800aa3a:	e7de      	b.n	800a9fa <_scanf_i+0x10e>
 800aa3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa40:	4631      	mov	r1, r6
 800aa42:	4650      	mov	r0, sl
 800aa44:	4798      	blx	r3
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d0df      	beq.n	800aa0a <_scanf_i+0x11e>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	05d9      	lsls	r1, r3, #23
 800aa4e:	d50d      	bpl.n	800aa6c <_scanf_i+0x180>
 800aa50:	42bd      	cmp	r5, r7
 800aa52:	d909      	bls.n	800aa68 <_scanf_i+0x17c>
 800aa54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4798      	blx	r3
 800aa62:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa66:	464d      	mov	r5, r9
 800aa68:	42bd      	cmp	r5, r7
 800aa6a:	d028      	beq.n	800aabe <_scanf_i+0x1d2>
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	f012 0210 	ands.w	r2, r2, #16
 800aa72:	d113      	bne.n	800aa9c <_scanf_i+0x1b0>
 800aa74:	702a      	strb	r2, [r5, #0]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	9e01      	ldr	r6, [sp, #4]
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4650      	mov	r0, sl
 800aa7e:	47b0      	blx	r6
 800aa80:	f8d8 3000 	ldr.w	r3, [r8]
 800aa84:	6821      	ldr	r1, [r4, #0]
 800aa86:	1d1a      	adds	r2, r3, #4
 800aa88:	f8c8 2000 	str.w	r2, [r8]
 800aa8c:	f011 0f20 	tst.w	r1, #32
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	d00f      	beq.n	800aab4 <_scanf_i+0x1c8>
 800aa94:	6018      	str	r0, [r3, #0]
 800aa96:	68e3      	ldr	r3, [r4, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	60e3      	str	r3, [r4, #12]
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	1bed      	subs	r5, r5, r7
 800aaa0:	445d      	add	r5, fp
 800aaa2:	442b      	add	r3, r5
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	b007      	add	sp, #28
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	f04f 0b00 	mov.w	fp, #0
 800aab2:	e7ca      	b.n	800aa4a <_scanf_i+0x15e>
 800aab4:	07ca      	lsls	r2, r1, #31
 800aab6:	bf4c      	ite	mi
 800aab8:	8018      	strhmi	r0, [r3, #0]
 800aaba:	6018      	strpl	r0, [r3, #0]
 800aabc:	e7eb      	b.n	800aa96 <_scanf_i+0x1aa>
 800aabe:	2001      	movs	r0, #1
 800aac0:	e7f2      	b.n	800aaa8 <_scanf_i+0x1bc>
 800aac2:	bf00      	nop
 800aac4:	0800b4ec 	.word	0x0800b4ec
 800aac8:	0800870d 	.word	0x0800870d
 800aacc:	08008801 	.word	0x08008801
 800aad0:	0800b746 	.word	0x0800b746

0800aad4 <__sflush_r>:
 800aad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	0716      	lsls	r6, r2, #28
 800aadc:	4605      	mov	r5, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	d454      	bmi.n	800ab8c <__sflush_r+0xb8>
 800aae2:	684b      	ldr	r3, [r1, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dc02      	bgt.n	800aaee <__sflush_r+0x1a>
 800aae8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dd48      	ble.n	800ab80 <__sflush_r+0xac>
 800aaee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	d045      	beq.n	800ab80 <__sflush_r+0xac>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aafa:	682f      	ldr	r7, [r5, #0]
 800aafc:	6a21      	ldr	r1, [r4, #32]
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	d030      	beq.n	800ab64 <__sflush_r+0x90>
 800ab02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	0759      	lsls	r1, r3, #29
 800ab08:	d505      	bpl.n	800ab16 <__sflush_r+0x42>
 800ab0a:	6863      	ldr	r3, [r4, #4]
 800ab0c:	1ad2      	subs	r2, r2, r3
 800ab0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab10:	b10b      	cbz	r3, 800ab16 <__sflush_r+0x42>
 800ab12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	2300      	movs	r3, #0
 800ab18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab1a:	6a21      	ldr	r1, [r4, #32]
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b0      	blx	r6
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	d106      	bne.n	800ab34 <__sflush_r+0x60>
 800ab26:	6829      	ldr	r1, [r5, #0]
 800ab28:	291d      	cmp	r1, #29
 800ab2a:	d82b      	bhi.n	800ab84 <__sflush_r+0xb0>
 800ab2c:	4a28      	ldr	r2, [pc, #160]	@ (800abd0 <__sflush_r+0xfc>)
 800ab2e:	40ca      	lsrs	r2, r1
 800ab30:	07d6      	lsls	r6, r2, #31
 800ab32:	d527      	bpl.n	800ab84 <__sflush_r+0xb0>
 800ab34:	2200      	movs	r2, #0
 800ab36:	6062      	str	r2, [r4, #4]
 800ab38:	04d9      	lsls	r1, r3, #19
 800ab3a:	6922      	ldr	r2, [r4, #16]
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	d504      	bpl.n	800ab4a <__sflush_r+0x76>
 800ab40:	1c42      	adds	r2, r0, #1
 800ab42:	d101      	bne.n	800ab48 <__sflush_r+0x74>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b903      	cbnz	r3, 800ab4a <__sflush_r+0x76>
 800ab48:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab4c:	602f      	str	r7, [r5, #0]
 800ab4e:	b1b9      	cbz	r1, 800ab80 <__sflush_r+0xac>
 800ab50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab54:	4299      	cmp	r1, r3
 800ab56:	d002      	beq.n	800ab5e <__sflush_r+0x8a>
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f7fe f8c1 	bl	8008ce0 <_free_r>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab62:	e00d      	b.n	800ab80 <__sflush_r+0xac>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b0      	blx	r6
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	1c50      	adds	r0, r2, #1
 800ab6e:	d1c9      	bne.n	800ab04 <__sflush_r+0x30>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0c6      	beq.n	800ab04 <__sflush_r+0x30>
 800ab76:	2b1d      	cmp	r3, #29
 800ab78:	d001      	beq.n	800ab7e <__sflush_r+0xaa>
 800ab7a:	2b16      	cmp	r3, #22
 800ab7c:	d11d      	bne.n	800abba <__sflush_r+0xe6>
 800ab7e:	602f      	str	r7, [r5, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e021      	b.n	800abc8 <__sflush_r+0xf4>
 800ab84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab88:	b21b      	sxth	r3, r3
 800ab8a:	e01a      	b.n	800abc2 <__sflush_r+0xee>
 800ab8c:	690f      	ldr	r7, [r1, #16]
 800ab8e:	2f00      	cmp	r7, #0
 800ab90:	d0f6      	beq.n	800ab80 <__sflush_r+0xac>
 800ab92:	0793      	lsls	r3, r2, #30
 800ab94:	680e      	ldr	r6, [r1, #0]
 800ab96:	bf08      	it	eq
 800ab98:	694b      	ldreq	r3, [r1, #20]
 800ab9a:	600f      	str	r7, [r1, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	2300      	movne	r3, #0
 800aba0:	1bf6      	subs	r6, r6, r7
 800aba2:	608b      	str	r3, [r1, #8]
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	ddeb      	ble.n	800ab80 <__sflush_r+0xac>
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800abae:	4633      	mov	r3, r6
 800abb0:	463a      	mov	r2, r7
 800abb2:	4628      	mov	r0, r5
 800abb4:	47e0      	blx	ip
 800abb6:	2800      	cmp	r0, #0
 800abb8:	dc07      	bgt.n	800abca <__sflush_r+0xf6>
 800abba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abca:	4407      	add	r7, r0
 800abcc:	1a36      	subs	r6, r6, r0
 800abce:	e7e9      	b.n	800aba4 <__sflush_r+0xd0>
 800abd0:	20400001 	.word	0x20400001

0800abd4 <_fflush_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	690b      	ldr	r3, [r1, #16]
 800abd8:	4605      	mov	r5, r0
 800abda:	460c      	mov	r4, r1
 800abdc:	b913      	cbnz	r3, 800abe4 <_fflush_r+0x10>
 800abde:	2500      	movs	r5, #0
 800abe0:	4628      	mov	r0, r5
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	b118      	cbz	r0, 800abee <_fflush_r+0x1a>
 800abe6:	6a03      	ldr	r3, [r0, #32]
 800abe8:	b90b      	cbnz	r3, 800abee <_fflush_r+0x1a>
 800abea:	f7fd fea1 	bl	8008930 <__sinit>
 800abee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0f3      	beq.n	800abde <_fflush_r+0xa>
 800abf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abf8:	07d0      	lsls	r0, r2, #31
 800abfa:	d404      	bmi.n	800ac06 <_fflush_r+0x32>
 800abfc:	0599      	lsls	r1, r3, #22
 800abfe:	d402      	bmi.n	800ac06 <_fflush_r+0x32>
 800ac00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac02:	f7fe f838 	bl	8008c76 <__retarget_lock_acquire_recursive>
 800ac06:	4628      	mov	r0, r5
 800ac08:	4621      	mov	r1, r4
 800ac0a:	f7ff ff63 	bl	800aad4 <__sflush_r>
 800ac0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac10:	07da      	lsls	r2, r3, #31
 800ac12:	4605      	mov	r5, r0
 800ac14:	d4e4      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	059b      	lsls	r3, r3, #22
 800ac1a:	d4e1      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac1e:	f7fe f82b 	bl	8008c78 <__retarget_lock_release_recursive>
 800ac22:	e7dd      	b.n	800abe0 <_fflush_r+0xc>

0800ac24 <fiprintf>:
 800ac24:	b40e      	push	{r1, r2, r3}
 800ac26:	b503      	push	{r0, r1, lr}
 800ac28:	4601      	mov	r1, r0
 800ac2a:	ab03      	add	r3, sp, #12
 800ac2c:	4805      	ldr	r0, [pc, #20]	@ (800ac44 <fiprintf+0x20>)
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	6800      	ldr	r0, [r0, #0]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	f000 f915 	bl	800ae64 <_vfiprintf_r>
 800ac3a:	b002      	add	sp, #8
 800ac3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac40:	b003      	add	sp, #12
 800ac42:	4770      	bx	lr
 800ac44:	20000188 	.word	0x20000188

0800ac48 <__sccl>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	780b      	ldrb	r3, [r1, #0]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ac50:	bf0b      	itete	eq
 800ac52:	784b      	ldrbeq	r3, [r1, #1]
 800ac54:	1c4a      	addne	r2, r1, #1
 800ac56:	1c8a      	addeq	r2, r1, #2
 800ac58:	2100      	movne	r1, #0
 800ac5a:	bf08      	it	eq
 800ac5c:	2101      	moveq	r1, #1
 800ac5e:	3801      	subs	r0, #1
 800ac60:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ac64:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ac68:	42a8      	cmp	r0, r5
 800ac6a:	d1fb      	bne.n	800ac64 <__sccl+0x1c>
 800ac6c:	b90b      	cbnz	r3, 800ac72 <__sccl+0x2a>
 800ac6e:	1e50      	subs	r0, r2, #1
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	f081 0101 	eor.w	r1, r1, #1
 800ac76:	54e1      	strb	r1, [r4, r3]
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac80:	2d2d      	cmp	r5, #45	@ 0x2d
 800ac82:	d005      	beq.n	800ac90 <__sccl+0x48>
 800ac84:	2d5d      	cmp	r5, #93	@ 0x5d
 800ac86:	d016      	beq.n	800acb6 <__sccl+0x6e>
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	d0f1      	beq.n	800ac70 <__sccl+0x28>
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	e7f2      	b.n	800ac76 <__sccl+0x2e>
 800ac90:	7846      	ldrb	r6, [r0, #1]
 800ac92:	2e5d      	cmp	r6, #93	@ 0x5d
 800ac94:	d0fa      	beq.n	800ac8c <__sccl+0x44>
 800ac96:	42b3      	cmp	r3, r6
 800ac98:	dcf8      	bgt.n	800ac8c <__sccl+0x44>
 800ac9a:	3002      	adds	r0, #2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	3201      	adds	r2, #1
 800aca0:	4296      	cmp	r6, r2
 800aca2:	54a1      	strb	r1, [r4, r2]
 800aca4:	dcfb      	bgt.n	800ac9e <__sccl+0x56>
 800aca6:	1af2      	subs	r2, r6, r3
 800aca8:	3a01      	subs	r2, #1
 800acaa:	1c5d      	adds	r5, r3, #1
 800acac:	42b3      	cmp	r3, r6
 800acae:	bfa8      	it	ge
 800acb0:	2200      	movge	r2, #0
 800acb2:	18ab      	adds	r3, r5, r2
 800acb4:	e7e1      	b.n	800ac7a <__sccl+0x32>
 800acb6:	4610      	mov	r0, r2
 800acb8:	e7da      	b.n	800ac70 <__sccl+0x28>

0800acba <__submore>:
 800acba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800acc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d11d      	bne.n	800ad06 <__submore+0x4c>
 800acca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800acce:	f7fe fbb5 	bl	800943c <_malloc_r>
 800acd2:	b918      	cbnz	r0, 800acdc <__submore+0x22>
 800acd4:	f04f 30ff 	mov.w	r0, #4294967295
 800acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ace0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ace2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ace6:	6360      	str	r0, [r4, #52]	@ 0x34
 800ace8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800acec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800acf0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800acf4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800acf8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800acfc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ad00:	6020      	str	r0, [r4, #0]
 800ad02:	2000      	movs	r0, #0
 800ad04:	e7e8      	b.n	800acd8 <__submore+0x1e>
 800ad06:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ad08:	0077      	lsls	r7, r6, #1
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	f000 f855 	bl	800adba <_realloc_r>
 800ad10:	4605      	mov	r5, r0
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0de      	beq.n	800acd4 <__submore+0x1a>
 800ad16:	eb00 0806 	add.w	r8, r0, r6
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	4640      	mov	r0, r8
 800ad20:	f7fd ffab 	bl	8008c7a <memcpy>
 800ad24:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ad28:	f8c4 8000 	str.w	r8, [r4]
 800ad2c:	e7e9      	b.n	800ad02 <__submore+0x48>

0800ad2e <memmove>:
 800ad2e:	4288      	cmp	r0, r1
 800ad30:	b510      	push	{r4, lr}
 800ad32:	eb01 0402 	add.w	r4, r1, r2
 800ad36:	d902      	bls.n	800ad3e <memmove+0x10>
 800ad38:	4284      	cmp	r4, r0
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	d807      	bhi.n	800ad4e <memmove+0x20>
 800ad3e:	1e43      	subs	r3, r0, #1
 800ad40:	42a1      	cmp	r1, r4
 800ad42:	d008      	beq.n	800ad56 <memmove+0x28>
 800ad44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad4c:	e7f8      	b.n	800ad40 <memmove+0x12>
 800ad4e:	4402      	add	r2, r0
 800ad50:	4601      	mov	r1, r0
 800ad52:	428a      	cmp	r2, r1
 800ad54:	d100      	bne.n	800ad58 <memmove+0x2a>
 800ad56:	bd10      	pop	{r4, pc}
 800ad58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad60:	e7f7      	b.n	800ad52 <memmove+0x24>
	...

0800ad64 <_sbrk_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	@ (800ad80 <_sbrk_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7fc fda4 	bl	80078bc <_sbrk>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_sbrk_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_sbrk_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20000544 	.word	0x20000544

0800ad84 <abort>:
 800ad84:	b508      	push	{r3, lr}
 800ad86:	2006      	movs	r0, #6
 800ad88:	f000 fa40 	bl	800b20c <raise>
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f7fc fd20 	bl	80077d2 <_exit>

0800ad92 <_calloc_r>:
 800ad92:	b570      	push	{r4, r5, r6, lr}
 800ad94:	fba1 5402 	umull	r5, r4, r1, r2
 800ad98:	b934      	cbnz	r4, 800ada8 <_calloc_r+0x16>
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7fe fb4e 	bl	800943c <_malloc_r>
 800ada0:	4606      	mov	r6, r0
 800ada2:	b928      	cbnz	r0, 800adb0 <_calloc_r+0x1e>
 800ada4:	4630      	mov	r0, r6
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	220c      	movs	r2, #12
 800adaa:	6002      	str	r2, [r0, #0]
 800adac:	2600      	movs	r6, #0
 800adae:	e7f9      	b.n	800ada4 <_calloc_r+0x12>
 800adb0:	462a      	mov	r2, r5
 800adb2:	4621      	mov	r1, r4
 800adb4:	f7fd fe85 	bl	8008ac2 <memset>
 800adb8:	e7f4      	b.n	800ada4 <_calloc_r+0x12>

0800adba <_realloc_r>:
 800adba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbe:	4607      	mov	r7, r0
 800adc0:	4614      	mov	r4, r2
 800adc2:	460d      	mov	r5, r1
 800adc4:	b921      	cbnz	r1, 800add0 <_realloc_r+0x16>
 800adc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adca:	4611      	mov	r1, r2
 800adcc:	f7fe bb36 	b.w	800943c <_malloc_r>
 800add0:	b92a      	cbnz	r2, 800adde <_realloc_r+0x24>
 800add2:	f7fd ff85 	bl	8008ce0 <_free_r>
 800add6:	4625      	mov	r5, r4
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adde:	f000 fa31 	bl	800b244 <_malloc_usable_size_r>
 800ade2:	4284      	cmp	r4, r0
 800ade4:	4606      	mov	r6, r0
 800ade6:	d802      	bhi.n	800adee <_realloc_r+0x34>
 800ade8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adec:	d8f4      	bhi.n	800add8 <_realloc_r+0x1e>
 800adee:	4621      	mov	r1, r4
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7fe fb23 	bl	800943c <_malloc_r>
 800adf6:	4680      	mov	r8, r0
 800adf8:	b908      	cbnz	r0, 800adfe <_realloc_r+0x44>
 800adfa:	4645      	mov	r5, r8
 800adfc:	e7ec      	b.n	800add8 <_realloc_r+0x1e>
 800adfe:	42b4      	cmp	r4, r6
 800ae00:	4622      	mov	r2, r4
 800ae02:	4629      	mov	r1, r5
 800ae04:	bf28      	it	cs
 800ae06:	4632      	movcs	r2, r6
 800ae08:	f7fd ff37 	bl	8008c7a <memcpy>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f7fd ff66 	bl	8008ce0 <_free_r>
 800ae14:	e7f1      	b.n	800adfa <_realloc_r+0x40>

0800ae16 <__sfputc_r>:
 800ae16:	6893      	ldr	r3, [r2, #8]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	b410      	push	{r4}
 800ae1e:	6093      	str	r3, [r2, #8]
 800ae20:	da07      	bge.n	800ae32 <__sfputc_r+0x1c>
 800ae22:	6994      	ldr	r4, [r2, #24]
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	db01      	blt.n	800ae2c <__sfputc_r+0x16>
 800ae28:	290a      	cmp	r1, #10
 800ae2a:	d102      	bne.n	800ae32 <__sfputc_r+0x1c>
 800ae2c:	bc10      	pop	{r4}
 800ae2e:	f000 b931 	b.w	800b094 <__swbuf_r>
 800ae32:	6813      	ldr	r3, [r2, #0]
 800ae34:	1c58      	adds	r0, r3, #1
 800ae36:	6010      	str	r0, [r2, #0]
 800ae38:	7019      	strb	r1, [r3, #0]
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	bc10      	pop	{r4}
 800ae3e:	4770      	bx	lr

0800ae40 <__sfputs_r>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	4614      	mov	r4, r2
 800ae48:	18d5      	adds	r5, r2, r3
 800ae4a:	42ac      	cmp	r4, r5
 800ae4c:	d101      	bne.n	800ae52 <__sfputs_r+0x12>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e007      	b.n	800ae62 <__sfputs_r+0x22>
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	463a      	mov	r2, r7
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ffdc 	bl	800ae16 <__sfputc_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d1f3      	bne.n	800ae4a <__sfputs_r+0xa>
 800ae62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae64 <_vfiprintf_r>:
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	460d      	mov	r5, r1
 800ae6a:	b09d      	sub	sp, #116	@ 0x74
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	4698      	mov	r8, r3
 800ae70:	4606      	mov	r6, r0
 800ae72:	b118      	cbz	r0, 800ae7c <_vfiprintf_r+0x18>
 800ae74:	6a03      	ldr	r3, [r0, #32]
 800ae76:	b90b      	cbnz	r3, 800ae7c <_vfiprintf_r+0x18>
 800ae78:	f7fd fd5a 	bl	8008930 <__sinit>
 800ae7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae7e:	07d9      	lsls	r1, r3, #31
 800ae80:	d405      	bmi.n	800ae8e <_vfiprintf_r+0x2a>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	059a      	lsls	r2, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_vfiprintf_r+0x2a>
 800ae88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae8a:	f7fd fef4 	bl	8008c76 <__retarget_lock_acquire_recursive>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	071b      	lsls	r3, r3, #28
 800ae92:	d501      	bpl.n	800ae98 <_vfiprintf_r+0x34>
 800ae94:	692b      	ldr	r3, [r5, #16]
 800ae96:	b99b      	cbnz	r3, 800aec0 <_vfiprintf_r+0x5c>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f000 f938 	bl	800b110 <__swsetup_r>
 800aea0:	b170      	cbz	r0, 800aec0 <_vfiprintf_r+0x5c>
 800aea2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aea4:	07dc      	lsls	r4, r3, #31
 800aea6:	d504      	bpl.n	800aeb2 <_vfiprintf_r+0x4e>
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	b01d      	add	sp, #116	@ 0x74
 800aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	0598      	lsls	r0, r3, #22
 800aeb6:	d4f7      	bmi.n	800aea8 <_vfiprintf_r+0x44>
 800aeb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeba:	f7fd fedd 	bl	8008c78 <__retarget_lock_release_recursive>
 800aebe:	e7f3      	b.n	800aea8 <_vfiprintf_r+0x44>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec4:	2320      	movs	r3, #32
 800aec6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeca:	f8cd 800c 	str.w	r8, [sp, #12]
 800aece:	2330      	movs	r3, #48	@ 0x30
 800aed0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b080 <_vfiprintf_r+0x21c>
 800aed4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aed8:	f04f 0901 	mov.w	r9, #1
 800aedc:	4623      	mov	r3, r4
 800aede:	469a      	mov	sl, r3
 800aee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aee4:	b10a      	cbz	r2, 800aeea <_vfiprintf_r+0x86>
 800aee6:	2a25      	cmp	r2, #37	@ 0x25
 800aee8:	d1f9      	bne.n	800aede <_vfiprintf_r+0x7a>
 800aeea:	ebba 0b04 	subs.w	fp, sl, r4
 800aeee:	d00b      	beq.n	800af08 <_vfiprintf_r+0xa4>
 800aef0:	465b      	mov	r3, fp
 800aef2:	4622      	mov	r2, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ffa2 	bl	800ae40 <__sfputs_r>
 800aefc:	3001      	adds	r0, #1
 800aefe:	f000 80a7 	beq.w	800b050 <_vfiprintf_r+0x1ec>
 800af02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af04:	445a      	add	r2, fp
 800af06:	9209      	str	r2, [sp, #36]	@ 0x24
 800af08:	f89a 3000 	ldrb.w	r3, [sl]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 809f 	beq.w	800b050 <_vfiprintf_r+0x1ec>
 800af12:	2300      	movs	r3, #0
 800af14:	f04f 32ff 	mov.w	r2, #4294967295
 800af18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af1c:	f10a 0a01 	add.w	sl, sl, #1
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af28:	931a      	str	r3, [sp, #104]	@ 0x68
 800af2a:	4654      	mov	r4, sl
 800af2c:	2205      	movs	r2, #5
 800af2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af32:	4853      	ldr	r0, [pc, #332]	@ (800b080 <_vfiprintf_r+0x21c>)
 800af34:	f7f5 f92c 	bl	8000190 <memchr>
 800af38:	9a04      	ldr	r2, [sp, #16]
 800af3a:	b9d8      	cbnz	r0, 800af74 <_vfiprintf_r+0x110>
 800af3c:	06d1      	lsls	r1, r2, #27
 800af3e:	bf44      	itt	mi
 800af40:	2320      	movmi	r3, #32
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af46:	0713      	lsls	r3, r2, #28
 800af48:	bf44      	itt	mi
 800af4a:	232b      	movmi	r3, #43	@ 0x2b
 800af4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af50:	f89a 3000 	ldrb.w	r3, [sl]
 800af54:	2b2a      	cmp	r3, #42	@ 0x2a
 800af56:	d015      	beq.n	800af84 <_vfiprintf_r+0x120>
 800af58:	9a07      	ldr	r2, [sp, #28]
 800af5a:	4654      	mov	r4, sl
 800af5c:	2000      	movs	r0, #0
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4621      	mov	r1, r4
 800af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af68:	3b30      	subs	r3, #48	@ 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d94b      	bls.n	800b006 <_vfiprintf_r+0x1a2>
 800af6e:	b1b0      	cbz	r0, 800af9e <_vfiprintf_r+0x13a>
 800af70:	9207      	str	r2, [sp, #28]
 800af72:	e014      	b.n	800af9e <_vfiprintf_r+0x13a>
 800af74:	eba0 0308 	sub.w	r3, r0, r8
 800af78:	fa09 f303 	lsl.w	r3, r9, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	46a2      	mov	sl, r4
 800af82:	e7d2      	b.n	800af2a <_vfiprintf_r+0xc6>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	1d19      	adds	r1, r3, #4
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	9103      	str	r1, [sp, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bfbb      	ittet	lt
 800af90:	425b      	neglt	r3, r3
 800af92:	f042 0202 	orrlt.w	r2, r2, #2
 800af96:	9307      	strge	r3, [sp, #28]
 800af98:	9307      	strlt	r3, [sp, #28]
 800af9a:	bfb8      	it	lt
 800af9c:	9204      	strlt	r2, [sp, #16]
 800af9e:	7823      	ldrb	r3, [r4, #0]
 800afa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800afa2:	d10a      	bne.n	800afba <_vfiprintf_r+0x156>
 800afa4:	7863      	ldrb	r3, [r4, #1]
 800afa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa8:	d132      	bne.n	800b010 <_vfiprintf_r+0x1ac>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	1d1a      	adds	r2, r3, #4
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	9203      	str	r2, [sp, #12]
 800afb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afb6:	3402      	adds	r4, #2
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b084 <_vfiprintf_r+0x220>
 800afbe:	7821      	ldrb	r1, [r4, #0]
 800afc0:	2203      	movs	r2, #3
 800afc2:	4650      	mov	r0, sl
 800afc4:	f7f5 f8e4 	bl	8000190 <memchr>
 800afc8:	b138      	cbz	r0, 800afda <_vfiprintf_r+0x176>
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	eba0 000a 	sub.w	r0, r0, sl
 800afd0:	2240      	movs	r2, #64	@ 0x40
 800afd2:	4082      	lsls	r2, r0
 800afd4:	4313      	orrs	r3, r2
 800afd6:	3401      	adds	r4, #1
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afde:	482a      	ldr	r0, [pc, #168]	@ (800b088 <_vfiprintf_r+0x224>)
 800afe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afe4:	2206      	movs	r2, #6
 800afe6:	f7f5 f8d3 	bl	8000190 <memchr>
 800afea:	2800      	cmp	r0, #0
 800afec:	d03f      	beq.n	800b06e <_vfiprintf_r+0x20a>
 800afee:	4b27      	ldr	r3, [pc, #156]	@ (800b08c <_vfiprintf_r+0x228>)
 800aff0:	bb1b      	cbnz	r3, 800b03a <_vfiprintf_r+0x1d6>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	3307      	adds	r3, #7
 800aff6:	f023 0307 	bic.w	r3, r3, #7
 800affa:	3308      	adds	r3, #8
 800affc:	9303      	str	r3, [sp, #12]
 800affe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b000:	443b      	add	r3, r7
 800b002:	9309      	str	r3, [sp, #36]	@ 0x24
 800b004:	e76a      	b.n	800aedc <_vfiprintf_r+0x78>
 800b006:	fb0c 3202 	mla	r2, ip, r2, r3
 800b00a:	460c      	mov	r4, r1
 800b00c:	2001      	movs	r0, #1
 800b00e:	e7a8      	b.n	800af62 <_vfiprintf_r+0xfe>
 800b010:	2300      	movs	r3, #0
 800b012:	3401      	adds	r4, #1
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	4619      	mov	r1, r3
 800b018:	f04f 0c0a 	mov.w	ip, #10
 800b01c:	4620      	mov	r0, r4
 800b01e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b022:	3a30      	subs	r2, #48	@ 0x30
 800b024:	2a09      	cmp	r2, #9
 800b026:	d903      	bls.n	800b030 <_vfiprintf_r+0x1cc>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0c6      	beq.n	800afba <_vfiprintf_r+0x156>
 800b02c:	9105      	str	r1, [sp, #20]
 800b02e:	e7c4      	b.n	800afba <_vfiprintf_r+0x156>
 800b030:	fb0c 2101 	mla	r1, ip, r1, r2
 800b034:	4604      	mov	r4, r0
 800b036:	2301      	movs	r3, #1
 800b038:	e7f0      	b.n	800b01c <_vfiprintf_r+0x1b8>
 800b03a:	ab03      	add	r3, sp, #12
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	462a      	mov	r2, r5
 800b040:	4b13      	ldr	r3, [pc, #76]	@ (800b090 <_vfiprintf_r+0x22c>)
 800b042:	a904      	add	r1, sp, #16
 800b044:	4630      	mov	r0, r6
 800b046:	f3af 8000 	nop.w
 800b04a:	4607      	mov	r7, r0
 800b04c:	1c78      	adds	r0, r7, #1
 800b04e:	d1d6      	bne.n	800affe <_vfiprintf_r+0x19a>
 800b050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b052:	07d9      	lsls	r1, r3, #31
 800b054:	d405      	bmi.n	800b062 <_vfiprintf_r+0x1fe>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_vfiprintf_r+0x1fe>
 800b05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b05e:	f7fd fe0b 	bl	8008c78 <__retarget_lock_release_recursive>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	065b      	lsls	r3, r3, #25
 800b066:	f53f af1f 	bmi.w	800aea8 <_vfiprintf_r+0x44>
 800b06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06c:	e71e      	b.n	800aeac <_vfiprintf_r+0x48>
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4b06      	ldr	r3, [pc, #24]	@ (800b090 <_vfiprintf_r+0x22c>)
 800b076:	a904      	add	r1, sp, #16
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff fabf 	bl	800a5fc <_printf_i>
 800b07e:	e7e4      	b.n	800b04a <_vfiprintf_r+0x1e6>
 800b080:	0800b703 	.word	0x0800b703
 800b084:	0800b709 	.word	0x0800b709
 800b088:	0800b70d 	.word	0x0800b70d
 800b08c:	00000000 	.word	0x00000000
 800b090:	0800ae41 	.word	0x0800ae41

0800b094 <__swbuf_r>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	460e      	mov	r6, r1
 800b098:	4614      	mov	r4, r2
 800b09a:	4605      	mov	r5, r0
 800b09c:	b118      	cbz	r0, 800b0a6 <__swbuf_r+0x12>
 800b09e:	6a03      	ldr	r3, [r0, #32]
 800b0a0:	b90b      	cbnz	r3, 800b0a6 <__swbuf_r+0x12>
 800b0a2:	f7fd fc45 	bl	8008930 <__sinit>
 800b0a6:	69a3      	ldr	r3, [r4, #24]
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	071a      	lsls	r2, r3, #28
 800b0ae:	d501      	bpl.n	800b0b4 <__swbuf_r+0x20>
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	b943      	cbnz	r3, 800b0c6 <__swbuf_r+0x32>
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f82a 	bl	800b110 <__swsetup_r>
 800b0bc:	b118      	cbz	r0, 800b0c6 <__swbuf_r+0x32>
 800b0be:	f04f 37ff 	mov.w	r7, #4294967295
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	6922      	ldr	r2, [r4, #16]
 800b0ca:	1a98      	subs	r0, r3, r2
 800b0cc:	6963      	ldr	r3, [r4, #20]
 800b0ce:	b2f6      	uxtb	r6, r6
 800b0d0:	4283      	cmp	r3, r0
 800b0d2:	4637      	mov	r7, r6
 800b0d4:	dc05      	bgt.n	800b0e2 <__swbuf_r+0x4e>
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7ff fd7b 	bl	800abd4 <_fflush_r>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d1ed      	bne.n	800b0be <__swbuf_r+0x2a>
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	60a3      	str	r3, [r4, #8]
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	6022      	str	r2, [r4, #0]
 800b0ee:	701e      	strb	r6, [r3, #0]
 800b0f0:	6962      	ldr	r2, [r4, #20]
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d004      	beq.n	800b102 <__swbuf_r+0x6e>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	07db      	lsls	r3, r3, #31
 800b0fc:	d5e1      	bpl.n	800b0c2 <__swbuf_r+0x2e>
 800b0fe:	2e0a      	cmp	r6, #10
 800b100:	d1df      	bne.n	800b0c2 <__swbuf_r+0x2e>
 800b102:	4621      	mov	r1, r4
 800b104:	4628      	mov	r0, r5
 800b106:	f7ff fd65 	bl	800abd4 <_fflush_r>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d0d9      	beq.n	800b0c2 <__swbuf_r+0x2e>
 800b10e:	e7d6      	b.n	800b0be <__swbuf_r+0x2a>

0800b110 <__swsetup_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4b29      	ldr	r3, [pc, #164]	@ (800b1b8 <__swsetup_r+0xa8>)
 800b114:	4605      	mov	r5, r0
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	460c      	mov	r4, r1
 800b11a:	b118      	cbz	r0, 800b124 <__swsetup_r+0x14>
 800b11c:	6a03      	ldr	r3, [r0, #32]
 800b11e:	b90b      	cbnz	r3, 800b124 <__swsetup_r+0x14>
 800b120:	f7fd fc06 	bl	8008930 <__sinit>
 800b124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b128:	0719      	lsls	r1, r3, #28
 800b12a:	d422      	bmi.n	800b172 <__swsetup_r+0x62>
 800b12c:	06da      	lsls	r2, r3, #27
 800b12e:	d407      	bmi.n	800b140 <__swsetup_r+0x30>
 800b130:	2209      	movs	r2, #9
 800b132:	602a      	str	r2, [r5, #0]
 800b134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295
 800b13e:	e033      	b.n	800b1a8 <__swsetup_r+0x98>
 800b140:	0758      	lsls	r0, r3, #29
 800b142:	d512      	bpl.n	800b16a <__swsetup_r+0x5a>
 800b144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b146:	b141      	cbz	r1, 800b15a <__swsetup_r+0x4a>
 800b148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d002      	beq.n	800b156 <__swsetup_r+0x46>
 800b150:	4628      	mov	r0, r5
 800b152:	f7fd fdc5 	bl	8008ce0 <_free_r>
 800b156:	2300      	movs	r3, #0
 800b158:	6363      	str	r3, [r4, #52]	@ 0x34
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	2300      	movs	r3, #0
 800b164:	6063      	str	r3, [r4, #4]
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f043 0308 	orr.w	r3, r3, #8
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	b94b      	cbnz	r3, 800b18a <__swsetup_r+0x7a>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b180:	d003      	beq.n	800b18a <__swsetup_r+0x7a>
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f88b 	bl	800b2a0 <__smakebuf_r>
 800b18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18e:	f013 0201 	ands.w	r2, r3, #1
 800b192:	d00a      	beq.n	800b1aa <__swsetup_r+0x9a>
 800b194:	2200      	movs	r2, #0
 800b196:	60a2      	str	r2, [r4, #8]
 800b198:	6962      	ldr	r2, [r4, #20]
 800b19a:	4252      	negs	r2, r2
 800b19c:	61a2      	str	r2, [r4, #24]
 800b19e:	6922      	ldr	r2, [r4, #16]
 800b1a0:	b942      	cbnz	r2, 800b1b4 <__swsetup_r+0xa4>
 800b1a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1a6:	d1c5      	bne.n	800b134 <__swsetup_r+0x24>
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	0799      	lsls	r1, r3, #30
 800b1ac:	bf58      	it	pl
 800b1ae:	6962      	ldrpl	r2, [r4, #20]
 800b1b0:	60a2      	str	r2, [r4, #8]
 800b1b2:	e7f4      	b.n	800b19e <__swsetup_r+0x8e>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7f7      	b.n	800b1a8 <__swsetup_r+0x98>
 800b1b8:	20000188 	.word	0x20000188

0800b1bc <_raise_r>:
 800b1bc:	291f      	cmp	r1, #31
 800b1be:	b538      	push	{r3, r4, r5, lr}
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	d904      	bls.n	800b1d0 <_raise_r+0x14>
 800b1c6:	2316      	movs	r3, #22
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1d2:	b112      	cbz	r2, 800b1da <_raise_r+0x1e>
 800b1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d8:	b94b      	cbnz	r3, 800b1ee <_raise_r+0x32>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f000 f830 	bl	800b240 <_getpid_r>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ea:	f000 b817 	b.w	800b21c <_kill_r>
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d00a      	beq.n	800b208 <_raise_r+0x4c>
 800b1f2:	1c59      	adds	r1, r3, #1
 800b1f4:	d103      	bne.n	800b1fe <_raise_r+0x42>
 800b1f6:	2316      	movs	r3, #22
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e7e7      	b.n	800b1ce <_raise_r+0x12>
 800b1fe:	2100      	movs	r1, #0
 800b200:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b204:	4620      	mov	r0, r4
 800b206:	4798      	blx	r3
 800b208:	2000      	movs	r0, #0
 800b20a:	e7e0      	b.n	800b1ce <_raise_r+0x12>

0800b20c <raise>:
 800b20c:	4b02      	ldr	r3, [pc, #8]	@ (800b218 <raise+0xc>)
 800b20e:	4601      	mov	r1, r0
 800b210:	6818      	ldr	r0, [r3, #0]
 800b212:	f7ff bfd3 	b.w	800b1bc <_raise_r>
 800b216:	bf00      	nop
 800b218:	20000188 	.word	0x20000188

0800b21c <_kill_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	@ (800b23c <_kill_r+0x20>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	4611      	mov	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7fc fac2 	bl	80077b2 <_kill>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d102      	bne.n	800b238 <_kill_r+0x1c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	b103      	cbz	r3, 800b238 <_kill_r+0x1c>
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	bf00      	nop
 800b23c:	20000544 	.word	0x20000544

0800b240 <_getpid_r>:
 800b240:	f7fc bab0 	b.w	80077a4 <_getpid>

0800b244 <_malloc_usable_size_r>:
 800b244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b248:	1f18      	subs	r0, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfbc      	itt	lt
 800b24e:	580b      	ldrlt	r3, [r1, r0]
 800b250:	18c0      	addlt	r0, r0, r3
 800b252:	4770      	bx	lr

0800b254 <__swhatbuf_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	460c      	mov	r4, r1
 800b258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25c:	2900      	cmp	r1, #0
 800b25e:	b096      	sub	sp, #88	@ 0x58
 800b260:	4615      	mov	r5, r2
 800b262:	461e      	mov	r6, r3
 800b264:	da0d      	bge.n	800b282 <__swhatbuf_r+0x2e>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b26c:	f04f 0100 	mov.w	r1, #0
 800b270:	bf14      	ite	ne
 800b272:	2340      	movne	r3, #64	@ 0x40
 800b274:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b278:	2000      	movs	r0, #0
 800b27a:	6031      	str	r1, [r6, #0]
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	b016      	add	sp, #88	@ 0x58
 800b280:	bd70      	pop	{r4, r5, r6, pc}
 800b282:	466a      	mov	r2, sp
 800b284:	f000 f848 	bl	800b318 <_fstat_r>
 800b288:	2800      	cmp	r0, #0
 800b28a:	dbec      	blt.n	800b266 <__swhatbuf_r+0x12>
 800b28c:	9901      	ldr	r1, [sp, #4]
 800b28e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b292:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b296:	4259      	negs	r1, r3
 800b298:	4159      	adcs	r1, r3
 800b29a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b29e:	e7eb      	b.n	800b278 <__swhatbuf_r+0x24>

0800b2a0 <__smakebuf_r>:
 800b2a0:	898b      	ldrh	r3, [r1, #12]
 800b2a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2a4:	079d      	lsls	r5, r3, #30
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	d507      	bpl.n	800b2bc <__smakebuf_r+0x1c>
 800b2ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	6123      	str	r3, [r4, #16]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	6163      	str	r3, [r4, #20]
 800b2b8:	b003      	add	sp, #12
 800b2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2bc:	ab01      	add	r3, sp, #4
 800b2be:	466a      	mov	r2, sp
 800b2c0:	f7ff ffc8 	bl	800b254 <__swhatbuf_r>
 800b2c4:	9f00      	ldr	r7, [sp, #0]
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7fe f8b6 	bl	800943c <_malloc_r>
 800b2d0:	b948      	cbnz	r0, 800b2e6 <__smakebuf_r+0x46>
 800b2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2d6:	059a      	lsls	r2, r3, #22
 800b2d8:	d4ee      	bmi.n	800b2b8 <__smakebuf_r+0x18>
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	f043 0302 	orr.w	r3, r3, #2
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	e7e2      	b.n	800b2ac <__smakebuf_r+0xc>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	6020      	str	r0, [r4, #0]
 800b2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2ee:	81a3      	strh	r3, [r4, #12]
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2f6:	b15b      	cbz	r3, 800b310 <__smakebuf_r+0x70>
 800b2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 f81d 	bl	800b33c <_isatty_r>
 800b302:	b128      	cbz	r0, 800b310 <__smakebuf_r+0x70>
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	f023 0303 	bic.w	r3, r3, #3
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	431d      	orrs	r5, r3
 800b314:	81a5      	strh	r5, [r4, #12]
 800b316:	e7cf      	b.n	800b2b8 <__smakebuf_r+0x18>

0800b318 <_fstat_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	@ (800b338 <_fstat_r+0x20>)
 800b31c:	2300      	movs	r3, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	4608      	mov	r0, r1
 800b322:	4611      	mov	r1, r2
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	f7fc faa3 	bl	8007870 <_fstat>
 800b32a:	1c43      	adds	r3, r0, #1
 800b32c:	d102      	bne.n	800b334 <_fstat_r+0x1c>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	b103      	cbz	r3, 800b334 <_fstat_r+0x1c>
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd38      	pop	{r3, r4, r5, pc}
 800b336:	bf00      	nop
 800b338:	20000544 	.word	0x20000544

0800b33c <_isatty_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d06      	ldr	r5, [pc, #24]	@ (800b358 <_isatty_r+0x1c>)
 800b340:	2300      	movs	r3, #0
 800b342:	4604      	mov	r4, r0
 800b344:	4608      	mov	r0, r1
 800b346:	602b      	str	r3, [r5, #0]
 800b348:	f7fc faa1 	bl	800788e <_isatty>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_isatty_r+0x1a>
 800b350:	682b      	ldr	r3, [r5, #0]
 800b352:	b103      	cbz	r3, 800b356 <_isatty_r+0x1a>
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20000544 	.word	0x20000544

0800b35c <_gettimeofday>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	@ (800b368 <_gettimeofday+0xc>)
 800b35e:	2258      	movs	r2, #88	@ 0x58
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	4770      	bx	lr
 800b368:	20000544 	.word	0x20000544

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
